// Code generated by mockery v2.45.1. DO NOT EDIT.

package redis

import (
	errors "hedge/common/errors"
	mock "github.com/stretchr/testify/mock"
)

// MockDBClient is an autogenerated mock type for the DBClient type
type MockDBClient struct {
	mock.Mock
}

type MockDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClient) EXPECT() *MockDBClient_Expecter {
	return &MockDBClient_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function with given fields:
func (_m *MockDBClient) GetState() ([]byte, errors.HedgeError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 []byte
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func() ([]byte, errors.HedgeError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() errors.HedgeError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDBClient_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockDBClient_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) GetState() *MockDBClient_GetState_Call {
	return &MockDBClient_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *MockDBClient_GetState_Call) Run(run func()) *MockDBClient_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_GetState_Call) Return(_a0 []byte, _a1 errors.HedgeError) *MockDBClient_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_GetState_Call) RunAndReturn(run func() ([]byte, errors.HedgeError)) *MockDBClient_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateCoreVersion provides a mock function with given fields:
func (_m *MockDBClient) GetStateCoreVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateCoreVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDBClient_GetStateCoreVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateCoreVersion'
type MockDBClient_GetStateCoreVersion_Call struct {
	*mock.Call
}

// GetStateCoreVersion is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) GetStateCoreVersion() *MockDBClient_GetStateCoreVersion_Call {
	return &MockDBClient_GetStateCoreVersion_Call{Call: _e.mock.On("GetStateCoreVersion")}
}

func (_c *MockDBClient_GetStateCoreVersion_Call) Run(run func()) *MockDBClient_GetStateCoreVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_GetStateCoreVersion_Call) Return(_a0 string) *MockDBClient_GetStateCoreVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_GetStateCoreVersion_Call) RunAndReturn(run func() string) *MockDBClient_GetStateCoreVersion_Call {
	_c.Call.Return(run)
	return _c
}

// KnownNode provides a mock function with given fields: _a0
func (_m *MockDBClient) KnownNode(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for KnownNode")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDBClient_KnownNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KnownNode'
type MockDBClient_KnownNode_Call struct {
	*mock.Call
}

// KnownNode is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDBClient_Expecter) KnownNode(_a0 interface{}) *MockDBClient_KnownNode_Call {
	return &MockDBClient_KnownNode_Call{Call: _e.mock.On("KnownNode", _a0)}
}

func (_c *MockDBClient_KnownNode_Call) Run(run func(_a0 string)) *MockDBClient_KnownNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClient_KnownNode_Call) Return(_a0 string) *MockDBClient_KnownNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_KnownNode_Call) RunAndReturn(run func(string) string) *MockDBClient_KnownNode_Call {
	_c.Call.Return(run)
	return _c
}

// SetKnownNode provides a mock function with given fields: _a0, _a1
func (_m *MockDBClient) SetKnownNode(_a0 string, _a1 string) errors.HedgeError {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetKnownNode")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDBClient_SetKnownNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKnownNode'
type MockDBClient_SetKnownNode_Call struct {
	*mock.Call
}

// SetKnownNode is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockDBClient_Expecter) SetKnownNode(_a0 interface{}, _a1 interface{}) *MockDBClient_SetKnownNode_Call {
	return &MockDBClient_SetKnownNode_Call{Call: _e.mock.On("SetKnownNode", _a0, _a1)}
}

func (_c *MockDBClient_SetKnownNode_Call) Run(run func(_a0 string, _a1 string)) *MockDBClient_SetKnownNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDBClient_SetKnownNode_Call) Return(_a0 errors.HedgeError) *MockDBClient_SetKnownNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_SetKnownNode_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockDBClient_SetKnownNode_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function with given fields: _a0
func (_m *MockDBClient) SetState(_a0 []byte) errors.HedgeError {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]byte) errors.HedgeError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDBClient_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockDBClient_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockDBClient_Expecter) SetState(_a0 interface{}) *MockDBClient_SetState_Call {
	return &MockDBClient_SetState_Call{Call: _e.mock.On("SetState", _a0)}
}

func (_c *MockDBClient_SetState_Call) Run(run func(_a0 []byte)) *MockDBClient_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockDBClient_SetState_Call) Return(_a0 errors.HedgeError) *MockDBClient_SetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_SetState_Call) RunAndReturn(run func([]byte) errors.HedgeError) *MockDBClient_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// SetStateCoreVersion provides a mock function with given fields: _a0
func (_m *MockDBClient) SetStateCoreVersion(_a0 string) errors.HedgeError {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetStateCoreVersion")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDBClient_SetStateCoreVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateCoreVersion'
type MockDBClient_SetStateCoreVersion_Call struct {
	*mock.Call
}

// SetStateCoreVersion is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDBClient_Expecter) SetStateCoreVersion(_a0 interface{}) *MockDBClient_SetStateCoreVersion_Call {
	return &MockDBClient_SetStateCoreVersion_Call{Call: _e.mock.On("SetStateCoreVersion", _a0)}
}

func (_c *MockDBClient_SetStateCoreVersion_Call) Run(run func(_a0 string)) *MockDBClient_SetStateCoreVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClient_SetStateCoreVersion_Call) Return(_a0 errors.HedgeError) *MockDBClient_SetStateCoreVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_SetStateCoreVersion_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDBClient_SetStateCoreVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBClient creates a new instance of MockDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClient {
	mock := &MockDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
