// Code generated by mockery v2.33.0. DO NOT EDIT.

package service

import (
	mqtt "github.com/eclipse/paho.mqtt.golang"
	mock "github.com/stretchr/testify/mock"
)

// MockMqttService is an autogenerated mock type for the MqttService type
type MockMqttService struct {
	mock.Mock
}

type MockMqttService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMqttService) EXPECT() *MockMqttService_Expecter {
	return &MockMqttService_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *MockMqttService) Connect() mqtt.Token {
	ret := _m.Called()

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func() mqtt.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockMqttService_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockMqttService_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockMqttService_Expecter) Connect() *MockMqttService_Connect_Call {
	return &MockMqttService_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockMqttService_Connect_Call) Run(run func()) *MockMqttService_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMqttService_Connect_Call) Return(_a0 mqtt.Token) *MockMqttService_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttService_Connect_Call) RunAndReturn(run func() mqtt.Token) *MockMqttService_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: topic, qos, retained, payload
func (_m *MockMqttService) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	ret := _m.Called(topic, qos, retained, payload)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, bool, interface{}) mqtt.Token); ok {
		r0 = rf(topic, qos, retained, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockMqttService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMqttService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - qos byte
//   - retained bool
//   - payload interface{}
func (_e *MockMqttService_Expecter) Publish(topic interface{}, qos interface{}, retained interface{}, payload interface{}) *MockMqttService_Publish_Call {
	return &MockMqttService_Publish_Call{Call: _e.mock.On("Publish", topic, qos, retained, payload)}
}

func (_c *MockMqttService_Publish_Call) Run(run func(topic string, qos byte, retained bool, payload interface{})) *MockMqttService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(byte), args[2].(bool), args[3].(interface{}))
	})
	return _c
}

func (_c *MockMqttService_Publish_Call) Return(_a0 mqtt.Token) *MockMqttService_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttService_Publish_Call) RunAndReturn(run func(string, byte, bool, interface{}) mqtt.Token) *MockMqttService_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, qos, callback
func (_m *MockMqttService) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(topic, qos, callback)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(topic, qos, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// MockMqttService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMqttService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - qos byte
//   - callback mqtt.MessageHandler
func (_e *MockMqttService_Expecter) Subscribe(topic interface{}, qos interface{}, callback interface{}) *MockMqttService_Subscribe_Call {
	return &MockMqttService_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, qos, callback)}
}

func (_c *MockMqttService_Subscribe_Call) Run(run func(topic string, qos byte, callback mqtt.MessageHandler)) *MockMqttService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(byte), args[2].(mqtt.MessageHandler))
	})
	return _c
}

func (_c *MockMqttService_Subscribe_Call) Return(_a0 mqtt.Token) *MockMqttService_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttService_Subscribe_Call) RunAndReturn(run func(string, byte, mqtt.MessageHandler) mqtt.Token) *MockMqttService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMqttService creates a new instance of MockMqttService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMqttService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMqttService {
	mock := &MockMqttService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
