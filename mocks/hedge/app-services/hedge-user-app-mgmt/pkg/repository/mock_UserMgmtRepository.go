// Code generated by mockery v2.38.0. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	dto "hedge/app-services/hedge-user-app-mgmt/pkg/dto"
)

// MockUserMgmtRepository is an autogenerated mock type for the UserMgmtRepository type
type MockUserMgmtRepository struct {
	mock.Mock
}

type MockUserMgmtRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserMgmtRepository) EXPECT() *MockUserMgmtRepository_Expecter {
	return &MockUserMgmtRepository_Expecter{mock: &_m.Mock}
}

// CreateCredential provides a mock function with given fields: username, password
func (_m *MockUserMgmtRepository) CreateCredential(username string, password string) error {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateCredential")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCredential'
type MockUserMgmtRepository_CreateCredential_Call struct {
	*mock.Call
}

// CreateCredential is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockUserMgmtRepository_Expecter) CreateCredential(username interface{}, password interface{}) *MockUserMgmtRepository_CreateCredential_Call {
	return &MockUserMgmtRepository_CreateCredential_Call{Call: _e.mock.On("CreateCredential", username, password)}
}

func (_c *MockUserMgmtRepository_CreateCredential_Call) Run(run func(username string, password string)) *MockUserMgmtRepository_CreateCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateCredential_Call) Return(_a0 error) *MockUserMgmtRepository_CreateCredential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateCredential_Call) RunAndReturn(run func(string, string) error) *MockUserMgmtRepository_CreateCredential_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMenuResources provides a mock function with given fields: newMenuResources
func (_m *MockUserMgmtRepository) CreateMenuResources(newMenuResources *[]dto.Resources) error {
	ret := _m.Called(newMenuResources)

	if len(ret) == 0 {
		panic("no return value specified for CreateMenuResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]dto.Resources) error); ok {
		r0 = rf(newMenuResources)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateMenuResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMenuResources'
type MockUserMgmtRepository_CreateMenuResources_Call struct {
	*mock.Call
}

// CreateMenuResources is a helper method to define mock.On call
//   - newMenuResources *[]dto.Resources
func (_e *MockUserMgmtRepository_Expecter) CreateMenuResources(newMenuResources interface{}) *MockUserMgmtRepository_CreateMenuResources_Call {
	return &MockUserMgmtRepository_CreateMenuResources_Call{Call: _e.mock.On("CreateMenuResources", newMenuResources)}
}

func (_c *MockUserMgmtRepository_CreateMenuResources_Call) Run(run func(newMenuResources *[]dto.Resources)) *MockUserMgmtRepository_CreateMenuResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]dto.Resources))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateMenuResources_Call) Return(_a0 error) *MockUserMgmtRepository_CreateMenuResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateMenuResources_Call) RunAndReturn(run func(*[]dto.Resources) error) *MockUserMgmtRepository_CreateMenuResources_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResource provides a mock function with given fields: newResource
func (_m *MockUserMgmtRepository) CreateResource(newResource dto.Resources) error {
	ret := _m.Called(newResource)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Resources) error); ok {
		r0 = rf(newResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResource'
type MockUserMgmtRepository_CreateResource_Call struct {
	*mock.Call
}

// CreateResource is a helper method to define mock.On call
//   - newResource dto.Resources
func (_e *MockUserMgmtRepository_Expecter) CreateResource(newResource interface{}) *MockUserMgmtRepository_CreateResource_Call {
	return &MockUserMgmtRepository_CreateResource_Call{Call: _e.mock.On("CreateResource", newResource)}
}

func (_c *MockUserMgmtRepository_CreateResource_Call) Run(run func(newResource dto.Resources)) *MockUserMgmtRepository_CreateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Resources))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateResource_Call) Return(_a0 error) *MockUserMgmtRepository_CreateResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateResource_Call) RunAndReturn(run func(dto.Resources) error) *MockUserMgmtRepository_CreateResource_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: newRole
func (_m *MockUserMgmtRepository) CreateRole(newRole *dto.Role) (*dto.Role, error) {
	ret := _m.Called(newRole)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *dto.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.Role) (*dto.Role, error)); ok {
		return rf(newRole)
	}
	if rf, ok := ret.Get(0).(func(*dto.Role) *dto.Role); ok {
		r0 = rf(newRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.Role) error); ok {
		r1 = rf(newRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockUserMgmtRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - newRole *dto.Role
func (_e *MockUserMgmtRepository_Expecter) CreateRole(newRole interface{}) *MockUserMgmtRepository_CreateRole_Call {
	return &MockUserMgmtRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", newRole)}
}

func (_c *MockUserMgmtRepository_CreateRole_Call) Run(run func(newRole *dto.Role)) *MockUserMgmtRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Role))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateRole_Call) Return(_a0 *dto.Role, _a1 error) *MockUserMgmtRepository_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_CreateRole_Call) RunAndReturn(run func(*dto.Role) (*dto.Role, error)) *MockUserMgmtRepository_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleResourcePermission provides a mock function with given fields: roleResourcePermission
func (_m *MockUserMgmtRepository) CreateRoleResourcePermission(roleResourcePermission *dto.RoleResourcePermission) (*dto.RoleResourcePermission, error) {
	ret := _m.Called(roleResourcePermission)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleResourcePermission")
	}

	var r0 *dto.RoleResourcePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.RoleResourcePermission) (*dto.RoleResourcePermission, error)); ok {
		return rf(roleResourcePermission)
	}
	if rf, ok := ret.Get(0).(func(*dto.RoleResourcePermission) *dto.RoleResourcePermission); ok {
		r0 = rf(roleResourcePermission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RoleResourcePermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.RoleResourcePermission) error); ok {
		r1 = rf(roleResourcePermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_CreateRoleResourcePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleResourcePermission'
type MockUserMgmtRepository_CreateRoleResourcePermission_Call struct {
	*mock.Call
}

// CreateRoleResourcePermission is a helper method to define mock.On call
//   - roleResourcePermission *dto.RoleResourcePermission
func (_e *MockUserMgmtRepository_Expecter) CreateRoleResourcePermission(roleResourcePermission interface{}) *MockUserMgmtRepository_CreateRoleResourcePermission_Call {
	return &MockUserMgmtRepository_CreateRoleResourcePermission_Call{Call: _e.mock.On("CreateRoleResourcePermission", roleResourcePermission)}
}

func (_c *MockUserMgmtRepository_CreateRoleResourcePermission_Call) Run(run func(roleResourcePermission *dto.RoleResourcePermission)) *MockUserMgmtRepository_CreateRoleResourcePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.RoleResourcePermission))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateRoleResourcePermission_Call) Return(_a0 *dto.RoleResourcePermission, _a1 error) *MockUserMgmtRepository_CreateRoleResourcePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_CreateRoleResourcePermission_Call) RunAndReturn(run func(*dto.RoleResourcePermission) (*dto.RoleResourcePermission, error)) *MockUserMgmtRepository_CreateRoleResourcePermission_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: newUser
func (_m *MockUserMgmtRepository) CreateUser(newUser dto.User) error {
	ret := _m.Called(newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.User) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserMgmtRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - newUser dto.User
func (_e *MockUserMgmtRepository_Expecter) CreateUser(newUser interface{}) *MockUserMgmtRepository_CreateUser_Call {
	return &MockUserMgmtRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", newUser)}
}

func (_c *MockUserMgmtRepository_CreateUser_Call) Run(run func(newUser dto.User)) *MockUserMgmtRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.User))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateUser_Call) Return(_a0 error) *MockUserMgmtRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateUser_Call) RunAndReturn(run func(dto.User) error) *MockUserMgmtRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserPreference provides a mock function with given fields: newUserPreference
func (_m *MockUserMgmtRepository) CreateUserPreference(newUserPreference dto.UserPreference) error {
	ret := _m.Called(newUserPreference)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UserPreference) error); ok {
		r0 = rf(newUserPreference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateUserPreference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserPreference'
type MockUserMgmtRepository_CreateUserPreference_Call struct {
	*mock.Call
}

// CreateUserPreference is a helper method to define mock.On call
//   - newUserPreference dto.UserPreference
func (_e *MockUserMgmtRepository_Expecter) CreateUserPreference(newUserPreference interface{}) *MockUserMgmtRepository_CreateUserPreference_Call {
	return &MockUserMgmtRepository_CreateUserPreference_Call{Call: _e.mock.On("CreateUserPreference", newUserPreference)}
}

func (_c *MockUserMgmtRepository_CreateUserPreference_Call) Run(run func(newUserPreference dto.UserPreference)) *MockUserMgmtRepository_CreateUserPreference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.UserPreference))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateUserPreference_Call) Return(_a0 error) *MockUserMgmtRepository_CreateUserPreference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateUserPreference_Call) RunAndReturn(run func(dto.UserPreference) error) *MockUserMgmtRepository_CreateUserPreference_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserRole provides a mock function with given fields: userRole
func (_m *MockUserMgmtRepository) CreateUserRole(userRole *dto.UserRole) error {
	ret := _m.Called(userRole)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UserRole) error); ok {
		r0 = rf(userRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_CreateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRole'
type MockUserMgmtRepository_CreateUserRole_Call struct {
	*mock.Call
}

// CreateUserRole is a helper method to define mock.On call
//   - userRole *dto.UserRole
func (_e *MockUserMgmtRepository_Expecter) CreateUserRole(userRole interface{}) *MockUserMgmtRepository_CreateUserRole_Call {
	return &MockUserMgmtRepository_CreateUserRole_Call{Call: _e.mock.On("CreateUserRole", userRole)}
}

func (_c *MockUserMgmtRepository_CreateUserRole_Call) Run(run func(userRole *dto.UserRole)) *MockUserMgmtRepository_CreateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.UserRole))
	})
	return _c
}

func (_c *MockUserMgmtRepository_CreateUserRole_Call) Return(_a0 error) *MockUserMgmtRepository_CreateUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_CreateUserRole_Call) RunAndReturn(run func(*dto.UserRole) error) *MockUserMgmtRepository_CreateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCredential provides a mock function with given fields: username
func (_m *MockUserMgmtRepository) DeleteCredential(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCredential")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCredential'
type MockUserMgmtRepository_DeleteCredential_Call struct {
	*mock.Call
}

// DeleteCredential is a helper method to define mock.On call
//   - username string
func (_e *MockUserMgmtRepository_Expecter) DeleteCredential(username interface{}) *MockUserMgmtRepository_DeleteCredential_Call {
	return &MockUserMgmtRepository_DeleteCredential_Call{Call: _e.mock.On("DeleteCredential", username)}
}

func (_c *MockUserMgmtRepository_DeleteCredential_Call) Run(run func(username string)) *MockUserMgmtRepository_DeleteCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteCredential_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteCredential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteCredential_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteCredential_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMenuResource provides a mock function with given fields: menuName
func (_m *MockUserMgmtRepository) DeleteMenuResource(menuName string) error {
	ret := _m.Called(menuName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMenuResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(menuName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteMenuResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMenuResource'
type MockUserMgmtRepository_DeleteMenuResource_Call struct {
	*mock.Call
}

// DeleteMenuResource is a helper method to define mock.On call
//   - menuName string
func (_e *MockUserMgmtRepository_Expecter) DeleteMenuResource(menuName interface{}) *MockUserMgmtRepository_DeleteMenuResource_Call {
	return &MockUserMgmtRepository_DeleteMenuResource_Call{Call: _e.mock.On("DeleteMenuResource", menuName)}
}

func (_c *MockUserMgmtRepository_DeleteMenuResource_Call) Run(run func(menuName string)) *MockUserMgmtRepository_DeleteMenuResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteMenuResource_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteMenuResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteMenuResource_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteMenuResource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResource provides a mock function with given fields: resourceName
func (_m *MockUserMgmtRepository) DeleteResource(resourceName string) error {
	ret := _m.Called(resourceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(resourceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResource'
type MockUserMgmtRepository_DeleteResource_Call struct {
	*mock.Call
}

// DeleteResource is a helper method to define mock.On call
//   - resourceName string
func (_e *MockUserMgmtRepository_Expecter) DeleteResource(resourceName interface{}) *MockUserMgmtRepository_DeleteResource_Call {
	return &MockUserMgmtRepository_DeleteResource_Call{Call: _e.mock.On("DeleteResource", resourceName)}
}

func (_c *MockUserMgmtRepository_DeleteResource_Call) Run(run func(resourceName string)) *MockUserMgmtRepository_DeleteResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteResource_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteResource_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteResource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: roleName
func (_m *MockUserMgmtRepository) DeleteRole(roleName string) (string, error) {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockUserMgmtRepository_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - roleName string
func (_e *MockUserMgmtRepository_Expecter) DeleteRole(roleName interface{}) *MockUserMgmtRepository_DeleteRole_Call {
	return &MockUserMgmtRepository_DeleteRole_Call{Call: _e.mock.On("DeleteRole", roleName)}
}

func (_c *MockUserMgmtRepository_DeleteRole_Call) Run(run func(roleName string)) *MockUserMgmtRepository_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteRole_Call) Return(_a0 string, _a1 error) *MockUserMgmtRepository_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteRole_Call) RunAndReturn(run func(string) (string, error)) *MockUserMgmtRepository_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleResourcePermission provides a mock function with given fields: roleName
func (_m *MockUserMgmtRepository) DeleteRoleResourcePermission(roleName string) error {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleResourcePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteRoleResourcePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleResourcePermission'
type MockUserMgmtRepository_DeleteRoleResourcePermission_Call struct {
	*mock.Call
}

// DeleteRoleResourcePermission is a helper method to define mock.On call
//   - roleName string
func (_e *MockUserMgmtRepository_Expecter) DeleteRoleResourcePermission(roleName interface{}) *MockUserMgmtRepository_DeleteRoleResourcePermission_Call {
	return &MockUserMgmtRepository_DeleteRoleResourcePermission_Call{Call: _e.mock.On("DeleteRoleResourcePermission", roleName)}
}

func (_c *MockUserMgmtRepository_DeleteRoleResourcePermission_Call) Run(run func(roleName string)) *MockUserMgmtRepository_DeleteRoleResourcePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteRoleResourcePermission_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteRoleResourcePermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteRoleResourcePermission_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteRoleResourcePermission_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) DeleteUser(userName string) error {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserMgmtRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) DeleteUser(userName interface{}) *MockUserMgmtRepository_DeleteUser_Call {
	return &MockUserMgmtRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userName)}
}

func (_c *MockUserMgmtRepository_DeleteUser_Call) Run(run func(userName string)) *MockUserMgmtRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUser_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUser_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPreference provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) DeleteUserPreference(userName string) error {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteUserPreference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPreference'
type MockUserMgmtRepository_DeleteUserPreference_Call struct {
	*mock.Call
}

// DeleteUserPreference is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) DeleteUserPreference(userName interface{}) *MockUserMgmtRepository_DeleteUserPreference_Call {
	return &MockUserMgmtRepository_DeleteUserPreference_Call{Call: _e.mock.On("DeleteUserPreference", userName)}
}

func (_c *MockUserMgmtRepository_DeleteUserPreference_Call) Run(run func(userName string)) *MockUserMgmtRepository_DeleteUserPreference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUserPreference_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteUserPreference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUserPreference_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteUserPreference_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserRoles provides a mock function with given fields: userId
func (_m *MockUserMgmtRepository) DeleteUserRoles(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_DeleteUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRoles'
type MockUserMgmtRepository_DeleteUserRoles_Call struct {
	*mock.Call
}

// DeleteUserRoles is a helper method to define mock.On call
//   - userId string
func (_e *MockUserMgmtRepository_Expecter) DeleteUserRoles(userId interface{}) *MockUserMgmtRepository_DeleteUserRoles_Call {
	return &MockUserMgmtRepository_DeleteUserRoles_Call{Call: _e.mock.On("DeleteUserRoles", userId)}
}

func (_c *MockUserMgmtRepository_DeleteUserRoles_Call) Run(run func(userId string)) *MockUserMgmtRepository_DeleteUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUserRoles_Call) Return(_a0 error) *MockUserMgmtRepository_DeleteUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_DeleteUserRoles_Call) RunAndReturn(run func(string) error) *MockUserMgmtRepository_DeleteUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDashboardResources provides a mock function with given fields:
func (_m *MockUserMgmtRepository) GetAllDashboardResources() ([]map[string]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllDashboardResources")
	}

	var r0 []map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetAllDashboardResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDashboardResources'
type MockUserMgmtRepository_GetAllDashboardResources_Call struct {
	*mock.Call
}

// GetAllDashboardResources is a helper method to define mock.On call
func (_e *MockUserMgmtRepository_Expecter) GetAllDashboardResources() *MockUserMgmtRepository_GetAllDashboardResources_Call {
	return &MockUserMgmtRepository_GetAllDashboardResources_Call{Call: _e.mock.On("GetAllDashboardResources")}
}

func (_c *MockUserMgmtRepository_GetAllDashboardResources_Call) Run(run func()) *MockUserMgmtRepository_GetAllDashboardResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetAllDashboardResources_Call) Return(_a0 []map[string]string, _a1 error) *MockUserMgmtRepository_GetAllDashboardResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetAllDashboardResources_Call) RunAndReturn(run func() ([]map[string]string, error)) *MockUserMgmtRepository_GetAllDashboardResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultUrl provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) GetDefaultUrl(userName string) (*dto.Role, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultUrl")
	}

	var r0 *dto.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.Role, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.Role); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetDefaultUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultUrl'
type MockUserMgmtRepository_GetDefaultUrl_Call struct {
	*mock.Call
}

// GetDefaultUrl is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) GetDefaultUrl(userName interface{}) *MockUserMgmtRepository_GetDefaultUrl_Call {
	return &MockUserMgmtRepository_GetDefaultUrl_Call{Call: _e.mock.On("GetDefaultUrl", userName)}
}

func (_c *MockUserMgmtRepository_GetDefaultUrl_Call) Run(run func(userName string)) *MockUserMgmtRepository_GetDefaultUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetDefaultUrl_Call) Return(_a0 *dto.Role, _a1 error) *MockUserMgmtRepository_GetDefaultUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetDefaultUrl_Call) RunAndReturn(run func(string) (*dto.Role, error)) *MockUserMgmtRepository_GetDefaultUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveUser provides a mock function with given fields: kongUsername
func (_m *MockUserMgmtRepository) GetInactiveUser(kongUsername string) ([]dto.User, error) {
	ret := _m.Called(kongUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveUser")
	}

	var r0 []dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.User, error)); ok {
		return rf(kongUsername)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.User); ok {
		r0 = rf(kongUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(kongUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetInactiveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveUser'
type MockUserMgmtRepository_GetInactiveUser_Call struct {
	*mock.Call
}

// GetInactiveUser is a helper method to define mock.On call
//   - kongUsername string
func (_e *MockUserMgmtRepository_Expecter) GetInactiveUser(kongUsername interface{}) *MockUserMgmtRepository_GetInactiveUser_Call {
	return &MockUserMgmtRepository_GetInactiveUser_Call{Call: _e.mock.On("GetInactiveUser", kongUsername)}
}

func (_c *MockUserMgmtRepository_GetInactiveUser_Call) Run(run func(kongUsername string)) *MockUserMgmtRepository_GetInactiveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetInactiveUser_Call) Return(_a0 []dto.User, _a1 error) *MockUserMgmtRepository_GetInactiveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetInactiveUser_Call) RunAndReturn(run func(string) ([]dto.User, error)) *MockUserMgmtRepository_GetInactiveUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetMenuResource provides a mock function with given fields: menuName
func (_m *MockUserMgmtRepository) GetMenuResource(menuName string) ([]dto.Resources, error) {
	ret := _m.Called(menuName)

	if len(ret) == 0 {
		panic("no return value specified for GetMenuResource")
	}

	var r0 []dto.Resources
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resources, error)); ok {
		return rf(menuName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resources); ok {
		r0 = rf(menuName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resources)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(menuName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetMenuResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMenuResource'
type MockUserMgmtRepository_GetMenuResource_Call struct {
	*mock.Call
}

// GetMenuResource is a helper method to define mock.On call
//   - menuName string
func (_e *MockUserMgmtRepository_Expecter) GetMenuResource(menuName interface{}) *MockUserMgmtRepository_GetMenuResource_Call {
	return &MockUserMgmtRepository_GetMenuResource_Call{Call: _e.mock.On("GetMenuResource", menuName)}
}

func (_c *MockUserMgmtRepository_GetMenuResource_Call) Run(run func(menuName string)) *MockUserMgmtRepository_GetMenuResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetMenuResource_Call) Return(_a0 []dto.Resources, _a1 error) *MockUserMgmtRepository_GetMenuResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetMenuResource_Call) RunAndReturn(run func(string) ([]dto.Resources, error)) *MockUserMgmtRepository_GetMenuResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResource provides a mock function with given fields: resourceName
func (_m *MockUserMgmtRepository) GetResource(resourceName string) (dto.Resources, error) {
	ret := _m.Called(resourceName)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 dto.Resources
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Resources, error)); ok {
		return rf(resourceName)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Resources); ok {
		r0 = rf(resourceName)
	} else {
		r0 = ret.Get(0).(dto.Resources)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResource'
type MockUserMgmtRepository_GetResource_Call struct {
	*mock.Call
}

// GetResource is a helper method to define mock.On call
//   - resourceName string
func (_e *MockUserMgmtRepository_Expecter) GetResource(resourceName interface{}) *MockUserMgmtRepository_GetResource_Call {
	return &MockUserMgmtRepository_GetResource_Call{Call: _e.mock.On("GetResource", resourceName)}
}

func (_c *MockUserMgmtRepository_GetResource_Call) Run(run func(resourceName string)) *MockUserMgmtRepository_GetResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetResource_Call) Return(_a0 dto.Resources, _a1 error) *MockUserMgmtRepository_GetResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetResource_Call) RunAndReturn(run func(string) (dto.Resources, error)) *MockUserMgmtRepository_GetResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesByUser provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) GetResourcesByUser(userName string) ([]dto.Resources, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByUser")
	}

	var r0 []dto.Resources
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resources, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resources); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resources)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetResourcesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesByUser'
type MockUserMgmtRepository_GetResourcesByUser_Call struct {
	*mock.Call
}

// GetResourcesByUser is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) GetResourcesByUser(userName interface{}) *MockUserMgmtRepository_GetResourcesByUser_Call {
	return &MockUserMgmtRepository_GetResourcesByUser_Call{Call: _e.mock.On("GetResourcesByUser", userName)}
}

func (_c *MockUserMgmtRepository_GetResourcesByUser_Call) Run(run func(userName string)) *MockUserMgmtRepository_GetResourcesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetResourcesByUser_Call) Return(_a0 []dto.Resources, _a1 error) *MockUserMgmtRepository_GetResourcesByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetResourcesByUser_Call) RunAndReturn(run func(string) ([]dto.Resources, error)) *MockUserMgmtRepository_GetResourcesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesUrlByUser provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) GetResourcesUrlByUser(userName string) ([]string, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesUrlByUser")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetResourcesUrlByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesUrlByUser'
type MockUserMgmtRepository_GetResourcesUrlByUser_Call struct {
	*mock.Call
}

// GetResourcesUrlByUser is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) GetResourcesUrlByUser(userName interface{}) *MockUserMgmtRepository_GetResourcesUrlByUser_Call {
	return &MockUserMgmtRepository_GetResourcesUrlByUser_Call{Call: _e.mock.On("GetResourcesUrlByUser", userName)}
}

func (_c *MockUserMgmtRepository_GetResourcesUrlByUser_Call) Run(run func(userName string)) *MockUserMgmtRepository_GetResourcesUrlByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetResourcesUrlByUser_Call) Return(_a0 []string, _a1 error) *MockUserMgmtRepository_GetResourcesUrlByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetResourcesUrlByUser_Call) RunAndReturn(run func(string) ([]string, error)) *MockUserMgmtRepository_GetResourcesUrlByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: roleName
func (_m *MockUserMgmtRepository) GetRoles(roleName string) ([]*dto.Role, error) {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []*dto.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*dto.Role, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) []*dto.Role); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockUserMgmtRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - roleName string
func (_e *MockUserMgmtRepository_Expecter) GetRoles(roleName interface{}) *MockUserMgmtRepository_GetRoles_Call {
	return &MockUserMgmtRepository_GetRoles_Call{Call: _e.mock.On("GetRoles", roleName)}
}

func (_c *MockUserMgmtRepository_GetRoles_Call) Run(run func(roleName string)) *MockUserMgmtRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetRoles_Call) Return(_a0 []*dto.Role, _a1 error) *MockUserMgmtRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetRoles_Call) RunAndReturn(run func(string) ([]*dto.Role, error)) *MockUserMgmtRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: kongUsername
func (_m *MockUserMgmtRepository) GetUser(kongUsername string) ([]dto.User, error) {
	ret := _m.Called(kongUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 []dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.User, error)); ok {
		return rf(kongUsername)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.User); ok {
		r0 = rf(kongUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(kongUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserMgmtRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - kongUsername string
func (_e *MockUserMgmtRepository_Expecter) GetUser(kongUsername interface{}) *MockUserMgmtRepository_GetUser_Call {
	return &MockUserMgmtRepository_GetUser_Call{Call: _e.mock.On("GetUser", kongUsername)}
}

func (_c *MockUserMgmtRepository_GetUser_Call) Run(run func(kongUsername string)) *MockUserMgmtRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetUser_Call) Return(_a0 []dto.User, _a1 error) *MockUserMgmtRepository_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetUser_Call) RunAndReturn(run func(string) ([]dto.User, error)) *MockUserMgmtRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserEmail provides a mock function with given fields: email
func (_m *MockUserMgmtRepository) GetUserEmail(email string) ([]dto.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmail")
	}

	var r0 []dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserEmail'
type MockUserMgmtRepository_GetUserEmail_Call struct {
	*mock.Call
}

// GetUserEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserMgmtRepository_Expecter) GetUserEmail(email interface{}) *MockUserMgmtRepository_GetUserEmail_Call {
	return &MockUserMgmtRepository_GetUserEmail_Call{Call: _e.mock.On("GetUserEmail", email)}
}

func (_c *MockUserMgmtRepository_GetUserEmail_Call) Run(run func(email string)) *MockUserMgmtRepository_GetUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetUserEmail_Call) Return(_a0 []dto.User, _a1 error) *MockUserMgmtRepository_GetUserEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetUserEmail_Call) RunAndReturn(run func(string) ([]dto.User, error)) *MockUserMgmtRepository_GetUserEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPreference provides a mock function with given fields: userName
func (_m *MockUserMgmtRepository) GetUserPreference(userName string) ([]dto.UserPreference, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPreference")
	}

	var r0 []dto.UserPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.UserPreference, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.UserPreference); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_GetUserPreference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPreference'
type MockUserMgmtRepository_GetUserPreference_Call struct {
	*mock.Call
}

// GetUserPreference is a helper method to define mock.On call
//   - userName string
func (_e *MockUserMgmtRepository_Expecter) GetUserPreference(userName interface{}) *MockUserMgmtRepository_GetUserPreference_Call {
	return &MockUserMgmtRepository_GetUserPreference_Call{Call: _e.mock.On("GetUserPreference", userName)}
}

func (_c *MockUserMgmtRepository_GetUserPreference_Call) Run(run func(userName string)) *MockUserMgmtRepository_GetUserPreference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserMgmtRepository_GetUserPreference_Call) Return(_a0 []dto.UserPreference, _a1 error) *MockUserMgmtRepository_GetUserPreference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_GetUserPreference_Call) RunAndReturn(run func(string) ([]dto.UserPreference, error)) *MockUserMgmtRepository_GetUserPreference_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeHedgeDB provides a mock function with given fields:
func (_m *MockUserMgmtRepository) InitializeHedgeDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitializeHedgeDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_InitializeHedgeDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeHedgeDB'
type MockUserMgmtRepository_InitializeHedgeDB_Call struct {
	*mock.Call
}

// InitializeHedgeDB is a helper method to define mock.On call
func (_e *MockUserMgmtRepository_Expecter) InitializeHedgeDB() *MockUserMgmtRepository_InitializeHedgeDB_Call {
	return &MockUserMgmtRepository_InitializeHedgeDB_Call{Call: _e.mock.On("InitializeHedgeDB")}
}

func (_c *MockUserMgmtRepository_InitializeHedgeDB_Call) Run(run func()) *MockUserMgmtRepository_InitializeHedgeDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserMgmtRepository_InitializeHedgeDB_Call) Return(_a0 error) *MockUserMgmtRepository_InitializeHedgeDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_InitializeHedgeDB_Call) RunAndReturn(run func() error) *MockUserMgmtRepository_InitializeHedgeDB_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMenuResources provides a mock function with given fields: updatedMenus
func (_m *MockUserMgmtRepository) UpdateMenuResources(updatedMenus *[]dto.Resources) (*[]dto.Resources, error) {
	ret := _m.Called(updatedMenus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMenuResources")
	}

	var r0 *[]dto.Resources
	var r1 error
	if rf, ok := ret.Get(0).(func(*[]dto.Resources) (*[]dto.Resources, error)); ok {
		return rf(updatedMenus)
	}
	if rf, ok := ret.Get(0).(func(*[]dto.Resources) *[]dto.Resources); ok {
		r0 = rf(updatedMenus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.Resources)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]dto.Resources) error); ok {
		r1 = rf(updatedMenus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_UpdateMenuResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMenuResources'
type MockUserMgmtRepository_UpdateMenuResources_Call struct {
	*mock.Call
}

// UpdateMenuResources is a helper method to define mock.On call
//   - updatedMenus *[]dto.Resources
func (_e *MockUserMgmtRepository_Expecter) UpdateMenuResources(updatedMenus interface{}) *MockUserMgmtRepository_UpdateMenuResources_Call {
	return &MockUserMgmtRepository_UpdateMenuResources_Call{Call: _e.mock.On("UpdateMenuResources", updatedMenus)}
}

func (_c *MockUserMgmtRepository_UpdateMenuResources_Call) Run(run func(updatedMenus *[]dto.Resources)) *MockUserMgmtRepository_UpdateMenuResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]dto.Resources))
	})
	return _c
}

func (_c *MockUserMgmtRepository_UpdateMenuResources_Call) Return(_a0 *[]dto.Resources, _a1 error) *MockUserMgmtRepository_UpdateMenuResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_UpdateMenuResources_Call) RunAndReturn(run func(*[]dto.Resources) (*[]dto.Resources, error)) *MockUserMgmtRepository_UpdateMenuResources_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: updatedRole
func (_m *MockUserMgmtRepository) UpdateRole(updatedRole *dto.Role) (*dto.Role, error) {
	ret := _m.Called(updatedRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 *dto.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.Role) (*dto.Role, error)); ok {
		return rf(updatedRole)
	}
	if rf, ok := ret.Get(0).(func(*dto.Role) *dto.Role); ok {
		r0 = rf(updatedRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.Role) error); ok {
		r1 = rf(updatedRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserMgmtRepository_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockUserMgmtRepository_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - updatedRole *dto.Role
func (_e *MockUserMgmtRepository_Expecter) UpdateRole(updatedRole interface{}) *MockUserMgmtRepository_UpdateRole_Call {
	return &MockUserMgmtRepository_UpdateRole_Call{Call: _e.mock.On("UpdateRole", updatedRole)}
}

func (_c *MockUserMgmtRepository_UpdateRole_Call) Run(run func(updatedRole *dto.Role)) *MockUserMgmtRepository_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Role))
	})
	return _c
}

func (_c *MockUserMgmtRepository_UpdateRole_Call) Return(_a0 *dto.Role, _a1 error) *MockUserMgmtRepository_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserMgmtRepository_UpdateRole_Call) RunAndReturn(run func(*dto.Role) (*dto.Role, error)) *MockUserMgmtRepository_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: updatedUser
func (_m *MockUserMgmtRepository) UpdateUser(updatedUser *dto.User) error {
	ret := _m.Called(updatedUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.User) error); ok {
		r0 = rf(updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserMgmtRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - updatedUser *dto.User
func (_e *MockUserMgmtRepository_Expecter) UpdateUser(updatedUser interface{}) *MockUserMgmtRepository_UpdateUser_Call {
	return &MockUserMgmtRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", updatedUser)}
}

func (_c *MockUserMgmtRepository_UpdateUser_Call) Run(run func(updatedUser *dto.User)) *MockUserMgmtRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.User))
	})
	return _c
}

func (_c *MockUserMgmtRepository_UpdateUser_Call) Return(_a0 error) *MockUserMgmtRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_UpdateUser_Call) RunAndReturn(run func(*dto.User) error) *MockUserMgmtRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPreference provides a mock function with given fields: updatedUserPreference
func (_m *MockUserMgmtRepository) UpdateUserPreference(updatedUserPreference *dto.UserPreference) error {
	ret := _m.Called(updatedUserPreference)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UserPreference) error); ok {
		r0 = rf(updatedUserPreference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserMgmtRepository_UpdateUserPreference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPreference'
type MockUserMgmtRepository_UpdateUserPreference_Call struct {
	*mock.Call
}

// UpdateUserPreference is a helper method to define mock.On call
//   - updatedUserPreference *dto.UserPreference
func (_e *MockUserMgmtRepository_Expecter) UpdateUserPreference(updatedUserPreference interface{}) *MockUserMgmtRepository_UpdateUserPreference_Call {
	return &MockUserMgmtRepository_UpdateUserPreference_Call{Call: _e.mock.On("UpdateUserPreference", updatedUserPreference)}
}

func (_c *MockUserMgmtRepository_UpdateUserPreference_Call) Run(run func(updatedUserPreference *dto.UserPreference)) *MockUserMgmtRepository_UpdateUserPreference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.UserPreference))
	})
	return _c
}

func (_c *MockUserMgmtRepository_UpdateUserPreference_Call) Return(_a0 error) *MockUserMgmtRepository_UpdateUserPreference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserMgmtRepository_UpdateUserPreference_Call) RunAndReturn(run func(*dto.UserPreference) error) *MockUserMgmtRepository_UpdateUserPreference_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserMgmtRepository creates a new instance of MockUserMgmtRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserMgmtRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserMgmtRepository {
	mock := &MockUserMgmtRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
