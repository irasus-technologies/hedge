// Code generated by mockery v2.38.0. DO NOT EDIT.

package functions

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
	"hedge/common/dto"
)

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// CommandExecutor provides a mock function with given fields: ctx, command
func (_m *MockExecutor) CommandExecutor(ctx interfaces.AppFunctionContext, command dto.Command) (bool, dto.CommandExecutionLog) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for CommandExecutor")
	}

	var r0 bool
	var r1 dto.CommandExecutionLog
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, dto.Command) (bool, dto.CommandExecutionLog)); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, dto.Command) bool); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, dto.Command) dto.CommandExecutionLog); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Get(1).(dto.CommandExecutionLog)
	}

	return r0, r1
}

// MockExecutor_CommandExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandExecutor'
type MockExecutor_CommandExecutor_Call struct {
	*mock.Call
}

// CommandExecutor is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - command models.Command
func (_e *MockExecutor_Expecter) CommandExecutor(ctx interface{}, command interface{}) *MockExecutor_CommandExecutor_Call {
	return &MockExecutor_CommandExecutor_Call{Call: _e.mock.On("CommandExecutor", ctx, command)}
}

func (_c *MockExecutor_CommandExecutor_Call) Run(run func(ctx interfaces.AppFunctionContext, command dto.Command)) *MockExecutor_CommandExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(dto.Command))
	})
	return _c
}

func (_c *MockExecutor_CommandExecutor_Call) Return(_a0 bool, _a1 dto.CommandExecutionLog) *MockExecutor_CommandExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_CommandExecutor_Call) RunAndReturn(run func(interfaces.AppFunctionContext, dto.Command) (bool, dto.CommandExecutionLog)) *MockExecutor_CommandExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
