// Code generated by mockery v2.38.0. DO NOT EDIT.

package functions

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
	models "hedge/common/dto"
)

// MockDWPCmdExecutorInterface is an autogenerated mock type for the DWPCmdExecutorInterface type
type MockDWPCmdExecutorInterface struct {
	mock.Mock
}

type MockDWPCmdExecutorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDWPCmdExecutorInterface) EXPECT() *MockDWPCmdExecutorInterface_Expecter {
	return &MockDWPCmdExecutorInterface_Expecter{mock: &_m.Mock}
}

// CancelRequest provides a mock function with given fields: ctx, command
func (_m *MockDWPCmdExecutorInterface) CancelRequest(ctx interfaces.AppFunctionContext, command models.Command) (bool, error) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for CancelRequest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, models.Command) (bool, error)); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, models.Command) bool); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, models.Command) error); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDWPCmdExecutorInterface_CancelRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRequest'
type MockDWPCmdExecutorInterface_CancelRequest_Call struct {
	*mock.Call
}

// CancelRequest is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - command models.Command
func (_e *MockDWPCmdExecutorInterface_Expecter) CancelRequest(ctx interface{}, command interface{}) *MockDWPCmdExecutorInterface_CancelRequest_Call {
	return &MockDWPCmdExecutorInterface_CancelRequest_Call{Call: _e.mock.On("CancelRequest", ctx, command)}
}

func (_c *MockDWPCmdExecutorInterface_CancelRequest_Call) Run(run func(ctx interfaces.AppFunctionContext, command models.Command)) *MockDWPCmdExecutorInterface_CancelRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(models.Command))
	})
	return _c
}

func (_c *MockDWPCmdExecutorInterface_CancelRequest_Call) Return(_a0 bool, _a1 error) *MockDWPCmdExecutorInterface_CancelRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDWPCmdExecutorInterface_CancelRequest_Call) RunAndReturn(run func(interfaces.AppFunctionContext, models.Command) (bool, error)) *MockDWPCmdExecutorInterface_CancelRequest_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, command
func (_m *MockDWPCmdExecutorInterface) Execute(ctx interfaces.AppFunctionContext, command models.Command) (bool, interface{}) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, models.Command) (bool, interface{})); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, models.Command) bool); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, models.Command) interface{}); ok {
		r1 = rf(ctx, command)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockDWPCmdExecutorInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDWPCmdExecutorInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - command models.Command
func (_e *MockDWPCmdExecutorInterface_Expecter) Execute(ctx interface{}, command interface{}) *MockDWPCmdExecutorInterface_Execute_Call {
	return &MockDWPCmdExecutorInterface_Execute_Call{Call: _e.mock.On("Execute", ctx, command)}
}

func (_c *MockDWPCmdExecutorInterface_Execute_Call) Run(run func(ctx interfaces.AppFunctionContext, command models.Command)) *MockDWPCmdExecutorInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(models.Command))
	})
	return _c
}

func (_c *MockDWPCmdExecutorInterface_Execute_Call) Return(_a0 bool, _a1 interface{}) *MockDWPCmdExecutorInterface_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDWPCmdExecutorInterface_Execute_Call) RunAndReturn(run func(interfaces.AppFunctionContext, models.Command) (bool, interface{})) *MockDWPCmdExecutorInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCookie provides a mock function with given fields: ctx, command
func (_m *MockDWPCmdExecutorInterface) UpdateCookie(ctx interfaces.AppFunctionContext, command models.Command) error {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, models.Command) error); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDWPCmdExecutorInterface_UpdateCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCookie'
type MockDWPCmdExecutorInterface_UpdateCookie_Call struct {
	*mock.Call
}

// UpdateCookie is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - command models.Command
func (_e *MockDWPCmdExecutorInterface_Expecter) UpdateCookie(ctx interface{}, command interface{}) *MockDWPCmdExecutorInterface_UpdateCookie_Call {
	return &MockDWPCmdExecutorInterface_UpdateCookie_Call{Call: _e.mock.On("UpdateCookie", ctx, command)}
}

func (_c *MockDWPCmdExecutorInterface_UpdateCookie_Call) Run(run func(ctx interfaces.AppFunctionContext, command models.Command)) *MockDWPCmdExecutorInterface_UpdateCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(models.Command))
	})
	return _c
}

func (_c *MockDWPCmdExecutorInterface_UpdateCookie_Call) Return(_a0 error) *MockDWPCmdExecutorInterface_UpdateCookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDWPCmdExecutorInterface_UpdateCookie_Call) RunAndReturn(run func(interfaces.AppFunctionContext, models.Command) error) *MockDWPCmdExecutorInterface_UpdateCookie_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDWPCmdExecutorInterface creates a new instance of MockDWPCmdExecutorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDWPCmdExecutorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDWPCmdExecutorInterface {
	mock := &MockDWPCmdExecutorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
