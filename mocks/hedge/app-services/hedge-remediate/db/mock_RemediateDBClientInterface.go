// Code generated by mockery v2.38.0. DO NOT EDIT.

package redis

import (
	db "hedge/common/db"
	models "hedge/common/dto"
	errors "hedge/common/errors"

	logger "github.com/edgexfoundry/go-mod-core-contracts/v3/clients/logger"

	mock "github.com/stretchr/testify/mock"

	redis "hedge/app-services/hedge-remediate/db"

	redsync "github.com/go-redsync/redsync/v4"
)

// MockRemediateDBClientInterface is an autogenerated mock type for the RemediateDBClientInterface type
type MockRemediateDBClientInterface struct {
	mock.Mock
}

type MockRemediateDBClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemediateDBClientInterface) EXPECT() *MockRemediateDBClientInterface_Expecter {
	return &MockRemediateDBClientInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function with given fields: lockName
func (_m *MockRemediateDBClientInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _m.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return rf(lockName)
	}
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockRemediateDBClientInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockRemediateDBClientInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName string
func (_e *MockRemediateDBClientInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockRemediateDBClientInterface_AcquireRedisLock_Call {
	return &MockRemediateDBClientInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockRemediateDBClientInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockRemediateDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_AcquireRedisLock_Call) Return(_a0 *redsync.Mutex, _a1 errors.HedgeError) *MockRemediateDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemediateDBClientInterface_AcquireRedisLock_Call) RunAndReturn(run func(string) (*redsync.Mutex, errors.HedgeError)) *MockRemediateDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRemediateEvent provides a mock function with given fields: correlationId
func (_m *MockRemediateDBClientInterface) DeleteRemediateEvent(correlationId string) error {
	ret := _m.Called(correlationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRemediateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(correlationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemediateDBClientInterface_DeleteRemediateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRemediateEvent'
type MockRemediateDBClientInterface_DeleteRemediateEvent_Call struct {
	*mock.Call
}

// DeleteRemediateEvent is a helper method to define mock.On call
//   - correlationId string
func (_e *MockRemediateDBClientInterface_Expecter) DeleteRemediateEvent(correlationId interface{}) *MockRemediateDBClientInterface_DeleteRemediateEvent_Call {
	return &MockRemediateDBClientInterface_DeleteRemediateEvent_Call{Call: _e.mock.On("DeleteRemediateEvent", correlationId)}
}

func (_c *MockRemediateDBClientInterface_DeleteRemediateEvent_Call) Run(run func(correlationId string)) *MockRemediateDBClientInterface_DeleteRemediateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_DeleteRemediateEvent_Call) Return(_a0 error) *MockRemediateDBClientInterface_DeleteRemediateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemediateDBClientInterface_DeleteRemediateEvent_Call) RunAndReturn(run func(string) error) *MockRemediateDBClientInterface_DeleteRemediateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields: dbConfig
func (_m *MockRemediateDBClientInterface) GetDbClient(dbConfig *db.DatabaseConfig) redis.RemediateDBClientInterface {
	ret := _m.Called(dbConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.RemediateDBClientInterface
	if rf, ok := ret.Get(0).(func(*db.DatabaseConfig) redis.RemediateDBClientInterface); ok {
		r0 = rf(dbConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.RemediateDBClientInterface)
		}
	}

	return r0
}

// MockRemediateDBClientInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockRemediateDBClientInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig *db.DatabaseConfig
func (_e *MockRemediateDBClientInterface_Expecter) GetDbClient(dbConfig interface{}) *MockRemediateDBClientInterface_GetDbClient_Call {
	return &MockRemediateDBClientInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig)}
}

func (_c *MockRemediateDBClientInterface_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig)) *MockRemediateDBClientInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_GetDbClient_Call) Return(_a0 redis.RemediateDBClientInterface) *MockRemediateDBClientInterface_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemediateDBClientInterface_GetDbClient_Call) RunAndReturn(run func(*db.DatabaseConfig) redis.RemediateDBClientInterface) *MockRemediateDBClientInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function with given fields: key
func (_m *MockRemediateDBClientInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockRemediateDBClientInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockRemediateDBClientInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key string
func (_e *MockRemediateDBClientInterface_Expecter) GetMetricCounter(key interface{}) *MockRemediateDBClientInterface_GetMetricCounter_Call {
	return &MockRemediateDBClientInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockRemediateDBClientInterface_GetMetricCounter_Call) Run(run func(key string)) *MockRemediateDBClientInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_GetMetricCounter_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockRemediateDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemediateDBClientInterface_GetMetricCounter_Call) RunAndReturn(run func(string) (int64, errors.HedgeError)) *MockRemediateDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemediateEventByCorrelationId provides a mock function with given fields: correlationId, lc
func (_m *MockRemediateDBClientInterface) GetRemediateEventByCorrelationId(correlationId string, lc logger.LoggingClient) (*models.HedgeEvent, error) {
	ret := _m.Called(correlationId, lc)

	if len(ret) == 0 {
		panic("no return value specified for GetRemediateEventByCorrelationId")
	}

	var r0 *models.HedgeEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, logger.LoggingClient) (*models.HedgeEvent, error)); ok {
		return rf(correlationId, lc)
	}
	if rf, ok := ret.Get(0).(func(string, logger.LoggingClient) *models.HedgeEvent); ok {
		r0 = rf(correlationId, lc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HedgeEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, logger.LoggingClient) error); ok {
		r1 = rf(correlationId, lc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemediateEventByCorrelationId'
type MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call struct {
	*mock.Call
}

// GetRemediateEventByCorrelationId is a helper method to define mock.On call
//   - correlationId string
//   - lc logger.LoggingClient
func (_e *MockRemediateDBClientInterface_Expecter) GetRemediateEventByCorrelationId(correlationId interface{}, lc interface{}) *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call {
	return &MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call{Call: _e.mock.On("GetRemediateEventByCorrelationId", correlationId, lc)}
}

func (_c *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call) Run(run func(correlationId string, lc logger.LoggingClient)) *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(logger.LoggingClient))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call) Return(_a0 *models.HedgeEvent, _a1 error) *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call) RunAndReturn(run func(string, logger.LoggingClient) (*models.HedgeEvent, error)) *MockRemediateDBClientInterface_GetRemediateEventByCorrelationId_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function with given fields: key, value
func (_m *MockRemediateDBClientInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = rf(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockRemediateDBClientInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockRemediateDBClientInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockRemediateDBClientInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockRemediateDBClientInterface_IncrMetricCounterBy_Call {
	return &MockRemediateDBClientInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockRemediateDBClientInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockRemediateDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_IncrMetricCounterBy_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockRemediateDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemediateDBClientInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(string, int64) (int64, errors.HedgeError)) *MockRemediateDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRemediateEvent provides a mock function with given fields: event
func (_m *MockRemediateDBClientInterface) SaveRemediateEvent(event models.HedgeEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SaveRemediateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.HedgeEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemediateDBClientInterface_SaveRemediateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRemediateEvent'
type MockRemediateDBClientInterface_SaveRemediateEvent_Call struct {
	*mock.Call
}

// SaveRemediateEvent is a helper method to define mock.On call
//   - event models.HedgeEvent
func (_e *MockRemediateDBClientInterface_Expecter) SaveRemediateEvent(event interface{}) *MockRemediateDBClientInterface_SaveRemediateEvent_Call {
	return &MockRemediateDBClientInterface_SaveRemediateEvent_Call{Call: _e.mock.On("SaveRemediateEvent", event)}
}

func (_c *MockRemediateDBClientInterface_SaveRemediateEvent_Call) Run(run func(event models.HedgeEvent)) *MockRemediateDBClientInterface_SaveRemediateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.HedgeEvent))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_SaveRemediateEvent_Call) Return(_a0 error) *MockRemediateDBClientInterface_SaveRemediateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemediateDBClientInterface_SaveRemediateEvent_Call) RunAndReturn(run func(models.HedgeEvent) error) *MockRemediateDBClientInterface_SaveRemediateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function with given fields: key, value
func (_m *MockRemediateDBClientInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockRemediateDBClientInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockRemediateDBClientInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockRemediateDBClientInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockRemediateDBClientInterface_SetMetricCounter_Call {
	return &MockRemediateDBClientInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockRemediateDBClientInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockRemediateDBClientInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockRemediateDBClientInterface_SetMetricCounter_Call) Return(_a0 errors.HedgeError) *MockRemediateDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemediateDBClientInterface_SetMetricCounter_Call) RunAndReturn(run func(string, int64) errors.HedgeError) *MockRemediateDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemediateDBClientInterface creates a new instance of MockRemediateDBClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemediateDBClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemediateDBClientInterface {
	mock := &MockRemediateDBClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
