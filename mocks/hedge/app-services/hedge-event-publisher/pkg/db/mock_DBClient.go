// Code generated by mockery v2.53.2. DO NOT EDIT.

package redis

import (
	logger "github.com/edgexfoundry/go-mod-core-contracts/v3/clients/logger"
	mock "github.com/stretchr/testify/mock"
	db "hedge/common/db"
	models "hedge/common/dto"

	redis "hedge/app-services/hedge-event-publisher/pkg/db"
)

// MockDBClient is an autogenerated mock type for the DBClient type
type MockDBClient struct {
	mock.Mock
}

type MockDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClient) EXPECT() *MockDBClient_Expecter {
	return &MockDBClient_Expecter{mock: &_m.Mock}
}

// DeleteEvent provides a mock function with given fields: correlationId
func (_m *MockDBClient) DeleteEvent(correlationId string) error {
	ret := _m.Called(correlationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(correlationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDBClient_DeleteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEvent'
type MockDBClient_DeleteEvent_Call struct {
	*mock.Call
}

// DeleteEvent is a helper method to define mock.On call
//   - correlationId string
func (_e *MockDBClient_Expecter) DeleteEvent(correlationId interface{}) *MockDBClient_DeleteEvent_Call {
	return &MockDBClient_DeleteEvent_Call{Call: _e.mock.On("DeleteEvent", correlationId)}
}

func (_c *MockDBClient_DeleteEvent_Call) Run(run func(correlationId string)) *MockDBClient_DeleteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClient_DeleteEvent_Call) Return(_a0 error) *MockDBClient_DeleteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_DeleteEvent_Call) RunAndReturn(run func(string) error) *MockDBClient_DeleteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields: dbConfig
func (_m *MockDBClient) GetDbClient(dbConfig *db.DatabaseConfig) redis.DBClient {
	ret := _m.Called(dbConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.DBClient
	if rf, ok := ret.Get(0).(func(*db.DatabaseConfig) redis.DBClient); ok {
		r0 = rf(dbConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.DBClient)
		}
	}

	return r0
}

// MockDBClient_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockDBClient_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig *db.DatabaseConfig
func (_e *MockDBClient_Expecter) GetDbClient(dbConfig interface{}) *MockDBClient_GetDbClient_Call {
	return &MockDBClient_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig)}
}

func (_c *MockDBClient_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig)) *MockDBClient_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig))
	})
	return _c
}

func (_c *MockDBClient_GetDbClient_Call) Return(_a0 redis.DBClient) *MockDBClient_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_GetDbClient_Call) RunAndReturn(run func(*db.DatabaseConfig) redis.DBClient) *MockDBClient_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventByCorrelationId provides a mock function with given fields: correlationId, lc
func (_m *MockDBClient) GetEventByCorrelationId(correlationId string, lc logger.LoggingClient) (*models.HedgeEvent, error) {
	ret := _m.Called(correlationId, lc)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByCorrelationId")
	}

	var r0 *models.HedgeEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, logger.LoggingClient) (*models.HedgeEvent, error)); ok {
		return rf(correlationId, lc)
	}
	if rf, ok := ret.Get(0).(func(string, logger.LoggingClient) *models.HedgeEvent); ok {
		r0 = rf(correlationId, lc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HedgeEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, logger.LoggingClient) error); ok {
		r1 = rf(correlationId, lc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBClient_GetEventByCorrelationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventByCorrelationId'
type MockDBClient_GetEventByCorrelationId_Call struct {
	*mock.Call
}

// GetEventByCorrelationId is a helper method to define mock.On call
//   - correlationId string
//   - lc logger.LoggingClient
func (_e *MockDBClient_Expecter) GetEventByCorrelationId(correlationId interface{}, lc interface{}) *MockDBClient_GetEventByCorrelationId_Call {
	return &MockDBClient_GetEventByCorrelationId_Call{Call: _e.mock.On("GetEventByCorrelationId", correlationId, lc)}
}

func (_c *MockDBClient_GetEventByCorrelationId_Call) Run(run func(correlationId string, lc logger.LoggingClient)) *MockDBClient_GetEventByCorrelationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(logger.LoggingClient))
	})
	return _c
}

func (_c *MockDBClient_GetEventByCorrelationId_Call) Return(_a0 *models.HedgeEvent, _a1 error) *MockDBClient_GetEventByCorrelationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClient_GetEventByCorrelationId_Call) RunAndReturn(run func(string, logger.LoggingClient) (*models.HedgeEvent, error)) *MockDBClient_GetEventByCorrelationId_Call {
	_c.Call.Return(run)
	return _c
}

// SaveEvent provides a mock function with given fields: event
func (_m *MockDBClient) SaveEvent(event models.HedgeEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.HedgeEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDBClient_SaveEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEvent'
type MockDBClient_SaveEvent_Call struct {
	*mock.Call
}

// SaveEvent is a helper method to define mock.On call
//   - event models.HedgeEvent
func (_e *MockDBClient_Expecter) SaveEvent(event interface{}) *MockDBClient_SaveEvent_Call {
	return &MockDBClient_SaveEvent_Call{Call: _e.mock.On("SaveEvent", event)}
}

func (_c *MockDBClient_SaveEvent_Call) Run(run func(event models.HedgeEvent)) *MockDBClient_SaveEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.HedgeEvent))
	})
	return _c
}

func (_c *MockDBClient_SaveEvent_Call) Return(_a0 error) *MockDBClient_SaveEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClient_SaveEvent_Call) RunAndReturn(run func(models.HedgeEvent) error) *MockDBClient_SaveEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBClient creates a new instance of MockDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClient {
	mock := &MockDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
