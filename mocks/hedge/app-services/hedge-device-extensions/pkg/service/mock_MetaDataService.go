// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	dtos "github.com/edgexfoundry/go-mod-core-contracts/v3/dtos"
	dto "hedge/common/dto"
	errors "hedge/common/errors"

	mock "github.com/stretchr/testify/mock"

	redis "hedge/app-services/hedge-device-extensions/pkg/db/redis"
)

// MockMetaDataService is an autogenerated mock type for the MetaDataService type
type MockMetaDataService struct {
	mock.Mock
}

type MockMetaDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetaDataService) EXPECT() *MockMetaDataService_Expecter {
	return &MockMetaDataService_Expecter{mock: &_m.Mock}
}

// AddAssociation provides a mock function with given fields: nodeA, nodeAType, associationNodes
func (_m *MockMetaDataService) AddAssociation(nodeA string, nodeAType string, associationNodes []dto.AssociationNode) (string, errors.HedgeError) {
	ret := _m.Called(nodeA, nodeAType, associationNodes)

	if len(ret) == 0 {
		panic("no return value specified for AddAssociation")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) (string, errors.HedgeError)); ok {
		return rf(nodeA, nodeAType, associationNodes)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) string); ok {
		r0 = rf(nodeA, nodeAType, associationNodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.AssociationNode) errors.HedgeError); ok {
		r1 = rf(nodeA, nodeAType, associationNodes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_AddAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAssociation'
type MockMetaDataService_AddAssociation_Call struct {
	*mock.Call
}

// AddAssociation is a helper method to define mock.On call
//   - nodeA string
//   - nodeAType string
//   - associationNodes []dto.AssociationNode
func (_e *MockMetaDataService_Expecter) AddAssociation(nodeA interface{}, nodeAType interface{}, associationNodes interface{}) *MockMetaDataService_AddAssociation_Call {
	return &MockMetaDataService_AddAssociation_Call{Call: _e.mock.On("AddAssociation", nodeA, nodeAType, associationNodes)}
}

func (_c *MockMetaDataService_AddAssociation_Call) Run(run func(nodeA string, nodeAType string, associationNodes []dto.AssociationNode)) *MockMetaDataService_AddAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.AssociationNode))
	})
	return _c
}

func (_c *MockMetaDataService_AddAssociation_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_AddAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_AddAssociation_Call) RunAndReturn(run func(string, string, []dto.AssociationNode) (string, errors.HedgeError)) *MockMetaDataService_AddAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// AddDeviceExtension provides a mock function with given fields: deviceName, deviceExts
func (_m *MockMetaDataService) AddDeviceExtension(deviceName string, deviceExts []dto.DeviceExt) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, deviceExts)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceExtension")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExt) (string, errors.HedgeError)); ok {
		return rf(deviceName, deviceExts)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExt) string); ok {
		r0 = rf(deviceName, deviceExts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExt) errors.HedgeError); ok {
		r1 = rf(deviceName, deviceExts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_AddDeviceExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeviceExtension'
type MockMetaDataService_AddDeviceExtension_Call struct {
	*mock.Call
}

// AddDeviceExtension is a helper method to define mock.On call
//   - deviceName string
//   - deviceExts []dto.DeviceExt
func (_e *MockMetaDataService_Expecter) AddDeviceExtension(deviceName interface{}, deviceExts interface{}) *MockMetaDataService_AddDeviceExtension_Call {
	return &MockMetaDataService_AddDeviceExtension_Call{Call: _e.mock.On("AddDeviceExtension", deviceName, deviceExts)}
}

func (_c *MockMetaDataService_AddDeviceExtension_Call) Run(run func(deviceName string, deviceExts []dto.DeviceExt)) *MockMetaDataService_AddDeviceExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExt))
	})
	return _c
}

func (_c *MockMetaDataService_AddDeviceExtension_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_AddDeviceExtension_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_AddDeviceExtension_Call) RunAndReturn(run func(string, []dto.DeviceExt) (string, errors.HedgeError)) *MockMetaDataService_AddDeviceExtension_Call {
	_c.Call.Return(run)
	return _c
}

// AddDeviceExtensionsInProfile provides a mock function with given fields: profileName, deviceExtns
func (_m *MockMetaDataService) AddDeviceExtensionsInProfile(profileName string, deviceExtns []dto.DeviceExtension) (string, errors.HedgeError) {
	ret := _m.Called(profileName, deviceExtns)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceExtensionsInProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) (string, errors.HedgeError)); ok {
		return rf(profileName, deviceExtns)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) string); ok {
		r0 = rf(profileName, deviceExtns)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExtension) errors.HedgeError); ok {
		r1 = rf(profileName, deviceExtns)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_AddDeviceExtensionsInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeviceExtensionsInProfile'
type MockMetaDataService_AddDeviceExtensionsInProfile_Call struct {
	*mock.Call
}

// AddDeviceExtensionsInProfile is a helper method to define mock.On call
//   - profileName string
//   - deviceExtns []dto.DeviceExtension
func (_e *MockMetaDataService_Expecter) AddDeviceExtensionsInProfile(profileName interface{}, deviceExtns interface{}) *MockMetaDataService_AddDeviceExtensionsInProfile_Call {
	return &MockMetaDataService_AddDeviceExtensionsInProfile_Call{Call: _e.mock.On("AddDeviceExtensionsInProfile", profileName, deviceExtns)}
}

func (_c *MockMetaDataService_AddDeviceExtensionsInProfile_Call) Run(run func(profileName string, deviceExtns []dto.DeviceExtension)) *MockMetaDataService_AddDeviceExtensionsInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExtension))
	})
	return _c
}

func (_c *MockMetaDataService_AddDeviceExtensionsInProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_AddDeviceExtensionsInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_AddDeviceExtensionsInProfile_Call) RunAndReturn(run func(string, []dto.DeviceExtension) (string, errors.HedgeError)) *MockMetaDataService_AddDeviceExtensionsInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// AddLocation provides a mock function with given fields: location
func (_m *MockMetaDataService) AddLocation(location dto.Location) (map[string]string, errors.HedgeError) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for AddLocation")
	}

	var r0 map[string]string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Location) (map[string]string, errors.HedgeError)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(dto.Location) map[string]string); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.Location) errors.HedgeError); ok {
		r1 = rf(location)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_AddLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLocation'
type MockMetaDataService_AddLocation_Call struct {
	*mock.Call
}

// AddLocation is a helper method to define mock.On call
//   - location models.Location
func (_e *MockMetaDataService_Expecter) AddLocation(location interface{}) *MockMetaDataService_AddLocation_Call {
	return &MockMetaDataService_AddLocation_Call{Call: _e.mock.On("AddLocation", location)}
}

func (_c *MockMetaDataService_AddLocation_Call) Run(run func(location dto.Location)) *MockMetaDataService_AddLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Location))
	})
	return _c
}

func (_c *MockMetaDataService_AddLocation_Call) Return(locationMap map[string]string, err errors.HedgeError) *MockMetaDataService_AddLocation_Call {
	_c.Call.Return(locationMap, err)
	return _c
}

func (_c *MockMetaDataService_AddLocation_Call) RunAndReturn(run func(dto.Location) (map[string]string, errors.HedgeError)) *MockMetaDataService_AddLocation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCompleteDevice provides a mock function with given fields: deviceName, deviceObject
func (_m *MockMetaDataService) CreateCompleteDevice(deviceName string, deviceObject dto.DeviceObject) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, deviceObject)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompleteDevice")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, dto.DeviceObject) (string, errors.HedgeError)); ok {
		return rf(deviceName, deviceObject)
	}
	if rf, ok := ret.Get(0).(func(string, dto.DeviceObject) string); ok {
		r0 = rf(deviceName, deviceObject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, dto.DeviceObject) errors.HedgeError); ok {
		r1 = rf(deviceName, deviceObject)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_CreateCompleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompleteDevice'
type MockMetaDataService_CreateCompleteDevice_Call struct {
	*mock.Call
}

// CreateCompleteDevice is a helper method to define mock.On call
//   - deviceName string
//   - deviceObject dto.DeviceObject
func (_e *MockMetaDataService_Expecter) CreateCompleteDevice(deviceName interface{}, deviceObject interface{}) *MockMetaDataService_CreateCompleteDevice_Call {
	return &MockMetaDataService_CreateCompleteDevice_Call{Call: _e.mock.On("CreateCompleteDevice", deviceName, deviceObject)}
}

func (_c *MockMetaDataService_CreateCompleteDevice_Call) Run(run func(deviceName string, deviceObject dto.DeviceObject)) *MockMetaDataService_CreateCompleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.DeviceObject))
	})
	return _c
}

func (_c *MockMetaDataService_CreateCompleteDevice_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_CreateCompleteDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_CreateCompleteDevice_Call) RunAndReturn(run func(string, dto.DeviceObject) (string, errors.HedgeError)) *MockMetaDataService_CreateCompleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCompleteProfile provides a mock function with given fields: profileName, profileObject
func (_m *MockMetaDataService) CreateCompleteProfile(profileName string, profileObject dto.ProfileObject) (string, errors.HedgeError) {
	ret := _m.Called(profileName, profileObject)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompleteProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, dto.ProfileObject) (string, errors.HedgeError)); ok {
		return rf(profileName, profileObject)
	}
	if rf, ok := ret.Get(0).(func(string, dto.ProfileObject) string); ok {
		r0 = rf(profileName, profileObject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, dto.ProfileObject) errors.HedgeError); ok {
		r1 = rf(profileName, profileObject)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_CreateCompleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompleteProfile'
type MockMetaDataService_CreateCompleteProfile_Call struct {
	*mock.Call
}

// CreateCompleteProfile is a helper method to define mock.On call
//   - profileName string
//   - profileObject dto.ProfileObject
func (_e *MockMetaDataService_Expecter) CreateCompleteProfile(profileName interface{}, profileObject interface{}) *MockMetaDataService_CreateCompleteProfile_Call {
	return &MockMetaDataService_CreateCompleteProfile_Call{Call: _e.mock.On("CreateCompleteProfile", profileName, profileObject)}
}

func (_c *MockMetaDataService_CreateCompleteProfile_Call) Run(run func(profileName string, profileObject dto.ProfileObject)) *MockMetaDataService_CreateCompleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.ProfileObject))
	})
	return _c
}

func (_c *MockMetaDataService_CreateCompleteProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_CreateCompleteProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_CreateCompleteProfile_Call) RunAndReturn(run func(string, dto.ProfileObject) (string, errors.HedgeError)) *MockMetaDataService_CreateCompleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllDeviceExtension provides a mock function with given fields: deviceName
func (_m *MockMetaDataService) DeleteAllDeviceExtension(deviceName string) errors.HedgeError {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllDeviceExtension")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteAllDeviceExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllDeviceExtension'
type MockMetaDataService_DeleteAllDeviceExtension_Call struct {
	*mock.Call
}

// DeleteAllDeviceExtension is a helper method to define mock.On call
//   - deviceName string
func (_e *MockMetaDataService_Expecter) DeleteAllDeviceExtension(deviceName interface{}) *MockMetaDataService_DeleteAllDeviceExtension_Call {
	return &MockMetaDataService_DeleteAllDeviceExtension_Call{Call: _e.mock.On("DeleteAllDeviceExtension", deviceName)}
}

func (_c *MockMetaDataService_DeleteAllDeviceExtension_Call) Run(run func(deviceName string)) *MockMetaDataService_DeleteAllDeviceExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteAllDeviceExtension_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteAllDeviceExtension_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteAllDeviceExtension_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteAllDeviceExtension_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAssociation provides a mock function with given fields: nodeA, nodeAType
func (_m *MockMetaDataService) DeleteAssociation(nodeA string, nodeAType string) errors.HedgeError {
	ret := _m.Called(nodeA, nodeAType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssociation")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(nodeA, nodeAType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAssociation'
type MockMetaDataService_DeleteAssociation_Call struct {
	*mock.Call
}

// DeleteAssociation is a helper method to define mock.On call
//   - nodeA string
//   - nodeAType string
func (_e *MockMetaDataService_Expecter) DeleteAssociation(nodeA interface{}, nodeAType interface{}) *MockMetaDataService_DeleteAssociation_Call {
	return &MockMetaDataService_DeleteAssociation_Call{Call: _e.mock.On("DeleteAssociation", nodeA, nodeAType)}
}

func (_c *MockMetaDataService_DeleteAssociation_Call) Run(run func(nodeA string, nodeAType string)) *MockMetaDataService_DeleteAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteAssociation_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteAssociation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteAssociation_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockMetaDataService_DeleteAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCompleteDevice provides a mock function with given fields: deviceName, nodeId
func (_m *MockMetaDataService) DeleteCompleteDevice(deviceName string) errors.HedgeError {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompleteDevice")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteCompleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCompleteDevice'
type MockMetaDataService_DeleteCompleteDevice_Call struct {
	*mock.Call
}

// DeleteCompleteDevice is a helper method to define mock.On call
//   - deviceName string
//   - nodeId string
func (_e *MockMetaDataService_Expecter) DeleteCompleteDevice(deviceName interface{}, nodeId interface{}) *MockMetaDataService_DeleteCompleteDevice_Call {
	return &MockMetaDataService_DeleteCompleteDevice_Call{Call: _e.mock.On("DeleteCompleteDevice", deviceName, nodeId)}
}

func (_c *MockMetaDataService_DeleteCompleteDevice_Call) Run(run func(deviceName string, nodeId string)) *MockMetaDataService_DeleteCompleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteCompleteDevice_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteCompleteDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteCompleteDevice_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockMetaDataService_DeleteCompleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCompleteProfile provides a mock function with given fields: profileName
func (_m *MockMetaDataService) DeleteCompleteProfile(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompleteProfile")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteCompleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCompleteProfile'
type MockMetaDataService_DeleteCompleteProfile_Call struct {
	*mock.Call
}

// DeleteCompleteProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) DeleteCompleteProfile(profileName interface{}) *MockMetaDataService_DeleteCompleteProfile_Call {
	return &MockMetaDataService_DeleteCompleteProfile_Call{Call: _e.mock.On("DeleteCompleteProfile", profileName)}
}

func (_c *MockMetaDataService_DeleteCompleteProfile_Call) Run(run func(profileName string)) *MockMetaDataService_DeleteCompleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteCompleteProfile_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteCompleteProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteCompleteProfile_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteCompleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceContextualAttributes provides a mock function with given fields: deviceName
func (_m *MockMetaDataService) DeleteDeviceContextualAttributes(deviceName string) errors.HedgeError {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceContextualAttributes'
type MockMetaDataService_DeleteDeviceContextualAttributes_Call struct {
	*mock.Call
}

// DeleteDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
func (_e *MockMetaDataService_Expecter) DeleteDeviceContextualAttributes(deviceName interface{}) *MockMetaDataService_DeleteDeviceContextualAttributes_Call {
	return &MockMetaDataService_DeleteDeviceContextualAttributes_Call{Call: _e.mock.On("DeleteDeviceContextualAttributes", deviceName)}
}

func (_c *MockMetaDataService_DeleteDeviceContextualAttributes_Call) Run(run func(deviceName string)) *MockMetaDataService_DeleteDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteDeviceContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceContextualAttributes_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceExtension provides a mock function with given fields: deviceName, attToDelete
func (_m *MockMetaDataService) DeleteDeviceExtension(deviceName string, attToDelete []string) errors.HedgeError {
	ret := _m.Called(deviceName, attToDelete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceExtension")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []string) errors.HedgeError); ok {
		r0 = rf(deviceName, attToDelete)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteDeviceExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceExtension'
type MockMetaDataService_DeleteDeviceExtension_Call struct {
	*mock.Call
}

// DeleteDeviceExtension is a helper method to define mock.On call
//   - deviceName string
//   - attToDelete []string
func (_e *MockMetaDataService_Expecter) DeleteDeviceExtension(deviceName interface{}, attToDelete interface{}) *MockMetaDataService_DeleteDeviceExtension_Call {
	return &MockMetaDataService_DeleteDeviceExtension_Call{Call: _e.mock.On("DeleteDeviceExtension", deviceName, attToDelete)}
}

func (_c *MockMetaDataService_DeleteDeviceExtension_Call) Run(run func(deviceName string, attToDelete []string)) *MockMetaDataService_DeleteDeviceExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceExtension_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteDeviceExtension_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceExtension_Call) RunAndReturn(run func(string, []string) errors.HedgeError) *MockMetaDataService_DeleteDeviceExtension_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceExtensionInProfile provides a mock function with given fields: profileName
func (_m *MockMetaDataService) DeleteDeviceExtensionInProfile(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceExtensionInProfile")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteDeviceExtensionInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceExtensionInProfile'
type MockMetaDataService_DeleteDeviceExtensionInProfile_Call struct {
	*mock.Call
}

// DeleteDeviceExtensionInProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) DeleteDeviceExtensionInProfile(profileName interface{}) *MockMetaDataService_DeleteDeviceExtensionInProfile_Call {
	return &MockMetaDataService_DeleteDeviceExtensionInProfile_Call{Call: _e.mock.On("DeleteDeviceExtensionInProfile", profileName)}
}

func (_c *MockMetaDataService_DeleteDeviceExtensionInProfile_Call) Run(run func(profileName string)) *MockMetaDataService_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceExtensionInProfile_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteDeviceExtensionInProfile_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDownsamplingConfig provides a mock function with given fields: profileName
func (_m *MockMetaDataService) DeleteDownsamplingConfig(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDownsamplingConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDownsamplingConfig'
type MockMetaDataService_DeleteDownsamplingConfig_Call struct {
	*mock.Call
}

// DeleteDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) DeleteDownsamplingConfig(profileName interface{}) *MockMetaDataService_DeleteDownsamplingConfig_Call {
	return &MockMetaDataService_DeleteDownsamplingConfig_Call{Call: _e.mock.On("DeleteDownsamplingConfig", profileName)}
}

func (_c *MockMetaDataService_DeleteDownsamplingConfig_Call) Run(run func(profileName string)) *MockMetaDataService_DeleteDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteDownsamplingConfig_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteDownsamplingConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteDownsamplingConfig_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfileContextualAttributes provides a mock function with given fields: profileName
func (_m *MockMetaDataService) DeleteProfileContextualAttributes(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_DeleteProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfileContextualAttributes'
type MockMetaDataService_DeleteProfileContextualAttributes_Call struct {
	*mock.Call
}

// DeleteProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) DeleteProfileContextualAttributes(profileName interface{}) *MockMetaDataService_DeleteProfileContextualAttributes_Call {
	return &MockMetaDataService_DeleteProfileContextualAttributes_Call{Call: _e.mock.On("DeleteProfileContextualAttributes", profileName)}
}

func (_c *MockMetaDataService_DeleteProfileContextualAttributes_Call) Run(run func(profileName string)) *MockMetaDataService_DeleteProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_DeleteProfileContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_DeleteProfileContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_DeleteProfileContextualAttributes_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMetaDataService_DeleteProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNodes provides a mock function with given fields:
func (_m *MockMetaDataService) GetAllNodes() ([]dto.Node, errors.HedgeError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllNodes")
	}

	var r0 []dto.Node
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func() ([]dto.Node, errors.HedgeError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() errors.HedgeError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetAllNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNodes'
type MockMetaDataService_GetAllNodes_Call struct {
	*mock.Call
}

// GetAllNodes is a helper method to define mock.On call
func (_e *MockMetaDataService_Expecter) GetAllNodes() *MockMetaDataService_GetAllNodes_Call {
	return &MockMetaDataService_GetAllNodes_Call{Call: _e.mock.On("GetAllNodes")}
}

func (_c *MockMetaDataService_GetAllNodes_Call) Run(run func()) *MockMetaDataService_GetAllNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetaDataService_GetAllNodes_Call) Return(_a0 []dto.Node, _a1 errors.HedgeError) *MockMetaDataService_GetAllNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetAllNodes_Call) RunAndReturn(run func() ([]dto.Node, errors.HedgeError)) *MockMetaDataService_GetAllNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssociation provides a mock function with given fields: nodeA
func (_m *MockMetaDataService) GetAssociation(nodeA string) ([]dto.AssociationNode, errors.HedgeError) {
	ret := _m.Called(nodeA)

	if len(ret) == 0 {
		panic("no return value specified for GetAssociation")
	}

	var r0 []dto.AssociationNode
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.AssociationNode, errors.HedgeError)); ok {
		return rf(nodeA)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.AssociationNode); ok {
		r0 = rf(nodeA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AssociationNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(nodeA)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssociation'
type MockMetaDataService_GetAssociation_Call struct {
	*mock.Call
}

// GetAssociation is a helper method to define mock.On call
//   - nodeA string
func (_e *MockMetaDataService_Expecter) GetAssociation(nodeA interface{}) *MockMetaDataService_GetAssociation_Call {
	return &MockMetaDataService_GetAssociation_Call{Call: _e.mock.On("GetAssociation", nodeA)}
}

func (_c *MockMetaDataService_GetAssociation_Call) Run(run func(nodeA string)) *MockMetaDataService_GetAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetAssociation_Call) Return(_a0 []dto.AssociationNode, _a1 errors.HedgeError) *MockMetaDataService_GetAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetAssociation_Call) RunAndReturn(run func(string) ([]dto.AssociationNode, errors.HedgeError)) *MockMetaDataService_GetAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttributesGroupedByProfiles provides a mock function with given fields: profileNames
func (_m *MockMetaDataService) GetAttributesGroupedByProfiles(profileNames []string) (map[string][]string, errors.HedgeError) {
	ret := _m.Called(profileNames)

	if len(ret) == 0 {
		panic("no return value specified for GetAttributesGroupedByProfiles")
	}

	var r0 map[string][]string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) (map[string][]string, errors.HedgeError)); ok {
		return rf(profileNames)
	}
	if rf, ok := ret.Get(0).(func([]string) map[string][]string); ok {
		r0 = rf(profileNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(profileNames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetAttributesGroupedByProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttributesGroupedByProfiles'
type MockMetaDataService_GetAttributesGroupedByProfiles_Call struct {
	*mock.Call
}

// GetAttributesGroupedByProfiles is a helper method to define mock.On call
//   - profileNames []string
func (_e *MockMetaDataService_Expecter) GetAttributesGroupedByProfiles(profileNames interface{}) *MockMetaDataService_GetAttributesGroupedByProfiles_Call {
	return &MockMetaDataService_GetAttributesGroupedByProfiles_Call{Call: _e.mock.On("GetAttributesGroupedByProfiles", profileNames)}
}

func (_c *MockMetaDataService_GetAttributesGroupedByProfiles_Call) Run(run func(profileNames []string)) *MockMetaDataService_GetAttributesGroupedByProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_GetAttributesGroupedByProfiles_Call) Return(_a0 map[string][]string, _a1 errors.HedgeError) *MockMetaDataService_GetAttributesGroupedByProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetAttributesGroupedByProfiles_Call) RunAndReturn(run func([]string) (map[string][]string, errors.HedgeError)) *MockMetaDataService_GetAttributesGroupedByProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompleteDevice provides a mock function with given fields: deviceName, metrics, _a2
func (_m *MockMetaDataService) GetCompleteDevice(deviceName string, metrics string, _a2 interfaces.ApplicationService) (dto.DeviceObject, errors.HedgeError) {
	ret := _m.Called(deviceName, metrics, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetCompleteDevice")
	}

	var r0 dto.DeviceObject
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, interfaces.ApplicationService) (dto.DeviceObject, errors.HedgeError)); ok {
		return rf(deviceName, metrics, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, interfaces.ApplicationService) dto.DeviceObject); ok {
		r0 = rf(deviceName, metrics, _a2)
	} else {
		r0 = ret.Get(0).(dto.DeviceObject)
	}

	if rf, ok := ret.Get(1).(func(string, string, interfaces.ApplicationService) errors.HedgeError); ok {
		r1 = rf(deviceName, metrics, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetCompleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompleteDevice'
type MockMetaDataService_GetCompleteDevice_Call struct {
	*mock.Call
}

// GetCompleteDevice is a helper method to define mock.On call
//   - deviceName string
//   - metrics string
//   - _a2 interfaces.ApplicationService
func (_e *MockMetaDataService_Expecter) GetCompleteDevice(deviceName interface{}, metrics interface{}, _a2 interface{}) *MockMetaDataService_GetCompleteDevice_Call {
	return &MockMetaDataService_GetCompleteDevice_Call{Call: _e.mock.On("GetCompleteDevice", deviceName, metrics, _a2)}
}

func (_c *MockMetaDataService_GetCompleteDevice_Call) Run(run func(deviceName string, metrics string, _a2 interfaces.ApplicationService)) *MockMetaDataService_GetCompleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interfaces.ApplicationService))
	})
	return _c
}

func (_c *MockMetaDataService_GetCompleteDevice_Call) Return(_a0 dto.DeviceObject, _a1 errors.HedgeError) *MockMetaDataService_GetCompleteDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetCompleteDevice_Call) RunAndReturn(run func(string, string, interfaces.ApplicationService) (dto.DeviceObject, errors.HedgeError)) *MockMetaDataService_GetCompleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompleteProfile provides a mock function with given fields: profileName
func (_m *MockMetaDataService) GetCompleteProfile(profileName string) (dto.ProfileObject, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetCompleteProfile")
	}

	var r0 dto.ProfileObject
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.ProfileObject, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) dto.ProfileObject); ok {
		r0 = rf(profileName)
	} else {
		r0 = ret.Get(0).(dto.ProfileObject)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetCompleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompleteProfile'
type MockMetaDataService_GetCompleteProfile_Call struct {
	*mock.Call
}

// GetCompleteProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) GetCompleteProfile(profileName interface{}) *MockMetaDataService_GetCompleteProfile_Call {
	return &MockMetaDataService_GetCompleteProfile_Call{Call: _e.mock.On("GetCompleteProfile", profileName)}
}

func (_c *MockMetaDataService_GetCompleteProfile_Call) Run(run func(profileName string)) *MockMetaDataService_GetCompleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetCompleteProfile_Call) Return(_a0 dto.ProfileObject, _a1 errors.HedgeError) *MockMetaDataService_GetCompleteProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetCompleteProfile_Call) RunAndReturn(run func(string) (dto.ProfileObject, errors.HedgeError)) *MockMetaDataService_GetCompleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields:
func (_m *MockMetaDataService) GetDbClient() redis.DeviceExtDBClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.DeviceExtDBClientInterface
	if rf, ok := ret.Get(0).(func() redis.DeviceExtDBClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.DeviceExtDBClientInterface)
		}
	}

	return r0
}

// MockMetaDataService_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockMetaDataService_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
func (_e *MockMetaDataService_Expecter) GetDbClient() *MockMetaDataService_GetDbClient_Call {
	return &MockMetaDataService_GetDbClient_Call{Call: _e.mock.On("GetDbClient")}
}

func (_c *MockMetaDataService_GetDbClient_Call) Run(run func()) *MockMetaDataService_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetaDataService_GetDbClient_Call) Return(_a0 redis.DeviceExtDBClientInterface) *MockMetaDataService_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_GetDbClient_Call) RunAndReturn(run func() redis.DeviceExtDBClientInterface) *MockMetaDataService_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceContextualAttributes provides a mock function with given fields: deviceName
func (_m *MockMetaDataService) GetDeviceContextualAttributes(deviceName string) (map[string]interface{}, errors.HedgeError) {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceContextualAttributes")
	}

	var r0 map[string]interface{}
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, errors.HedgeError)); ok {
		return rf(deviceName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceContextualAttributes'
type MockMetaDataService_GetDeviceContextualAttributes_Call struct {
	*mock.Call
}

// GetDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
func (_e *MockMetaDataService_Expecter) GetDeviceContextualAttributes(deviceName interface{}) *MockMetaDataService_GetDeviceContextualAttributes_Call {
	return &MockMetaDataService_GetDeviceContextualAttributes_Call{Call: _e.mock.On("GetDeviceContextualAttributes", deviceName)}
}

func (_c *MockMetaDataService_GetDeviceContextualAttributes_Call) Run(run func(deviceName string)) *MockMetaDataService_GetDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetDeviceContextualAttributes_Call) Return(_a0 map[string]interface{}, _a1 errors.HedgeError) *MockMetaDataService_GetDeviceContextualAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetDeviceContextualAttributes_Call) RunAndReturn(run func(string) (map[string]interface{}, errors.HedgeError)) *MockMetaDataService_GetDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceDetails provides a mock function with given fields: deviceName
func (_m *MockMetaDataService) GetDeviceDetails(deviceName string) (dtos.Device, string, errors.HedgeError) {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceDetails")
	}

	var r0 dtos.Device
	var r1 string
	var r2 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dtos.Device, string, errors.HedgeError)); ok {
		return rf(deviceName)
	}
	if rf, ok := ret.Get(0).(func(string) dtos.Device); ok {
		r0 = rf(deviceName)
	} else {
		r0 = ret.Get(0).(dtos.Device)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(deviceName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) errors.HedgeError); ok {
		r2 = rf(deviceName)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.HedgeError)
		}
	}

	return r0, r1, r2
}

// MockMetaDataService_GetDeviceDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceDetails'
type MockMetaDataService_GetDeviceDetails_Call struct {
	*mock.Call
}

// GetDeviceDetails is a helper method to define mock.On call
//   - deviceName string
func (_e *MockMetaDataService_Expecter) GetDeviceDetails(deviceName interface{}) *MockMetaDataService_GetDeviceDetails_Call {
	return &MockMetaDataService_GetDeviceDetails_Call{Call: _e.mock.On("GetDeviceDetails", deviceName)}
}

func (_c *MockMetaDataService_GetDeviceDetails_Call) Run(run func(deviceName string)) *MockMetaDataService_GetDeviceDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetDeviceDetails_Call) Return(_a0 dtos.Device, _a1 string, _a2 errors.HedgeError) *MockMetaDataService_GetDeviceDetails_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetaDataService_GetDeviceDetails_Call) RunAndReturn(run func(string) (dtos.Device, string, errors.HedgeError)) *MockMetaDataService_GetDeviceDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceExtension provides a mock function with given fields: deviceName
func (_m *MockMetaDataService) GetDeviceExtension(deviceName string) ([]dto.DeviceExtResp, errors.HedgeError) {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceExtension")
	}

	var r0 []dto.DeviceExtResp
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.DeviceExtResp, errors.HedgeError)); ok {
		return rf(deviceName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.DeviceExtResp); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DeviceExtResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetDeviceExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceExtension'
type MockMetaDataService_GetDeviceExtension_Call struct {
	*mock.Call
}

// GetDeviceExtension is a helper method to define mock.On call
//   - deviceName string
func (_e *MockMetaDataService_Expecter) GetDeviceExtension(deviceName interface{}) *MockMetaDataService_GetDeviceExtension_Call {
	return &MockMetaDataService_GetDeviceExtension_Call{Call: _e.mock.On("GetDeviceExtension", deviceName)}
}

func (_c *MockMetaDataService_GetDeviceExtension_Call) Run(run func(deviceName string)) *MockMetaDataService_GetDeviceExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetDeviceExtension_Call) Return(_a0 []dto.DeviceExtResp, _a1 errors.HedgeError) *MockMetaDataService_GetDeviceExtension_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetDeviceExtension_Call) RunAndReturn(run func(string) ([]dto.DeviceExtResp, errors.HedgeError)) *MockMetaDataService_GetDeviceExtension_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceExtensionInProfile provides a mock function with given fields: profileName
func (_m *MockMetaDataService) GetDeviceExtensionInProfile(profileName string) ([]dto.DeviceExtension, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceExtensionInProfile")
	}

	var r0 []dto.DeviceExtension
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.DeviceExtension, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.DeviceExtension); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DeviceExtension)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetDeviceExtensionInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceExtensionInProfile'
type MockMetaDataService_GetDeviceExtensionInProfile_Call struct {
	*mock.Call
}

// GetDeviceExtensionInProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) GetDeviceExtensionInProfile(profileName interface{}) *MockMetaDataService_GetDeviceExtensionInProfile_Call {
	return &MockMetaDataService_GetDeviceExtensionInProfile_Call{Call: _e.mock.On("GetDeviceExtensionInProfile", profileName)}
}

func (_c *MockMetaDataService_GetDeviceExtensionInProfile_Call) Run(run func(profileName string)) *MockMetaDataService_GetDeviceExtensionInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetDeviceExtensionInProfile_Call) Return(_a0 []dto.DeviceExtension, _a1 errors.HedgeError) *MockMetaDataService_GetDeviceExtensionInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetDeviceExtensionInProfile_Call) RunAndReturn(run func(string) ([]dto.DeviceExtension, errors.HedgeError)) *MockMetaDataService_GetDeviceExtensionInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevices provides a mock function with given fields: query
func (_m *MockMetaDataService) GetDevices(query *dto.Query) ([]dto.DeviceSummary, dto.Page, errors.HedgeError) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []dto.DeviceSummary
	var r1 dto.Page
	var r2 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*dto.Query) ([]dto.DeviceSummary, dto.Page, errors.HedgeError)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*dto.Query) []dto.DeviceSummary); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DeviceSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.Query) dto.Page); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(dto.Page)
	}

	if rf, ok := ret.Get(2).(func(*dto.Query) errors.HedgeError); ok {
		r2 = rf(query)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.HedgeError)
		}
	}

	return r0, r1, r2
}

// MockMetaDataService_GetDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevices'
type MockMetaDataService_GetDevices_Call struct {
	*mock.Call
}

// GetDevices is a helper method to define mock.On call
//   - query *models.Query
func (_e *MockMetaDataService_Expecter) GetDevices(query interface{}) *MockMetaDataService_GetDevices_Call {
	return &MockMetaDataService_GetDevices_Call{Call: _e.mock.On("GetDevices", query)}
}

func (_c *MockMetaDataService_GetDevices_Call) Run(run func(query *dto.Query)) *MockMetaDataService_GetDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Query))
	})
	return _c
}

func (_c *MockMetaDataService_GetDevices_Call) Return(_a0 []dto.DeviceSummary, _a1 dto.Page, _a2 errors.HedgeError) *MockMetaDataService_GetDevices_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetaDataService_GetDevices_Call) RunAndReturn(run func(*dto.Query) ([]dto.DeviceSummary, dto.Page, errors.HedgeError)) *MockMetaDataService_GetDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownsamplingConfig provides a mock function with given fields: profileName
func (_m *MockMetaDataService) GetDownsamplingConfig(profileName string) (*dto.DownsamplingConfig, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetDownsamplingConfig")
	}

	var r0 *dto.DownsamplingConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*dto.DownsamplingConfig, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.DownsamplingConfig); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DownsamplingConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownsamplingConfig'
type MockMetaDataService_GetDownsamplingConfig_Call struct {
	*mock.Call
}

// GetDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) GetDownsamplingConfig(profileName interface{}) *MockMetaDataService_GetDownsamplingConfig_Call {
	return &MockMetaDataService_GetDownsamplingConfig_Call{Call: _e.mock.On("GetDownsamplingConfig", profileName)}
}

func (_c *MockMetaDataService_GetDownsamplingConfig_Call) Run(run func(profileName string)) *MockMetaDataService_GetDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetDownsamplingConfig_Call) Return(_a0 *dto.DownsamplingConfig, _a1 errors.HedgeError) *MockMetaDataService_GetDownsamplingConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetDownsamplingConfig_Call) RunAndReturn(run func(string) (*dto.DownsamplingConfig, errors.HedgeError)) *MockMetaDataService_GetDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocation provides a mock function with given fields: locationId
func (_m *MockMetaDataService) GetLocation(locationId string) (dto.Location, errors.HedgeError) {
	ret := _m.Called(locationId)

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 dto.Location
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Location, errors.HedgeError)); ok {
		return rf(locationId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Location); ok {
		r0 = rf(locationId)
	} else {
		r0 = ret.Get(0).(dto.Location)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(locationId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockMetaDataService_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
//   - locationId string
func (_e *MockMetaDataService_Expecter) GetLocation(locationId interface{}) *MockMetaDataService_GetLocation_Call {
	return &MockMetaDataService_GetLocation_Call{Call: _e.mock.On("GetLocation", locationId)}
}

func (_c *MockMetaDataService_GetLocation_Call) Run(run func(locationId string)) *MockMetaDataService_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetLocation_Call) Return(location dto.Location, err errors.HedgeError) *MockMetaDataService_GetLocation_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockMetaDataService_GetLocation_Call) RunAndReturn(run func(string) (dto.Location, errors.HedgeError)) *MockMetaDataService_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocations provides a mock function with given fields: country, state, city
func (_m *MockMetaDataService) GetLocations(country string, state string, city string) ([]map[string]string, errors.HedgeError) {
	ret := _m.Called(country, state, city)

	if len(ret) == 0 {
		panic("no return value specified for GetLocations")
	}

	var r0 []map[string]string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, string) ([]map[string]string, errors.HedgeError)); ok {
		return rf(country, state, city)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []map[string]string); ok {
		r0 = rf(country, state, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.HedgeError); ok {
		r1 = rf(country, state, city)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocations'
type MockMetaDataService_GetLocations_Call struct {
	*mock.Call
}

// GetLocations is a helper method to define mock.On call
//   - country string
//   - state string
//   - city string
func (_e *MockMetaDataService_Expecter) GetLocations(country interface{}, state interface{}, city interface{}) *MockMetaDataService_GetLocations_Call {
	return &MockMetaDataService_GetLocations_Call{Call: _e.mock.On("GetLocations", country, state, city)}
}

func (_c *MockMetaDataService_GetLocations_Call) Run(run func(country string, state string, city string)) *MockMetaDataService_GetLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetLocations_Call) Return(locationsMap []map[string]string, err errors.HedgeError) *MockMetaDataService_GetLocations_Call {
	_c.Call.Return(locationsMap, err)
	return _c
}

func (_c *MockMetaDataService_GetLocations_Call) RunAndReturn(run func(string, string, string) ([]map[string]string, errors.HedgeError)) *MockMetaDataService_GetLocations_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsForProfile provides a mock function with given fields: profile
func (_m *MockMetaDataService) GetMetricsForProfile(profile string) ([]string, errors.HedgeError) {
	ret := _m.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsForProfile")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]string, errors.HedgeError)); ok {
		return rf(profile)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profile)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetMetricsForProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsForProfile'
type MockMetaDataService_GetMetricsForProfile_Call struct {
	*mock.Call
}

// GetMetricsForProfile is a helper method to define mock.On call
//   - profile string
func (_e *MockMetaDataService_Expecter) GetMetricsForProfile(profile interface{}) *MockMetaDataService_GetMetricsForProfile_Call {
	return &MockMetaDataService_GetMetricsForProfile_Call{Call: _e.mock.On("GetMetricsForProfile", profile)}
}

func (_c *MockMetaDataService_GetMetricsForProfile_Call) Run(run func(profile string)) *MockMetaDataService_GetMetricsForProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetMetricsForProfile_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockMetaDataService_GetMetricsForProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetMetricsForProfile_Call) RunAndReturn(run func(string) ([]string, errors.HedgeError)) *MockMetaDataService_GetMetricsForProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeRawDataConfigs provides a mock function with given fields: nodeIDs
func (_m *MockMetaDataService) GetNodeRawDataConfigs(nodeIDs []string) (map[string]*dto.NodeRawDataConfig, errors.HedgeError) {
	ret := _m.Called(nodeIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeRawDataConfigs")
	}

	var r0 map[string]*dto.NodeRawDataConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) (map[string]*dto.NodeRawDataConfig, errors.HedgeError)); ok {
		return rf(nodeIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) map[string]*dto.NodeRawDataConfig); ok {
		r0 = rf(nodeIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*dto.NodeRawDataConfig)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(nodeIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetNodeRawDataConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeRawDataConfigs'
type MockMetaDataService_GetNodeRawDataConfigs_Call struct {
	*mock.Call
}

// GetNodeRawDataConfigs is a helper method to define mock.On call
//   - nodeIDs []string
func (_e *MockMetaDataService_Expecter) GetNodeRawDataConfigs(nodeIDs interface{}) *MockMetaDataService_GetNodeRawDataConfigs_Call {
	return &MockMetaDataService_GetNodeRawDataConfigs_Call{Call: _e.mock.On("GetNodeRawDataConfigs", nodeIDs)}
}

func (_c *MockMetaDataService_GetNodeRawDataConfigs_Call) Run(run func(nodeIDs []string)) *MockMetaDataService_GetNodeRawDataConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_GetNodeRawDataConfigs_Call) Return(_a0 map[string]*dto.NodeRawDataConfig, _a1 errors.HedgeError) *MockMetaDataService_GetNodeRawDataConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetNodeRawDataConfigs_Call) RunAndReturn(run func([]string) (map[string]*dto.NodeRawDataConfig, errors.HedgeError)) *MockMetaDataService_GetNodeRawDataConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileContextualAttributes provides a mock function with given fields: profileName
func (_m *MockMetaDataService) GetProfileContextualAttributes(profileName string) ([]string, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileContextualAttributes")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]string, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileContextualAttributes'
type MockMetaDataService_GetProfileContextualAttributes_Call struct {
	*mock.Call
}

// GetProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
func (_e *MockMetaDataService_Expecter) GetProfileContextualAttributes(profileName interface{}) *MockMetaDataService_GetProfileContextualAttributes_Call {
	return &MockMetaDataService_GetProfileContextualAttributes_Call{Call: _e.mock.On("GetProfileContextualAttributes", profileName)}
}

func (_c *MockMetaDataService_GetProfileContextualAttributes_Call) Run(run func(profileName string)) *MockMetaDataService_GetProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetProfileContextualAttributes_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockMetaDataService_GetProfileContextualAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetProfileContextualAttributes_Call) RunAndReturn(run func(string) ([]string, errors.HedgeError)) *MockMetaDataService_GetProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileMetaDataSummary provides a mock function with given fields: profileNames
func (_m *MockMetaDataService) GetProfileMetaDataSummary(profileNames []string) ([]dto.ProfileSummary, errors.HedgeError) {
	ret := _m.Called(profileNames)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileMetaDataSummary")
	}

	var r0 []dto.ProfileSummary
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) ([]dto.ProfileSummary, errors.HedgeError)); ok {
		return rf(profileNames)
	}
	if rf, ok := ret.Get(0).(func([]string) []dto.ProfileSummary); ok {
		r0 = rf(profileNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ProfileSummary)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(profileNames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetProfileMetaDataSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileMetaDataSummary'
type MockMetaDataService_GetProfileMetaDataSummary_Call struct {
	*mock.Call
}

// GetProfileMetaDataSummary is a helper method to define mock.On call
//   - profileNames []string
func (_e *MockMetaDataService_Expecter) GetProfileMetaDataSummary(profileNames interface{}) *MockMetaDataService_GetProfileMetaDataSummary_Call {
	return &MockMetaDataService_GetProfileMetaDataSummary_Call{Call: _e.mock.On("GetProfileMetaDataSummary", profileNames)}
}

func (_c *MockMetaDataService_GetProfileMetaDataSummary_Call) Run(run func(profileNames []string)) *MockMetaDataService_GetProfileMetaDataSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_GetProfileMetaDataSummary_Call) Return(_a0 []dto.ProfileSummary, _a1 errors.HedgeError) *MockMetaDataService_GetProfileMetaDataSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetProfileMetaDataSummary_Call) RunAndReturn(run func([]string) ([]dto.ProfileSummary, errors.HedgeError)) *MockMetaDataService_GetProfileMetaDataSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolsForService provides a mock function with given fields: _a0
func (_m *MockMetaDataService) GetProtocolsForService(_a0 string) (map[string]string, errors.HedgeError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolsForService")
	}

	var r0 map[string]string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (map[string]string, errors.HedgeError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetProtocolsForService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolsForService'
type MockMetaDataService_GetProtocolsForService_Call struct {
	*mock.Call
}

// GetProtocolsForService is a helper method to define mock.On call
//   - _a0 string
func (_e *MockMetaDataService_Expecter) GetProtocolsForService(_a0 interface{}) *MockMetaDataService_GetProtocolsForService_Call {
	return &MockMetaDataService_GetProtocolsForService_Call{Call: _e.mock.On("GetProtocolsForService", _a0)}
}

func (_c *MockMetaDataService_GetProtocolsForService_Call) Run(run func(_a0 string)) *MockMetaDataService_GetProtocolsForService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetProtocolsForService_Call) Return(_a0 map[string]string, _a1 errors.HedgeError) *MockMetaDataService_GetProtocolsForService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetProtocolsForService_Call) RunAndReturn(run func(string) (map[string]string, errors.HedgeError)) *MockMetaDataService_GetProtocolsForService_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelatedProfiles provides a mock function with given fields: profileNames
func (_m *MockMetaDataService) GetRelatedProfiles(profileNames []string) ([]string, errors.HedgeError) {
	ret := _m.Called(profileNames)

	if len(ret) == 0 {
		panic("no return value specified for GetRelatedProfiles")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) ([]string, errors.HedgeError)); ok {
		return rf(profileNames)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(profileNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(profileNames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetRelatedProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelatedProfiles'
type MockMetaDataService_GetRelatedProfiles_Call struct {
	*mock.Call
}

// GetRelatedProfiles is a helper method to define mock.On call
//   - profileNames []string
func (_e *MockMetaDataService_Expecter) GetRelatedProfiles(profileNames interface{}) *MockMetaDataService_GetRelatedProfiles_Call {
	return &MockMetaDataService_GetRelatedProfiles_Call{Call: _e.mock.On("GetRelatedProfiles", profileNames)}
}

func (_c *MockMetaDataService_GetRelatedProfiles_Call) Run(run func(profileNames []string)) *MockMetaDataService_GetRelatedProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_GetRelatedProfiles_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockMetaDataService_GetRelatedProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetRelatedProfiles_Call) RunAndReturn(run func([]string) ([]string, errors.HedgeError)) *MockMetaDataService_GetRelatedProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetSQLMetaData provides a mock function with given fields: query
func (_m *MockMetaDataService) GetSQLMetaData(query string) (dto.SQLMetaData, errors.HedgeError) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetSQLMetaData")
	}

	var r0 dto.SQLMetaData
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.SQLMetaData, errors.HedgeError)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) dto.SQLMetaData); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(dto.SQLMetaData)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_GetSQLMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSQLMetaData'
type MockMetaDataService_GetSQLMetaData_Call struct {
	*mock.Call
}

// GetSQLMetaData is a helper method to define mock.On call
//   - query string
func (_e *MockMetaDataService_Expecter) GetSQLMetaData(query interface{}) *MockMetaDataService_GetSQLMetaData_Call {
	return &MockMetaDataService_GetSQLMetaData_Call{Call: _e.mock.On("GetSQLMetaData", query)}
}

func (_c *MockMetaDataService_GetSQLMetaData_Call) Run(run func(query string)) *MockMetaDataService_GetSQLMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetaDataService_GetSQLMetaData_Call) Return(_a0 dto.SQLMetaData, _a1 errors.HedgeError) *MockMetaDataService_GetSQLMetaData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_GetSQLMetaData_Call) RunAndReturn(run func(string) (dto.SQLMetaData, errors.HedgeError)) *MockMetaDataService_GetSQLMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssociation provides a mock function with given fields: nodeA, nodeAType, associationNodes, forceCreate
func (_m *MockMetaDataService) UpdateAssociation(nodeA string, nodeAType string, associationNodes []dto.AssociationNode, forceCreate bool) (string, errors.HedgeError) {
	ret := _m.Called(nodeA, nodeAType, associationNodes, forceCreate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssociation")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode, bool) (string, errors.HedgeError)); ok {
		return rf(nodeA, nodeAType, associationNodes, forceCreate)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode, bool) string); ok {
		r0 = rf(nodeA, nodeAType, associationNodes, forceCreate)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.AssociationNode, bool) errors.HedgeError); ok {
		r1 = rf(nodeA, nodeAType, associationNodes, forceCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_UpdateAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssociation'
type MockMetaDataService_UpdateAssociation_Call struct {
	*mock.Call
}

// UpdateAssociation is a helper method to define mock.On call
//   - nodeA string
//   - nodeAType string
//   - associationNodes []dto.AssociationNode
//   - forceCreate bool
func (_e *MockMetaDataService_Expecter) UpdateAssociation(nodeA interface{}, nodeAType interface{}, associationNodes interface{}, forceCreate interface{}) *MockMetaDataService_UpdateAssociation_Call {
	return &MockMetaDataService_UpdateAssociation_Call{Call: _e.mock.On("UpdateAssociation", nodeA, nodeAType, associationNodes, forceCreate)}
}

func (_c *MockMetaDataService_UpdateAssociation_Call) Run(run func(nodeA string, nodeAType string, associationNodes []dto.AssociationNode, forceCreate bool)) *MockMetaDataService_UpdateAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.AssociationNode), args[3].(bool))
	})
	return _c
}

func (_c *MockMetaDataService_UpdateAssociation_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_UpdateAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_UpdateAssociation_Call) RunAndReturn(run func(string, string, []dto.AssociationNode, bool) (string, errors.HedgeError)) *MockMetaDataService_UpdateAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCompleteDevice provides a mock function with given fields: deviceName, deviceObject
func (_m *MockMetaDataService) UpdateCompleteDevice(deviceName string, deviceObject dto.DeviceObject) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, deviceObject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompleteDevice")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, dto.DeviceObject) (string, errors.HedgeError)); ok {
		return rf(deviceName, deviceObject)
	}
	if rf, ok := ret.Get(0).(func(string, dto.DeviceObject) string); ok {
		r0 = rf(deviceName, deviceObject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, dto.DeviceObject) errors.HedgeError); ok {
		r1 = rf(deviceName, deviceObject)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_UpdateCompleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompleteDevice'
type MockMetaDataService_UpdateCompleteDevice_Call struct {
	*mock.Call
}

// UpdateCompleteDevice is a helper method to define mock.On call
//   - deviceName string
//   - deviceObject dto.DeviceObject
func (_e *MockMetaDataService_Expecter) UpdateCompleteDevice(deviceName interface{}, deviceObject interface{}) *MockMetaDataService_UpdateCompleteDevice_Call {
	return &MockMetaDataService_UpdateCompleteDevice_Call{Call: _e.mock.On("UpdateCompleteDevice", deviceName, deviceObject)}
}

func (_c *MockMetaDataService_UpdateCompleteDevice_Call) Run(run func(deviceName string, deviceObject dto.DeviceObject)) *MockMetaDataService_UpdateCompleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.DeviceObject))
	})
	return _c
}

func (_c *MockMetaDataService_UpdateCompleteDevice_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_UpdateCompleteDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_UpdateCompleteDevice_Call) RunAndReturn(run func(string, dto.DeviceObject) (string, errors.HedgeError)) *MockMetaDataService_UpdateCompleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCompleteProfile provides a mock function with given fields: profileName, profileObject
func (_m *MockMetaDataService) UpdateCompleteProfile(profileName string, profileObject dto.ProfileObject) (string, errors.HedgeError) {
	ret := _m.Called(profileName, profileObject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompleteProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, dto.ProfileObject) (string, errors.HedgeError)); ok {
		return rf(profileName, profileObject)
	}
	if rf, ok := ret.Get(0).(func(string, dto.ProfileObject) string); ok {
		r0 = rf(profileName, profileObject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, dto.ProfileObject) errors.HedgeError); ok {
		r1 = rf(profileName, profileObject)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_UpdateCompleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompleteProfile'
type MockMetaDataService_UpdateCompleteProfile_Call struct {
	*mock.Call
}

// UpdateCompleteProfile is a helper method to define mock.On call
//   - profileName string
//   - profileObject dto.ProfileObject
func (_e *MockMetaDataService_Expecter) UpdateCompleteProfile(profileName interface{}, profileObject interface{}) *MockMetaDataService_UpdateCompleteProfile_Call {
	return &MockMetaDataService_UpdateCompleteProfile_Call{Call: _e.mock.On("UpdateCompleteProfile", profileName, profileObject)}
}

func (_c *MockMetaDataService_UpdateCompleteProfile_Call) Run(run func(profileName string, profileObject dto.ProfileObject)) *MockMetaDataService_UpdateCompleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.ProfileObject))
	})
	return _c
}

func (_c *MockMetaDataService_UpdateCompleteProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_UpdateCompleteProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_UpdateCompleteProfile_Call) RunAndReturn(run func(string, dto.ProfileObject) (string, errors.HedgeError)) *MockMetaDataService_UpdateCompleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceExtension provides a mock function with given fields: deviceName, deviceExts, forceCreate
func (_m *MockMetaDataService) UpdateDeviceExtension(deviceName string, deviceExts []dto.DeviceExt, forceCreate bool) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, deviceExts, forceCreate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceExtension")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExt, bool) (string, errors.HedgeError)); ok {
		return rf(deviceName, deviceExts, forceCreate)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExt, bool) string); ok {
		r0 = rf(deviceName, deviceExts, forceCreate)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExt, bool) errors.HedgeError); ok {
		r1 = rf(deviceName, deviceExts, forceCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_UpdateDeviceExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceExtension'
type MockMetaDataService_UpdateDeviceExtension_Call struct {
	*mock.Call
}

// UpdateDeviceExtension is a helper method to define mock.On call
//   - deviceName string
//   - deviceExts []dto.DeviceExt
//   - forceCreate bool
func (_e *MockMetaDataService_Expecter) UpdateDeviceExtension(deviceName interface{}, deviceExts interface{}, forceCreate interface{}) *MockMetaDataService_UpdateDeviceExtension_Call {
	return &MockMetaDataService_UpdateDeviceExtension_Call{Call: _e.mock.On("UpdateDeviceExtension", deviceName, deviceExts, forceCreate)}
}

func (_c *MockMetaDataService_UpdateDeviceExtension_Call) Run(run func(deviceName string, deviceExts []dto.DeviceExt, forceCreate bool)) *MockMetaDataService_UpdateDeviceExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExt), args[2].(bool))
	})
	return _c
}

func (_c *MockMetaDataService_UpdateDeviceExtension_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_UpdateDeviceExtension_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_UpdateDeviceExtension_Call) RunAndReturn(run func(string, []dto.DeviceExt, bool) (string, errors.HedgeError)) *MockMetaDataService_UpdateDeviceExtension_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceExtensionsInProfile provides a mock function with given fields: profileName, deviceExtns, forceCreate
func (_m *MockMetaDataService) UpdateDeviceExtensionsInProfile(profileName string, deviceExtns []dto.DeviceExtension, forceCreate bool) (string, errors.HedgeError) {
	ret := _m.Called(profileName, deviceExtns, forceCreate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceExtensionsInProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension, bool) (string, errors.HedgeError)); ok {
		return rf(profileName, deviceExtns, forceCreate)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension, bool) string); ok {
		r0 = rf(profileName, deviceExtns, forceCreate)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExtension, bool) errors.HedgeError); ok {
		r1 = rf(profileName, deviceExtns, forceCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMetaDataService_UpdateDeviceExtensionsInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceExtensionsInProfile'
type MockMetaDataService_UpdateDeviceExtensionsInProfile_Call struct {
	*mock.Call
}

// UpdateDeviceExtensionsInProfile is a helper method to define mock.On call
//   - profileName string
//   - deviceExtns []dto.DeviceExtension
//   - forceCreate bool
func (_e *MockMetaDataService_Expecter) UpdateDeviceExtensionsInProfile(profileName interface{}, deviceExtns interface{}, forceCreate interface{}) *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call {
	return &MockMetaDataService_UpdateDeviceExtensionsInProfile_Call{Call: _e.mock.On("UpdateDeviceExtensionsInProfile", profileName, deviceExtns, forceCreate)}
}

func (_c *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call) Run(run func(profileName string, deviceExtns []dto.DeviceExtension, forceCreate bool)) *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExtension), args[2].(bool))
	})
	return _c
}

func (_c *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call) RunAndReturn(run func(string, []dto.DeviceExtension, bool) (string, errors.HedgeError)) *MockMetaDataService_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertAggregateDefinition provides a mock function with given fields: profileName, downsamplingConfig
func (_m *MockMetaDataService) UpsertAggregateDefinition(profileName string, downsamplingConfig dto.DownsamplingConfig) errors.HedgeError {
	ret := _m.Called(profileName, downsamplingConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAggregateDefinition")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, dto.DownsamplingConfig) errors.HedgeError); ok {
		r0 = rf(profileName, downsamplingConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_UpsertAggregateDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertAggregateDefinition'
type MockMetaDataService_UpsertAggregateDefinition_Call struct {
	*mock.Call
}

// UpsertAggregateDefinition is a helper method to define mock.On call
//   - profileName string
//   - downsamplingConfig dto.DownsamplingConfig
func (_e *MockMetaDataService_Expecter) UpsertAggregateDefinition(profileName interface{}, downsamplingConfig interface{}) *MockMetaDataService_UpsertAggregateDefinition_Call {
	return &MockMetaDataService_UpsertAggregateDefinition_Call{Call: _e.mock.On("UpsertAggregateDefinition", profileName, downsamplingConfig)}
}

func (_c *MockMetaDataService_UpsertAggregateDefinition_Call) Run(run func(profileName string, downsamplingConfig dto.DownsamplingConfig)) *MockMetaDataService_UpsertAggregateDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.DownsamplingConfig))
	})
	return _c
}

func (_c *MockMetaDataService_UpsertAggregateDefinition_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_UpsertAggregateDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_UpsertAggregateDefinition_Call) RunAndReturn(run func(string, dto.DownsamplingConfig) errors.HedgeError) *MockMetaDataService_UpsertAggregateDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDeviceContextualAttributes provides a mock function with given fields: deviceName, contextualData
func (_m *MockMetaDataService) UpsertDeviceContextualAttributes(deviceName string, contextualData map[string]interface{}) errors.HedgeError {
	ret := _m.Called(deviceName, contextualData)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDeviceContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) errors.HedgeError); ok {
		r0 = rf(deviceName, contextualData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_UpsertDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDeviceContextualAttributes'
type MockMetaDataService_UpsertDeviceContextualAttributes_Call struct {
	*mock.Call
}

// UpsertDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
//   - contextualData map[string]interface{}
func (_e *MockMetaDataService_Expecter) UpsertDeviceContextualAttributes(deviceName interface{}, contextualData interface{}) *MockMetaDataService_UpsertDeviceContextualAttributes_Call {
	return &MockMetaDataService_UpsertDeviceContextualAttributes_Call{Call: _e.mock.On("UpsertDeviceContextualAttributes", deviceName, contextualData)}
}

func (_c *MockMetaDataService_UpsertDeviceContextualAttributes_Call) Run(run func(deviceName string, contextualData map[string]interface{})) *MockMetaDataService_UpsertDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockMetaDataService_UpsertDeviceContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_UpsertDeviceContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_UpsertDeviceContextualAttributes_Call) RunAndReturn(run func(string, map[string]interface{}) errors.HedgeError) *MockMetaDataService_UpsertDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDownsamplingConfig provides a mock function with given fields: profileName, downsamplingConfig
func (_m *MockMetaDataService) UpsertDownsamplingConfig(profileName string, downsamplingConfig *dto.DownsamplingConfig) errors.HedgeError {
	ret := _m.Called(profileName, downsamplingConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDownsamplingConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, *dto.DownsamplingConfig) errors.HedgeError); ok {
		r0 = rf(profileName, downsamplingConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_UpsertDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDownsamplingConfig'
type MockMetaDataService_UpsertDownsamplingConfig_Call struct {
	*mock.Call
}

// UpsertDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
//   - downsamplingConfig *dto.DownsamplingConfig
func (_e *MockMetaDataService_Expecter) UpsertDownsamplingConfig(profileName interface{}, downsamplingConfig interface{}) *MockMetaDataService_UpsertDownsamplingConfig_Call {
	return &MockMetaDataService_UpsertDownsamplingConfig_Call{Call: _e.mock.On("UpsertDownsamplingConfig", profileName, downsamplingConfig)}
}

func (_c *MockMetaDataService_UpsertDownsamplingConfig_Call) Run(run func(profileName string, downsamplingConfig *dto.DownsamplingConfig)) *MockMetaDataService_UpsertDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*dto.DownsamplingConfig))
	})
	return _c
}

func (_c *MockMetaDataService_UpsertDownsamplingConfig_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_UpsertDownsamplingConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_UpsertDownsamplingConfig_Call) RunAndReturn(run func(string, *dto.DownsamplingConfig) errors.HedgeError) *MockMetaDataService_UpsertDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNodeRawDataConfigs provides a mock function with given fields: nodeRawDataConfigs
func (_m *MockMetaDataService) UpsertNodeRawDataConfigs(nodeRawDataConfigs []dto.NodeRawDataConfig) errors.HedgeError {
	ret := _m.Called(nodeRawDataConfigs)

	if len(ret) == 0 {
		panic("no return value specified for UpsertNodeRawDataConfigs")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]dto.NodeRawDataConfig) errors.HedgeError); ok {
		r0 = rf(nodeRawDataConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_UpsertNodeRawDataConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNodeRawDataConfigs'
type MockMetaDataService_UpsertNodeRawDataConfigs_Call struct {
	*mock.Call
}

// UpsertNodeRawDataConfigs is a helper method to define mock.On call
//   - nodeRawDataConfigs []dto.NodeRawDataConfig
func (_e *MockMetaDataService_Expecter) UpsertNodeRawDataConfigs(nodeRawDataConfigs interface{}) *MockMetaDataService_UpsertNodeRawDataConfigs_Call {
	return &MockMetaDataService_UpsertNodeRawDataConfigs_Call{Call: _e.mock.On("UpsertNodeRawDataConfigs", nodeRawDataConfigs)}
}

func (_c *MockMetaDataService_UpsertNodeRawDataConfigs_Call) Run(run func(nodeRawDataConfigs []dto.NodeRawDataConfig)) *MockMetaDataService_UpsertNodeRawDataConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]dto.NodeRawDataConfig))
	})
	return _c
}

func (_c *MockMetaDataService_UpsertNodeRawDataConfigs_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_UpsertNodeRawDataConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_UpsertNodeRawDataConfigs_Call) RunAndReturn(run func([]dto.NodeRawDataConfig) errors.HedgeError) *MockMetaDataService_UpsertNodeRawDataConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertProfileContextualAttributes provides a mock function with given fields: profileName, contextualAttrs
func (_m *MockMetaDataService) UpsertProfileContextualAttributes(profileName string, contextualAttrs []string) errors.HedgeError {
	ret := _m.Called(profileName, contextualAttrs)

	if len(ret) == 0 {
		panic("no return value specified for UpsertProfileContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []string) errors.HedgeError); ok {
		r0 = rf(profileName, contextualAttrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMetaDataService_UpsertProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertProfileContextualAttributes'
type MockMetaDataService_UpsertProfileContextualAttributes_Call struct {
	*mock.Call
}

// UpsertProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
//   - contextualAttrs []string
func (_e *MockMetaDataService_Expecter) UpsertProfileContextualAttributes(profileName interface{}, contextualAttrs interface{}) *MockMetaDataService_UpsertProfileContextualAttributes_Call {
	return &MockMetaDataService_UpsertProfileContextualAttributes_Call{Call: _e.mock.On("UpsertProfileContextualAttributes", profileName, contextualAttrs)}
}

func (_c *MockMetaDataService_UpsertProfileContextualAttributes_Call) Run(run func(profileName string, contextualAttrs []string)) *MockMetaDataService_UpsertProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockMetaDataService_UpsertProfileContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockMetaDataService_UpsertProfileContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetaDataService_UpsertProfileContextualAttributes_Call) RunAndReturn(run func(string, []string) errors.HedgeError) *MockMetaDataService_UpsertProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetaDataService creates a new instance of MockMetaDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetaDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetaDataService {
	mock := &MockMetaDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
