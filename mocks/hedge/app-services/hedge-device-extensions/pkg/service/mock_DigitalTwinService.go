// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	dto "hedge/common/dto"
	errors "hedge/common/errors"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MockDigitalTwinService is an autogenerated mock type for the DigitalTwinService type
type MockDigitalTwinService struct {
	mock.Mock
}

type MockDigitalTwinService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDigitalTwinService) EXPECT() *MockDigitalTwinService_Expecter {
	return &MockDigitalTwinService_Expecter{mock: &_m.Mock}
}

// CheckScene provides a mock function with given fields: scene
func (_m *MockDigitalTwinService) CheckScene(scene dto.Scene) errors.HedgeError {
	ret := _m.Called(scene)

	if len(ret) == 0 {
		panic("no return value specified for CheckScene")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Scene) errors.HedgeError); ok {
		r0 = rf(scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_CheckScene_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckScene'
type MockDigitalTwinService_CheckScene_Call struct {
	*mock.Call
}

// CheckScene is a helper method to define mock.On call
//   - scene dto.Scene
func (_e *MockDigitalTwinService_Expecter) CheckScene(scene interface{}) *MockDigitalTwinService_CheckScene_Call {
	return &MockDigitalTwinService_CheckScene_Call{Call: _e.mock.On("CheckScene", scene)}
}

func (_c *MockDigitalTwinService_CheckScene_Call) Run(run func(scene dto.Scene)) *MockDigitalTwinService_CheckScene_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Scene))
	})
	return _c
}

func (_c *MockDigitalTwinService_CheckScene_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_CheckScene_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_CheckScene_Call) RunAndReturn(run func(dto.Scene) errors.HedgeError) *MockDigitalTwinService_CheckScene_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDigitalTwin provides a mock function with given fields: scene
func (_m *MockDigitalTwinService) CreateDigitalTwin(scene dto.Scene) errors.HedgeError {
	ret := _m.Called(scene)

	if len(ret) == 0 {
		panic("no return value specified for CreateDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Scene) errors.HedgeError); ok {
		r0 = rf(scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_CreateDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDigitalTwin'
type MockDigitalTwinService_CreateDigitalTwin_Call struct {
	*mock.Call
}

// CreateDigitalTwin is a helper method to define mock.On call
//   - scene dto.Scene
func (_e *MockDigitalTwinService_Expecter) CreateDigitalTwin(scene interface{}) *MockDigitalTwinService_CreateDigitalTwin_Call {
	return &MockDigitalTwinService_CreateDigitalTwin_Call{Call: _e.mock.On("CreateDigitalTwin", scene)}
}

func (_c *MockDigitalTwinService_CreateDigitalTwin_Call) Run(run func(scene dto.Scene)) *MockDigitalTwinService_CreateDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Scene))
	})
	return _c
}

func (_c *MockDigitalTwinService_CreateDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_CreateDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_CreateDigitalTwin_Call) RunAndReturn(run func(dto.Scene) errors.HedgeError) *MockDigitalTwinService_CreateDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields:
func (_m *MockDigitalTwinService) CreateIndex() errors.HedgeError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func() errors.HedgeError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockDigitalTwinService_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
func (_e *MockDigitalTwinService_Expecter) CreateIndex() *MockDigitalTwinService_CreateIndex_Call {
	return &MockDigitalTwinService_CreateIndex_Call{Call: _e.mock.On("CreateIndex")}
}

func (_c *MockDigitalTwinService_CreateIndex_Call) Run(run func()) *MockDigitalTwinService_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDigitalTwinService_CreateIndex_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_CreateIndex_Call) RunAndReturn(run func() errors.HedgeError) *MockDigitalTwinService_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDigitalTwin provides a mock function with given fields: deviceId
func (_m *MockDigitalTwinService) DeleteDigitalTwin(deviceId string) errors.HedgeError {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_DeleteDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDigitalTwin'
type MockDigitalTwinService_DeleteDigitalTwin_Call struct {
	*mock.Call
}

// DeleteDigitalTwin is a helper method to define mock.On call
//   - deviceId string
func (_e *MockDigitalTwinService_Expecter) DeleteDigitalTwin(deviceId interface{}) *MockDigitalTwinService_DeleteDigitalTwin_Call {
	return &MockDigitalTwinService_DeleteDigitalTwin_Call{Call: _e.mock.On("DeleteDigitalTwin", deviceId)}
}

func (_c *MockDigitalTwinService_DeleteDigitalTwin_Call) Run(run func(deviceId string)) *MockDigitalTwinService_DeleteDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_DeleteDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_DeleteDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_DeleteDigitalTwin_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDigitalTwinService_DeleteDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImage provides a mock function with given fields: imageId
func (_m *MockDigitalTwinService) DeleteImage(imageId string) errors.HedgeError {
	ret := _m.Called(imageId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(imageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type MockDigitalTwinService_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - imageId string
func (_e *MockDigitalTwinService_Expecter) DeleteImage(imageId interface{}) *MockDigitalTwinService_DeleteImage_Call {
	return &MockDigitalTwinService_DeleteImage_Call{Call: _e.mock.On("DeleteImage", imageId)}
}

func (_c *MockDigitalTwinService_DeleteImage_Call) Run(run func(imageId string)) *MockDigitalTwinService_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_DeleteImage_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_DeleteImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_DeleteImage_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDigitalTwinService_DeleteImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetDTwinByDevice provides a mock function with given fields: deviceId
func (_m *MockDigitalTwinService) GetDTwinByDevice(deviceId string) (dto.Scene, errors.HedgeError) {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for GetDTwinByDevice")
	}

	var r0 dto.Scene
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Scene, errors.HedgeError)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Scene); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Get(0).(dto.Scene)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDigitalTwinService_GetDTwinByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDTwinByDevice'
type MockDigitalTwinService_GetDTwinByDevice_Call struct {
	*mock.Call
}

// GetDTwinByDevice is a helper method to define mock.On call
//   - deviceId string
func (_e *MockDigitalTwinService_Expecter) GetDTwinByDevice(deviceId interface{}) *MockDigitalTwinService_GetDTwinByDevice_Call {
	return &MockDigitalTwinService_GetDTwinByDevice_Call{Call: _e.mock.On("GetDTwinByDevice", deviceId)}
}

func (_c *MockDigitalTwinService_GetDTwinByDevice_Call) Run(run func(deviceId string)) *MockDigitalTwinService_GetDTwinByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_GetDTwinByDevice_Call) Return(_a0 dto.Scene, _a1 errors.HedgeError) *MockDigitalTwinService_GetDTwinByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDigitalTwinService_GetDTwinByDevice_Call) RunAndReturn(run func(string) (dto.Scene, errors.HedgeError)) *MockDigitalTwinService_GetDTwinByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceById provides a mock function with given fields: deviceId, metrics
func (_m *MockDigitalTwinService) GetDeviceById(deviceId string, metrics string) (dto.DeviceObject, errors.HedgeError) {
	ret := _m.Called(deviceId, metrics)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceById")
	}

	var r0 dto.DeviceObject
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) (dto.DeviceObject, errors.HedgeError)); ok {
		return rf(deviceId, metrics)
	}
	if rf, ok := ret.Get(0).(func(string, string) dto.DeviceObject); ok {
		r0 = rf(deviceId, metrics)
	} else {
		r0 = ret.Get(0).(dto.DeviceObject)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(deviceId, metrics)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDigitalTwinService_GetDeviceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceById'
type MockDigitalTwinService_GetDeviceById_Call struct {
	*mock.Call
}

// GetDeviceById is a helper method to define mock.On call
//   - deviceId string
//   - metrics string
func (_e *MockDigitalTwinService_Expecter) GetDeviceById(deviceId interface{}, metrics interface{}) *MockDigitalTwinService_GetDeviceById_Call {
	return &MockDigitalTwinService_GetDeviceById_Call{Call: _e.mock.On("GetDeviceById", deviceId, metrics)}
}

func (_c *MockDigitalTwinService_GetDeviceById_Call) Run(run func(deviceId string, metrics string)) *MockDigitalTwinService_GetDeviceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_GetDeviceById_Call) Return(_a0 dto.DeviceObject, _a1 errors.HedgeError) *MockDigitalTwinService_GetDeviceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDigitalTwinService_GetDeviceById_Call) RunAndReturn(run func(string, string) (dto.DeviceObject, errors.HedgeError)) *MockDigitalTwinService_GetDeviceById_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: image
func (_m *MockDigitalTwinService) GetImage(image dto.Image) (string, string, errors.HedgeError) {
	ret := _m.Called(image)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 string
	var r1 string
	var r2 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Image) (string, string, errors.HedgeError)); ok {
		return rf(image)
	}
	if rf, ok := ret.Get(0).(func(dto.Image) string); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.Image) string); ok {
		r1 = rf(image)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(dto.Image) errors.HedgeError); ok {
		r2 = rf(image)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.HedgeError)
		}
	}

	return r0, r1, r2
}

// MockDigitalTwinService_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockDigitalTwinService_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - image dto.Image
func (_e *MockDigitalTwinService_Expecter) GetImage(image interface{}) *MockDigitalTwinService_GetImage_Call {
	return &MockDigitalTwinService_GetImage_Call{Call: _e.mock.On("GetImage", image)}
}

func (_c *MockDigitalTwinService_GetImage_Call) Run(run func(image dto.Image)) *MockDigitalTwinService_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Image))
	})
	return _c
}

func (_c *MockDigitalTwinService_GetImage_Call) Return(_a0 string, _a1 string, _a2 errors.HedgeError) *MockDigitalTwinService_GetImage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDigitalTwinService_GetImage_Call) RunAndReturn(run func(dto.Image) (string, string, errors.HedgeError)) *MockDigitalTwinService_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageId provides a mock function with given fields: path
func (_m *MockDigitalTwinService) GetImageId(path string) string {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetImageId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDigitalTwinService_GetImageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageId'
type MockDigitalTwinService_GetImageId_Call struct {
	*mock.Call
}

// GetImageId is a helper method to define mock.On call
//   - path string
func (_e *MockDigitalTwinService_Expecter) GetImageId(path interface{}) *MockDigitalTwinService_GetImageId_Call {
	return &MockDigitalTwinService_GetImageId_Call{Call: _e.mock.On("GetImageId", path)}
}

func (_c *MockDigitalTwinService_GetImageId_Call) Run(run func(path string)) *MockDigitalTwinService_GetImageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_GetImageId_Call) Return(_a0 string) *MockDigitalTwinService_GetImageId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_GetImageId_Call) RunAndReturn(run func(string) string) *MockDigitalTwinService_GetImageId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSceneById provides a mock function with given fields: sceneId
func (_m *MockDigitalTwinService) GetSceneById(sceneId string) (dto.Scene, errors.HedgeError) {
	ret := _m.Called(sceneId)

	if len(ret) == 0 {
		panic("no return value specified for GetSceneById")
	}

	var r0 dto.Scene
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Scene, errors.HedgeError)); ok {
		return rf(sceneId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Scene); ok {
		r0 = rf(sceneId)
	} else {
		r0 = ret.Get(0).(dto.Scene)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(sceneId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDigitalTwinService_GetSceneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSceneById'
type MockDigitalTwinService_GetSceneById_Call struct {
	*mock.Call
}

// GetSceneById is a helper method to define mock.On call
//   - sceneId string
func (_e *MockDigitalTwinService_Expecter) GetSceneById(sceneId interface{}) *MockDigitalTwinService_GetSceneById_Call {
	return &MockDigitalTwinService_GetSceneById_Call{Call: _e.mock.On("GetSceneById", sceneId)}
}

func (_c *MockDigitalTwinService_GetSceneById_Call) Run(run func(sceneId string)) *MockDigitalTwinService_GetSceneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_GetSceneById_Call) Return(_a0 dto.Scene, _a1 errors.HedgeError) *MockDigitalTwinService_GetSceneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDigitalTwinService_GetSceneById_Call) RunAndReturn(run func(string) (dto.Scene, errors.HedgeError)) *MockDigitalTwinService_GetSceneById_Call {
	_c.Call.Return(run)
	return _c
}

// SnapshotImage provides a mock function with given fields: path, imageId, mimeType
func (_m *MockDigitalTwinService) SnapshotImage(path string, imageId string, mimeType string) (string, string, errors.HedgeError) {
	ret := _m.Called(path, imageId, mimeType)

	if len(ret) == 0 {
		panic("no return value specified for SnapshotImage")
	}

	var r0 string
	var r1 string
	var r2 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, string) (string, string, errors.HedgeError)); ok {
		return rf(path, imageId, mimeType)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(path, imageId, mimeType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(path, imageId, mimeType)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) errors.HedgeError); ok {
		r2 = rf(path, imageId, mimeType)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.HedgeError)
		}
	}

	return r0, r1, r2
}

// MockDigitalTwinService_SnapshotImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SnapshotImage'
type MockDigitalTwinService_SnapshotImage_Call struct {
	*mock.Call
}

// SnapshotImage is a helper method to define mock.On call
//   - path string
//   - imageId string
//   - mimeType string
func (_e *MockDigitalTwinService_Expecter) SnapshotImage(path interface{}, imageId interface{}, mimeType interface{}) *MockDigitalTwinService_SnapshotImage_Call {
	return &MockDigitalTwinService_SnapshotImage_Call{Call: _e.mock.On("SnapshotImage", path, imageId, mimeType)}
}

func (_c *MockDigitalTwinService_SnapshotImage_Call) Run(run func(path string, imageId string, mimeType string)) *MockDigitalTwinService_SnapshotImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDigitalTwinService_SnapshotImage_Call) Return(_a0 string, _a1 string, _a2 errors.HedgeError) *MockDigitalTwinService_SnapshotImage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDigitalTwinService_SnapshotImage_Call) RunAndReturn(run func(string, string, string) (string, string, errors.HedgeError)) *MockDigitalTwinService_SnapshotImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDigitalTwin provides a mock function with given fields: scene
func (_m *MockDigitalTwinService) UpdateDigitalTwin(scene dto.Scene) errors.HedgeError {
	ret := _m.Called(scene)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Scene) errors.HedgeError); ok {
		r0 = rf(scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_UpdateDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDigitalTwin'
type MockDigitalTwinService_UpdateDigitalTwin_Call struct {
	*mock.Call
}

// UpdateDigitalTwin is a helper method to define mock.On call
//   - scene dto.Scene
func (_e *MockDigitalTwinService_Expecter) UpdateDigitalTwin(scene interface{}) *MockDigitalTwinService_UpdateDigitalTwin_Call {
	return &MockDigitalTwinService_UpdateDigitalTwin_Call{Call: _e.mock.On("UpdateDigitalTwin", scene)}
}

func (_c *MockDigitalTwinService_UpdateDigitalTwin_Call) Run(run func(scene dto.Scene)) *MockDigitalTwinService_UpdateDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Scene))
	})
	return _c
}

func (_c *MockDigitalTwinService_UpdateDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_UpdateDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_UpdateDigitalTwin_Call) RunAndReturn(run func(dto.Scene) errors.HedgeError) *MockDigitalTwinService_UpdateDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// UploadImage provides a mock function with given fields: img, image
func (_m *MockDigitalTwinService) UploadImage(img *multipart.FileHeader, image dto.Image) errors.HedgeError {
	ret := _m.Called(img, image)

	if len(ret) == 0 {
		panic("no return value specified for UploadImage")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, dto.Image) errors.HedgeError); ok {
		r0 = rf(img, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDigitalTwinService_UploadImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadImage'
type MockDigitalTwinService_UploadImage_Call struct {
	*mock.Call
}

// UploadImage is a helper method to define mock.On call
//   - img *multipart.FileHeader
//   - image dto.Image
func (_e *MockDigitalTwinService_Expecter) UploadImage(img interface{}, image interface{}) *MockDigitalTwinService_UploadImage_Call {
	return &MockDigitalTwinService_UploadImage_Call{Call: _e.mock.On("UploadImage", img, image)}
}

func (_c *MockDigitalTwinService_UploadImage_Call) Run(run func(img *multipart.FileHeader, image dto.Image)) *MockDigitalTwinService_UploadImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*multipart.FileHeader), args[1].(dto.Image))
	})
	return _c
}

func (_c *MockDigitalTwinService_UploadImage_Call) Return(_a0 errors.HedgeError) *MockDigitalTwinService_UploadImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDigitalTwinService_UploadImage_Call) RunAndReturn(run func(*multipart.FileHeader, dto.Image) errors.HedgeError) *MockDigitalTwinService_UploadImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDigitalTwinService creates a new instance of MockDigitalTwinService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDigitalTwinService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDigitalTwinService {
	mock := &MockDigitalTwinService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
