// Code generated by mockery v2.38.0. DO NOT EDIT.

package redis

import (
	dtos "github.com/edgexfoundry/go-mod-core-contracts/v3/dtos"
	db "hedge/common/db"
	dto "hedge/common/dto"

	errors "hedge/common/errors"

	logger "github.com/edgexfoundry/go-mod-core-contracts/v3/clients/logger"

	mock "github.com/stretchr/testify/mock"

	redis "hedge/app-services/hedge-device-extensions/pkg/db/redis"

	redsync "github.com/go-redsync/redsync/v4"
)

// MockDeviceExtDBClientInterface is an autogenerated mock type for the DeviceExtDBClientInterface type
type MockDeviceExtDBClientInterface struct {
	mock.Mock
}

type MockDeviceExtDBClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceExtDBClientInterface) EXPECT() *MockDeviceExtDBClientInterface_Expecter {
	return &MockDeviceExtDBClientInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function with given fields: lockName
func (_m *MockDeviceExtDBClientInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _m.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return rf(lockName)
	}
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockDeviceExtDBClientInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName string
func (_e *MockDeviceExtDBClientInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockDeviceExtDBClientInterface_AcquireRedisLock_Call {
	return &MockDeviceExtDBClientInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockDeviceExtDBClientInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockDeviceExtDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AcquireRedisLock_Call) Return(_a0 *redsync.Mutex, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AcquireRedisLock_Call) RunAndReturn(run func(string) (*redsync.Mutex, errors.HedgeError)) *MockDeviceExtDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// AddAssociation provides a mock function with given fields: nodeA, nodeAType, associationNodes
func (_m *MockDeviceExtDBClientInterface) AddAssociation(nodeA string, nodeAType string, associationNodes []dto.AssociationNode) (string, errors.HedgeError) {
	ret := _m.Called(nodeA, nodeAType, associationNodes)

	if len(ret) == 0 {
		panic("no return value specified for AddAssociation")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) (string, errors.HedgeError)); ok {
		return rf(nodeA, nodeAType, associationNodes)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) string); ok {
		r0 = rf(nodeA, nodeAType, associationNodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.AssociationNode) errors.HedgeError); ok {
		r1 = rf(nodeA, nodeAType, associationNodes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_AddAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAssociation'
type MockDeviceExtDBClientInterface_AddAssociation_Call struct {
	*mock.Call
}

// AddAssociation is a helper method to define mock.On call
//   - nodeA string
//   - nodeAType string
//   - associationNodes []dto.AssociationNode
func (_e *MockDeviceExtDBClientInterface_Expecter) AddAssociation(nodeA interface{}, nodeAType interface{}, associationNodes interface{}) *MockDeviceExtDBClientInterface_AddAssociation_Call {
	return &MockDeviceExtDBClientInterface_AddAssociation_Call{Call: _e.mock.On("AddAssociation", nodeA, nodeAType, associationNodes)}
}

func (_c *MockDeviceExtDBClientInterface_AddAssociation_Call) Run(run func(nodeA string, nodeAType string, associationNodes []dto.AssociationNode)) *MockDeviceExtDBClientInterface_AddAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.AssociationNode))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddAssociation_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_AddAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddAssociation_Call) RunAndReturn(run func(string, string, []dto.AssociationNode) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_AddAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// AddDeviceExt provides a mock function with given fields: deviceName, profileName, deviceExts
func (_m *MockDeviceExtDBClientInterface) AddDeviceExt(deviceName string, profileName string, deviceExts []dto.DeviceExt) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, profileName, deviceExts)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceExt")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.DeviceExt) (string, errors.HedgeError)); ok {
		return rf(deviceName, profileName, deviceExts)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.DeviceExt) string); ok {
		r0 = rf(deviceName, profileName, deviceExts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.DeviceExt) errors.HedgeError); ok {
		r1 = rf(deviceName, profileName, deviceExts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_AddDeviceExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeviceExt'
type MockDeviceExtDBClientInterface_AddDeviceExt_Call struct {
	*mock.Call
}

// AddDeviceExt is a helper method to define mock.On call
//   - deviceName string
//   - profileName string
//   - deviceExts []dto.DeviceExt
func (_e *MockDeviceExtDBClientInterface_Expecter) AddDeviceExt(deviceName interface{}, profileName interface{}, deviceExts interface{}) *MockDeviceExtDBClientInterface_AddDeviceExt_Call {
	return &MockDeviceExtDBClientInterface_AddDeviceExt_Call{Call: _e.mock.On("AddDeviceExt", deviceName, profileName, deviceExts)}
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExt_Call) Run(run func(deviceName string, profileName string, deviceExts []dto.DeviceExt)) *MockDeviceExtDBClientInterface_AddDeviceExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.DeviceExt))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExt_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_AddDeviceExt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExt_Call) RunAndReturn(run func(string, string, []dto.DeviceExt) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_AddDeviceExt_Call {
	_c.Call.Return(run)
	return _c
}

// AddDeviceExtensionsInProfile provides a mock function with given fields: profileName, deviceExtns
func (_m *MockDeviceExtDBClientInterface) AddDeviceExtensionsInProfile(profileName string, deviceExtns []dto.DeviceExtension) (string, errors.HedgeError) {
	ret := _m.Called(profileName, deviceExtns)

	if len(ret) == 0 {
		panic("no return value specified for AddDeviceExtensionsInProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) (string, errors.HedgeError)); ok {
		return rf(profileName, deviceExtns)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) string); ok {
		r0 = rf(profileName, deviceExtns)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExtension) errors.HedgeError); ok {
		r1 = rf(profileName, deviceExtns)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeviceExtensionsInProfile'
type MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call struct {
	*mock.Call
}

// AddDeviceExtensionsInProfile is a helper method to define mock.On call
//   - profileName string
//   - deviceExtns []dto.DeviceExtension
func (_e *MockDeviceExtDBClientInterface_Expecter) AddDeviceExtensionsInProfile(profileName interface{}, deviceExtns interface{}) *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call {
	return &MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call{Call: _e.mock.On("AddDeviceExtensionsInProfile", profileName, deviceExtns)}
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call) Run(run func(profileName string, deviceExtns []dto.DeviceExtension)) *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExtension))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call) RunAndReturn(run func(string, []dto.DeviceExtension) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_AddDeviceExtensionsInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// AddLocation provides a mock function with given fields: location
func (_m *MockDeviceExtDBClientInterface) AddLocation(location dto.Location) (string, errors.HedgeError) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for AddLocation")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Location) (string, errors.HedgeError)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(dto.Location) string); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.Location) errors.HedgeError); ok {
		r1 = rf(location)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_AddLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLocation'
type MockDeviceExtDBClientInterface_AddLocation_Call struct {
	*mock.Call
}

// AddLocation is a helper method to define mock.On call
//   - location models.Location
func (_e *MockDeviceExtDBClientInterface_Expecter) AddLocation(location interface{}) *MockDeviceExtDBClientInterface_AddLocation_Call {
	return &MockDeviceExtDBClientInterface_AddLocation_Call{Call: _e.mock.On("AddLocation", location)}
}

func (_c *MockDeviceExtDBClientInterface_AddLocation_Call) Run(run func(location dto.Location)) *MockDeviceExtDBClientInterface_AddLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Location))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddLocation_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_AddLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_AddLocation_Call) RunAndReturn(run func(dto.Location) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_AddLocation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDigitalTwin provides a mock function with given fields: scene
func (_m *MockDeviceExtDBClientInterface) CreateDigitalTwin(scene dto.Scene) errors.HedgeError {
	ret := _m.Called(scene)

	if len(ret) == 0 {
		panic("no return value specified for CreateDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Scene) errors.HedgeError); ok {
		r0 = rf(scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_CreateDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDigitalTwin'
type MockDeviceExtDBClientInterface_CreateDigitalTwin_Call struct {
	*mock.Call
}

// CreateDigitalTwin is a helper method to define mock.On call
//   - scene dto.Scene
func (_e *MockDeviceExtDBClientInterface_Expecter) CreateDigitalTwin(scene interface{}) *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call {
	return &MockDeviceExtDBClientInterface_CreateDigitalTwin_Call{Call: _e.mock.On("CreateDigitalTwin", scene)}
}

func (_c *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call) Run(run func(scene dto.Scene)) *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Scene))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call) RunAndReturn(run func(dto.Scene) errors.HedgeError) *MockDeviceExtDBClientInterface_CreateDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields:
func (_m *MockDeviceExtDBClientInterface) CreateIndex() errors.HedgeError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func() errors.HedgeError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockDeviceExtDBClientInterface_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
func (_e *MockDeviceExtDBClientInterface_Expecter) CreateIndex() *MockDeviceExtDBClientInterface_CreateIndex_Call {
	return &MockDeviceExtDBClientInterface_CreateIndex_Call{Call: _e.mock.On("CreateIndex")}
}

func (_c *MockDeviceExtDBClientInterface_CreateIndex_Call) Run(run func()) *MockDeviceExtDBClientInterface_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_CreateIndex_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_CreateIndex_Call) RunAndReturn(run func() errors.HedgeError) *MockDeviceExtDBClientInterface_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllDeviceExt provides a mock function with given fields: deviceName, profileName
func (_m *MockDeviceExtDBClientInterface) DeleteAllDeviceExt(deviceName string, profileName string) errors.HedgeError {
	ret := _m.Called(deviceName, profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllDeviceExt")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(deviceName, profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllDeviceExt'
type MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call struct {
	*mock.Call
}

// DeleteAllDeviceExt is a helper method to define mock.On call
//   - deviceName string
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteAllDeviceExt(deviceName interface{}, profileName interface{}) *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call {
	return &MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call{Call: _e.mock.On("DeleteAllDeviceExt", deviceName, profileName)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call) Run(run func(deviceName string, profileName string)) *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteAllDeviceExt_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAssociationByNodeName provides a mock function with given fields: node
func (_m *MockDeviceExtDBClientInterface) DeleteAssociationByNodeName(node string) errors.HedgeError {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssociationByNodeName")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAssociationByNodeName'
type MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call struct {
	*mock.Call
}

// DeleteAssociationByNodeName is a helper method to define mock.On call
//   - node string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteAssociationByNodeName(node interface{}) *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call {
	return &MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call{Call: _e.mock.On("DeleteAssociationByNodeName", node)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call) Run(run func(node string)) *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteAssociationByNodeName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceContextualAttributes provides a mock function with given fields: deviceName
func (_m *MockDeviceExtDBClientInterface) DeleteDeviceContextualAttributes(deviceName string) errors.HedgeError {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceContextualAttributes'
type MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call struct {
	*mock.Call
}

// DeleteDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteDeviceContextualAttributes(deviceName interface{}) *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call{Call: _e.mock.On("DeleteDeviceContextualAttributes", deviceName)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call) Run(run func(deviceName string)) *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceExt provides a mock function with given fields: deviceName, profileName, attToDelete, updatedDeviceExt
func (_m *MockDeviceExtDBClientInterface) DeleteDeviceExt(deviceName string, profileName string, attToDelete []string, updatedDeviceExt []dto.DeviceExt) errors.HedgeError {
	ret := _m.Called(deviceName, profileName, attToDelete, updatedDeviceExt)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceExt")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []string, []dto.DeviceExt) errors.HedgeError); ok {
		r0 = rf(deviceName, profileName, attToDelete, updatedDeviceExt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteDeviceExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceExt'
type MockDeviceExtDBClientInterface_DeleteDeviceExt_Call struct {
	*mock.Call
}

// DeleteDeviceExt is a helper method to define mock.On call
//   - deviceName string
//   - profileName string
//   - attToDelete []string
//   - updatedDeviceExt []dto.DeviceExt
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteDeviceExt(deviceName interface{}, profileName interface{}, attToDelete interface{}, updatedDeviceExt interface{}) *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call {
	return &MockDeviceExtDBClientInterface_DeleteDeviceExt_Call{Call: _e.mock.On("DeleteDeviceExt", deviceName, profileName, attToDelete, updatedDeviceExt)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call) Run(run func(deviceName string, profileName string, attToDelete []string, updatedDeviceExt []dto.DeviceExt)) *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string), args[3].([]dto.DeviceExt))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call) RunAndReturn(run func(string, string, []string, []dto.DeviceExt) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceExt_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeviceExtensionInProfile provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) DeleteDeviceExtensionInProfile(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceExtensionInProfile")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeviceExtensionInProfile'
type MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call struct {
	*mock.Call
}

// DeleteDeviceExtensionInProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteDeviceExtensionInProfile(profileName interface{}) *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call {
	return &MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call{Call: _e.mock.On("DeleteDeviceExtensionInProfile", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDeviceExtensionInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDigitalTwin provides a mock function with given fields: sceneId
func (_m *MockDeviceExtDBClientInterface) DeleteDigitalTwin(sceneId string) errors.HedgeError {
	ret := _m.Called(sceneId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(sceneId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDigitalTwin'
type MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call struct {
	*mock.Call
}

// DeleteDigitalTwin is a helper method to define mock.On call
//   - sceneId string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteDigitalTwin(sceneId interface{}) *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call {
	return &MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call{Call: _e.mock.On("DeleteDigitalTwin", sceneId)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call) Run(run func(sceneId string)) *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDownsamplingConfig provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) DeleteDownsamplingConfig(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDownsamplingConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDownsamplingConfig'
type MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call struct {
	*mock.Call
}

// DeleteDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteDownsamplingConfig(profileName interface{}) *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call {
	return &MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call{Call: _e.mock.On("DeleteDownsamplingConfig", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImageObject provides a mock function with given fields: imageId
func (_m *MockDeviceExtDBClientInterface) DeleteImageObject(imageId string) errors.HedgeError {
	ret := _m.Called(imageId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageObject")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(imageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteImageObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImageObject'
type MockDeviceExtDBClientInterface_DeleteImageObject_Call struct {
	*mock.Call
}

// DeleteImageObject is a helper method to define mock.On call
//   - imageId string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteImageObject(imageId interface{}) *MockDeviceExtDBClientInterface_DeleteImageObject_Call {
	return &MockDeviceExtDBClientInterface_DeleteImageObject_Call{Call: _e.mock.On("DeleteImageObject", imageId)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteImageObject_Call) Run(run func(imageId string)) *MockDeviceExtDBClientInterface_DeleteImageObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteImageObject_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteImageObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteImageObject_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteImageObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfileContextualAttributes provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) DeleteProfileContextualAttributes(profileName string) errors.HedgeError {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfileContextualAttributes'
type MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call struct {
	*mock.Call
}

// DeleteProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) DeleteProfileContextualAttributes(profileName interface{}) *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call{Call: _e.mock.On("DeleteProfileContextualAttributes", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call) RunAndReturn(run func(string) errors.HedgeError) *MockDeviceExtDBClientInterface_DeleteProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllImages provides a mock function with given fields: image
func (_m *MockDeviceExtDBClientInterface) GetAllImages(image dto.Image) (dto.Image, errors.HedgeError) {
	ret := _m.Called(image)

	if len(ret) == 0 {
		panic("no return value specified for GetAllImages")
	}

	var r0 dto.Image
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Image) (dto.Image, errors.HedgeError)); ok {
		return rf(image)
	}
	if rf, ok := ret.Get(0).(func(dto.Image) dto.Image); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Get(0).(dto.Image)
	}

	if rf, ok := ret.Get(1).(func(dto.Image) errors.HedgeError); ok {
		r1 = rf(image)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetAllImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllImages'
type MockDeviceExtDBClientInterface_GetAllImages_Call struct {
	*mock.Call
}

// GetAllImages is a helper method to define mock.On call
//   - image dto.Image
func (_e *MockDeviceExtDBClientInterface_Expecter) GetAllImages(image interface{}) *MockDeviceExtDBClientInterface_GetAllImages_Call {
	return &MockDeviceExtDBClientInterface_GetAllImages_Call{Call: _e.mock.On("GetAllImages", image)}
}

func (_c *MockDeviceExtDBClientInterface_GetAllImages_Call) Run(run func(image dto.Image)) *MockDeviceExtDBClientInterface_GetAllImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Image))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetAllImages_Call) Return(_a0 dto.Image, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetAllImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetAllImages_Call) RunAndReturn(run func(dto.Image) (dto.Image, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetAllImages_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssociationByNodeName provides a mock function with given fields: node
func (_m *MockDeviceExtDBClientInterface) GetAssociationByNodeName(node string) ([]dto.AssociationNode, errors.HedgeError) {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for GetAssociationByNodeName")
	}

	var r0 []dto.AssociationNode
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.AssociationNode, errors.HedgeError)); ok {
		return rf(node)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.AssociationNode); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AssociationNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(node)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssociationByNodeName'
type MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call struct {
	*mock.Call
}

// GetAssociationByNodeName is a helper method to define mock.On call
//   - node string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetAssociationByNodeName(node interface{}) *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call {
	return &MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call{Call: _e.mock.On("GetAssociationByNodeName", node)}
}

func (_c *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call) Run(run func(node string)) *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call) Return(_a0 []dto.AssociationNode, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call) RunAndReturn(run func(string) ([]dto.AssociationNode, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetAssociationByNodeName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDTwinByDevice provides a mock function with given fields: deviceId
func (_m *MockDeviceExtDBClientInterface) GetDTwinByDevice(deviceId string) (dto.Scene, errors.HedgeError) {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for GetDTwinByDevice")
	}

	var r0 dto.Scene
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Scene, errors.HedgeError)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Scene); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Get(0).(dto.Scene)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDTwinByDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDTwinByDevice'
type MockDeviceExtDBClientInterface_GetDTwinByDevice_Call struct {
	*mock.Call
}

// GetDTwinByDevice is a helper method to define mock.On call
//   - deviceId string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDTwinByDevice(deviceId interface{}) *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call {
	return &MockDeviceExtDBClientInterface_GetDTwinByDevice_Call{Call: _e.mock.On("GetDTwinByDevice", deviceId)}
}

func (_c *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call) Run(run func(deviceId string)) *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call) Return(_a0 dto.Scene, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call) RunAndReturn(run func(string) (dto.Scene, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDTwinByDevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields: dbConfig, _a1
func (_m *MockDeviceExtDBClientInterface) GetDbClient(dbConfig *db.DatabaseConfig, _a1 logger.LoggingClient) redis.DeviceExtDBClientInterface {
	ret := _m.Called(dbConfig, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.DeviceExtDBClientInterface
	if rf, ok := ret.Get(0).(func(*db.DatabaseConfig, logger.LoggingClient) redis.DeviceExtDBClientInterface); ok {
		r0 = rf(dbConfig, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.DeviceExtDBClientInterface)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockDeviceExtDBClientInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig *db.DatabaseConfig
//   - _a1 logger.LoggingClient
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDbClient(dbConfig interface{}, _a1 interface{}) *MockDeviceExtDBClientInterface_GetDbClient_Call {
	return &MockDeviceExtDBClientInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig, _a1)}
}

func (_c *MockDeviceExtDBClientInterface_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig, _a1 logger.LoggingClient)) *MockDeviceExtDBClientInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig), args[1].(logger.LoggingClient))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDbClient_Call) Return(_a0 redis.DeviceExtDBClientInterface) *MockDeviceExtDBClientInterface_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDbClient_Call) RunAndReturn(run func(*db.DatabaseConfig, logger.LoggingClient) redis.DeviceExtDBClientInterface) *MockDeviceExtDBClientInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceById provides a mock function with given fields: deviceId
func (_m *MockDeviceExtDBClientInterface) GetDeviceById(deviceId string) (dto.DeviceObject, errors.HedgeError) {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceById")
	}

	var r0 dto.DeviceObject
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.DeviceObject, errors.HedgeError)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.DeviceObject); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Get(0).(dto.DeviceObject)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceById'
type MockDeviceExtDBClientInterface_GetDeviceById_Call struct {
	*mock.Call
}

// GetDeviceById is a helper method to define mock.On call
//   - deviceId string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceById(deviceId interface{}) *MockDeviceExtDBClientInterface_GetDeviceById_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceById_Call{Call: _e.mock.On("GetDeviceById", deviceId)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceById_Call) Run(run func(deviceId string)) *MockDeviceExtDBClientInterface_GetDeviceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceById_Call) Return(_a0 dto.DeviceObject, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceById_Call) RunAndReturn(run func(string) (dto.DeviceObject, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceByName provides a mock function with given fields: key
func (_m *MockDeviceExtDBClientInterface) GetDeviceByName(key string) ([]string, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceByName")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]string, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceByName'
type MockDeviceExtDBClientInterface_GetDeviceByName_Call struct {
	*mock.Call
}

// GetDeviceByName is a helper method to define mock.On call
//   - key string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceByName(key interface{}) *MockDeviceExtDBClientInterface_GetDeviceByName_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceByName_Call{Call: _e.mock.On("GetDeviceByName", key)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceByName_Call) Run(run func(key string)) *MockDeviceExtDBClientInterface_GetDeviceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceByName_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceByName_Call) RunAndReturn(run func(string) ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceContextualAttributes provides a mock function with given fields: deviceName
func (_m *MockDeviceExtDBClientInterface) GetDeviceContextualAttributes(deviceName string) (map[string]interface{}, errors.HedgeError) {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceContextualAttributes")
	}

	var r0 map[string]interface{}
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, errors.HedgeError)); ok {
		return rf(deviceName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceContextualAttributes'
type MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call struct {
	*mock.Call
}

// GetDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceContextualAttributes(deviceName interface{}) *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call{Call: _e.mock.On("GetDeviceContextualAttributes", deviceName)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call) Run(run func(deviceName string)) *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call) Return(_a0 map[string]interface{}, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call) RunAndReturn(run func(string) (map[string]interface{}, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceCount provides a mock function with given fields:
func (_m *MockDeviceExtDBClientInterface) GetDeviceCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockDeviceExtDBClientInterface_GetDeviceCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceCount'
type MockDeviceExtDBClientInterface_GetDeviceCount_Call struct {
	*mock.Call
}

// GetDeviceCount is a helper method to define mock.On call
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceCount() *MockDeviceExtDBClientInterface_GetDeviceCount_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceCount_Call{Call: _e.mock.On("GetDeviceCount")}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceCount_Call) Run(run func()) *MockDeviceExtDBClientInterface_GetDeviceCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceCount_Call) Return(_a0 int) *MockDeviceExtDBClientInterface_GetDeviceCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceCount_Call) RunAndReturn(run func() int) *MockDeviceExtDBClientInterface_GetDeviceCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceExt provides a mock function with given fields: deviceName
func (_m *MockDeviceExtDBClientInterface) GetDeviceExt(deviceName string) ([]dto.DeviceExt, errors.HedgeError) {
	ret := _m.Called(deviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceExt")
	}

	var r0 []dto.DeviceExt
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.DeviceExt, errors.HedgeError)); ok {
		return rf(deviceName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.DeviceExt); ok {
		r0 = rf(deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DeviceExt)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(deviceName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceExt'
type MockDeviceExtDBClientInterface_GetDeviceExt_Call struct {
	*mock.Call
}

// GetDeviceExt is a helper method to define mock.On call
//   - deviceName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceExt(deviceName interface{}) *MockDeviceExtDBClientInterface_GetDeviceExt_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceExt_Call{Call: _e.mock.On("GetDeviceExt", deviceName)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExt_Call) Run(run func(deviceName string)) *MockDeviceExtDBClientInterface_GetDeviceExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExt_Call) Return(_a0 []dto.DeviceExt, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceExt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExt_Call) RunAndReturn(run func(string) ([]dto.DeviceExt, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceExt_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceExtensionInProfile provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) GetDeviceExtensionInProfile(profileName string) ([]dto.DeviceExtension, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceExtensionInProfile")
	}

	var r0 []dto.DeviceExtension
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.DeviceExtension, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.DeviceExtension); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DeviceExtension)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceExtensionInProfile'
type MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call struct {
	*mock.Call
}

// GetDeviceExtensionInProfile is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceExtensionInProfile(profileName interface{}) *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call{Call: _e.mock.On("GetDeviceExtensionInProfile", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call) Return(_a0 []dto.DeviceExtension, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call) RunAndReturn(run func(string) ([]dto.DeviceExtension, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceExtensionInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceIdsUsingFilters provides a mock function with given fields: id
func (_m *MockDeviceExtDBClientInterface) GetDeviceIdsUsingFilters(id []string) ([]string, errors.HedgeError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceIdsUsingFilters")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) ([]string, errors.HedgeError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceIdsUsingFilters'
type MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call struct {
	*mock.Call
}

// GetDeviceIdsUsingFilters is a helper method to define mock.On call
//   - id []string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDeviceIdsUsingFilters(id interface{}) *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call {
	return &MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call{Call: _e.mock.On("GetDeviceIdsUsingFilters", id)}
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call) Run(run func(id []string)) *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call) RunAndReturn(run func([]string) ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDeviceIdsUsingFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevices provides a mock function with given fields: start, end
func (_m *MockDeviceExtDBClientInterface) GetDevices(start int, end int) ([]dtos.Device, errors.HedgeError) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []dtos.Device
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(int, int) ([]dtos.Device, errors.HedgeError)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(int, int) []dtos.Device); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) errors.HedgeError); ok {
		r1 = rf(start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevices'
type MockDeviceExtDBClientInterface_GetDevices_Call struct {
	*mock.Call
}

// GetDevices is a helper method to define mock.On call
//   - start int
//   - end int
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDevices(start interface{}, end interface{}) *MockDeviceExtDBClientInterface_GetDevices_Call {
	return &MockDeviceExtDBClientInterface_GetDevices_Call{Call: _e.mock.On("GetDevices", start, end)}
}

func (_c *MockDeviceExtDBClientInterface_GetDevices_Call) Run(run func(start int, end int)) *MockDeviceExtDBClientInterface_GetDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDevices_Call) Return(_a0 []dtos.Device, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDevices_Call) RunAndReturn(run func(int, int) ([]dtos.Device, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesUsingIds provides a mock function with given fields: ids
func (_m *MockDeviceExtDBClientInterface) GetDevicesUsingIds(ids []string) ([]dtos.Device, errors.HedgeError) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesUsingIds")
	}

	var r0 []dtos.Device
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) ([]dtos.Device, errors.HedgeError)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []dtos.Device); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.Device)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesUsingIds'
type MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call struct {
	*mock.Call
}

// GetDevicesUsingIds is a helper method to define mock.On call
//   - ids []string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDevicesUsingIds(ids interface{}) *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call {
	return &MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call{Call: _e.mock.On("GetDevicesUsingIds", ids)}
}

func (_c *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call) Run(run func(ids []string)) *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call) Return(_a0 []dtos.Device, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call) RunAndReturn(run func([]string) ([]dtos.Device, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDevicesUsingIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetDigitalTwin provides a mock function with given fields: sceneId
func (_m *MockDeviceExtDBClientInterface) GetDigitalTwin(sceneId string) (dto.Scene, errors.HedgeError) {
	ret := _m.Called(sceneId)

	if len(ret) == 0 {
		panic("no return value specified for GetDigitalTwin")
	}

	var r0 dto.Scene
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Scene, errors.HedgeError)); ok {
		return rf(sceneId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Scene); ok {
		r0 = rf(sceneId)
	} else {
		r0 = ret.Get(0).(dto.Scene)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(sceneId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDigitalTwin'
type MockDeviceExtDBClientInterface_GetDigitalTwin_Call struct {
	*mock.Call
}

// GetDigitalTwin is a helper method to define mock.On call
//   - sceneId string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDigitalTwin(sceneId interface{}) *MockDeviceExtDBClientInterface_GetDigitalTwin_Call {
	return &MockDeviceExtDBClientInterface_GetDigitalTwin_Call{Call: _e.mock.On("GetDigitalTwin", sceneId)}
}

func (_c *MockDeviceExtDBClientInterface_GetDigitalTwin_Call) Run(run func(sceneId string)) *MockDeviceExtDBClientInterface_GetDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDigitalTwin_Call) Return(_a0 dto.Scene, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDigitalTwin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDigitalTwin_Call) RunAndReturn(run func(string) (dto.Scene, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownsamplingConfig provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) GetDownsamplingConfig(profileName string) (*dto.DownsamplingConfig, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetDownsamplingConfig")
	}

	var r0 *dto.DownsamplingConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*dto.DownsamplingConfig, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.DownsamplingConfig); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DownsamplingConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownsamplingConfig'
type MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call struct {
	*mock.Call
}

// GetDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetDownsamplingConfig(profileName interface{}) *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call {
	return &MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call{Call: _e.mock.On("GetDownsamplingConfig", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call) Return(_a0 *dto.DownsamplingConfig, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call) RunAndReturn(run func(string) (*dto.DownsamplingConfig, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterIdsByName provides a mock function with given fields: key, names
func (_m *MockDeviceExtDBClientInterface) GetFilterIdsByName(key string, names string) ([]string, errors.HedgeError) {
	ret := _m.Called(key, names)

	if len(ret) == 0 {
		panic("no return value specified for GetFilterIdsByName")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]string, errors.HedgeError)); ok {
		return rf(key, names)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(key, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(key, names)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetFilterIdsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterIdsByName'
type MockDeviceExtDBClientInterface_GetFilterIdsByName_Call struct {
	*mock.Call
}

// GetFilterIdsByName is a helper method to define mock.On call
//   - key string
//   - names string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetFilterIdsByName(key interface{}, names interface{}) *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call {
	return &MockDeviceExtDBClientInterface_GetFilterIdsByName_Call{Call: _e.mock.On("GetFilterIdsByName", key, names)}
}

func (_c *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call) Run(run func(key string, names string)) *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call) RunAndReturn(run func(string, string) ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetFilterIdsByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageIds provides a mock function with given fields:
func (_m *MockDeviceExtDBClientInterface) GetImageIds() ([]string, errors.HedgeError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageIds")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func() ([]string, errors.HedgeError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() errors.HedgeError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetImageIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageIds'
type MockDeviceExtDBClientInterface_GetImageIds_Call struct {
	*mock.Call
}

// GetImageIds is a helper method to define mock.On call
func (_e *MockDeviceExtDBClientInterface_Expecter) GetImageIds() *MockDeviceExtDBClientInterface_GetImageIds_Call {
	return &MockDeviceExtDBClientInterface_GetImageIds_Call{Call: _e.mock.On("GetImageIds")}
}

func (_c *MockDeviceExtDBClientInterface_GetImageIds_Call) Run(run func()) *MockDeviceExtDBClientInterface_GetImageIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetImageIds_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetImageIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetImageIds_Call) RunAndReturn(run func() ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetImageIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetImageObject provides a mock function with given fields: image
func (_m *MockDeviceExtDBClientInterface) GetImageObject(image dto.Image) (dto.Image, errors.HedgeError) {
	ret := _m.Called(image)

	if len(ret) == 0 {
		panic("no return value specified for GetImageObject")
	}

	var r0 dto.Image
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Image) (dto.Image, errors.HedgeError)); ok {
		return rf(image)
	}
	if rf, ok := ret.Get(0).(func(dto.Image) dto.Image); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Get(0).(dto.Image)
	}

	if rf, ok := ret.Get(1).(func(dto.Image) errors.HedgeError); ok {
		r1 = rf(image)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetImageObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImageObject'
type MockDeviceExtDBClientInterface_GetImageObject_Call struct {
	*mock.Call
}

// GetImageObject is a helper method to define mock.On call
//   - image dto.Image
func (_e *MockDeviceExtDBClientInterface_Expecter) GetImageObject(image interface{}) *MockDeviceExtDBClientInterface_GetImageObject_Call {
	return &MockDeviceExtDBClientInterface_GetImageObject_Call{Call: _e.mock.On("GetImageObject", image)}
}

func (_c *MockDeviceExtDBClientInterface_GetImageObject_Call) Run(run func(image dto.Image)) *MockDeviceExtDBClientInterface_GetImageObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Image))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetImageObject_Call) Return(_a0 dto.Image, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetImageObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetImageObject_Call) RunAndReturn(run func(dto.Image) (dto.Image, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetImageObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocationById provides a mock function with given fields: id
func (_m *MockDeviceExtDBClientInterface) GetLocationById(id string) (dto.Location, errors.HedgeError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationById")
	}

	var r0 dto.Location
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (dto.Location, errors.HedgeError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Location); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.Location)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetLocationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationById'
type MockDeviceExtDBClientInterface_GetLocationById_Call struct {
	*mock.Call
}

// GetLocationById is a helper method to define mock.On call
//   - id string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetLocationById(id interface{}) *MockDeviceExtDBClientInterface_GetLocationById_Call {
	return &MockDeviceExtDBClientInterface_GetLocationById_Call{Call: _e.mock.On("GetLocationById", id)}
}

func (_c *MockDeviceExtDBClientInterface_GetLocationById_Call) Run(run func(id string)) *MockDeviceExtDBClientInterface_GetLocationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetLocationById_Call) Return(_a0 dto.Location, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetLocationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetLocationById_Call) RunAndReturn(run func(string) (dto.Location, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetLocationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocations provides a mock function with given fields: key
func (_m *MockDeviceExtDBClientInterface) GetLocations(key string) ([]dto.Location, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetLocations")
	}

	var r0 []dto.Location
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]dto.Location, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Location); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocations'
type MockDeviceExtDBClientInterface_GetLocations_Call struct {
	*mock.Call
}

// GetLocations is a helper method to define mock.On call
//   - key string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetLocations(key interface{}) *MockDeviceExtDBClientInterface_GetLocations_Call {
	return &MockDeviceExtDBClientInterface_GetLocations_Call{Call: _e.mock.On("GetLocations", key)}
}

func (_c *MockDeviceExtDBClientInterface_GetLocations_Call) Run(run func(key string)) *MockDeviceExtDBClientInterface_GetLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetLocations_Call) Return(_a0 []dto.Location, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetLocations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetLocations_Call) RunAndReturn(run func(string) ([]dto.Location, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetLocations_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function with given fields: key
func (_m *MockDeviceExtDBClientInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockDeviceExtDBClientInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetMetricCounter(key interface{}) *MockDeviceExtDBClientInterface_GetMetricCounter_Call {
	return &MockDeviceExtDBClientInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockDeviceExtDBClientInterface_GetMetricCounter_Call) Run(run func(key string)) *MockDeviceExtDBClientInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetMetricCounter_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetMetricCounter_Call) RunAndReturn(run func(string) (int64, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeRawDataConfigByNodeID provides a mock function with given fields: nodeId
func (_m *MockDeviceExtDBClientInterface) GetNodeRawDataConfigByNodeID(nodeId string) (*dto.NodeRawDataConfig, errors.HedgeError) {
	ret := _m.Called(nodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeRawDataConfigByNodeID")
	}

	var r0 *dto.NodeRawDataConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*dto.NodeRawDataConfig, errors.HedgeError)); ok {
		return rf(nodeId)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.NodeRawDataConfig); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.NodeRawDataConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(nodeId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeRawDataConfigByNodeID'
type MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call struct {
	*mock.Call
}

// GetNodeRawDataConfigByNodeID is a helper method to define mock.On call
//   - nodeId string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetNodeRawDataConfigByNodeID(nodeId interface{}) *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call {
	return &MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call{Call: _e.mock.On("GetNodeRawDataConfigByNodeID", nodeId)}
}

func (_c *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call) Run(run func(nodeId string)) *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call) Return(_a0 *dto.NodeRawDataConfig, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call) RunAndReturn(run func(string) (*dto.NodeRawDataConfig, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetNodeRawDataConfigByNodeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileContextualAttributes provides a mock function with given fields: profileName
func (_m *MockDeviceExtDBClientInterface) GetProfileContextualAttributes(profileName string) ([]string, errors.HedgeError) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileContextualAttributes")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]string, errors.HedgeError)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(profileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileContextualAttributes'
type MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call struct {
	*mock.Call
}

// GetProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetProfileContextualAttributes(profileName interface{}) *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call{Call: _e.mock.On("GetProfileContextualAttributes", profileName)}
}

func (_c *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call) Run(run func(profileName string)) *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call) RunAndReturn(run func(string) ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfilesByAttribute provides a mock function with given fields: attributes
func (_m *MockDeviceExtDBClientInterface) GetProfilesByAttribute(attributes []string) ([]string, errors.HedgeError) {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for GetProfilesByAttribute")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]string) ([]string, errors.HedgeError)); ok {
		return rf(attributes)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) errors.HedgeError); ok {
		r1 = rf(attributes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfilesByAttribute'
type MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call struct {
	*mock.Call
}

// GetProfilesByAttribute is a helper method to define mock.On call
//   - attributes []string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetProfilesByAttribute(attributes interface{}) *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call {
	return &MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call{Call: _e.mock.On("GetProfilesByAttribute", attributes)}
}

func (_c *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call) Run(run func(attributes []string)) *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call) RunAndReturn(run func([]string) ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetProfilesByAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolsForService provides a mock function with given fields: svcName
func (_m *MockDeviceExtDBClientInterface) GetProtocolsForService(svcName string) (map[string]string, errors.HedgeError) {
	ret := _m.Called(svcName)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolsForService")
	}

	var r0 map[string]string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (map[string]string, errors.HedgeError)); ok {
		return rf(svcName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(svcName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(svcName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetProtocolsForService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolsForService'
type MockDeviceExtDBClientInterface_GetProtocolsForService_Call struct {
	*mock.Call
}

// GetProtocolsForService is a helper method to define mock.On call
//   - svcName string
func (_e *MockDeviceExtDBClientInterface_Expecter) GetProtocolsForService(svcName interface{}) *MockDeviceExtDBClientInterface_GetProtocolsForService_Call {
	return &MockDeviceExtDBClientInterface_GetProtocolsForService_Call{Call: _e.mock.On("GetProtocolsForService", svcName)}
}

func (_c *MockDeviceExtDBClientInterface_GetProtocolsForService_Call) Run(run func(svcName string)) *MockDeviceExtDBClientInterface_GetProtocolsForService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProtocolsForService_Call) Return(_a0 map[string]string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetProtocolsForService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetProtocolsForService_Call) RunAndReturn(run func(string) (map[string]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetProtocolsForService_Call {
	_c.Call.Return(run)
	return _c
}

// GetSceneIds provides a mock function with given fields:
func (_m *MockDeviceExtDBClientInterface) GetSceneIds() ([]string, errors.HedgeError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSceneIds")
	}

	var r0 []string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func() ([]string, errors.HedgeError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() errors.HedgeError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_GetSceneIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSceneIds'
type MockDeviceExtDBClientInterface_GetSceneIds_Call struct {
	*mock.Call
}

// GetSceneIds is a helper method to define mock.On call
func (_e *MockDeviceExtDBClientInterface_Expecter) GetSceneIds() *MockDeviceExtDBClientInterface_GetSceneIds_Call {
	return &MockDeviceExtDBClientInterface_GetSceneIds_Call{Call: _e.mock.On("GetSceneIds")}
}

func (_c *MockDeviceExtDBClientInterface_GetSceneIds_Call) Run(run func()) *MockDeviceExtDBClientInterface_GetSceneIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetSceneIds_Call) Return(_a0 []string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_GetSceneIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_GetSceneIds_Call) RunAndReturn(run func() ([]string, errors.HedgeError)) *MockDeviceExtDBClientInterface_GetSceneIds_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function with given fields: key, value
func (_m *MockDeviceExtDBClientInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = rf(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockDeviceExtDBClientInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call {
	return &MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(string, int64) (int64, errors.HedgeError)) *MockDeviceExtDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// SaveImageObject provides a mock function with given fields: image
func (_m *MockDeviceExtDBClientInterface) SaveImageObject(image dto.Image) errors.HedgeError {
	ret := _m.Called(image)

	if len(ret) == 0 {
		panic("no return value specified for SaveImageObject")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Image) errors.HedgeError); ok {
		r0 = rf(image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_SaveImageObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveImageObject'
type MockDeviceExtDBClientInterface_SaveImageObject_Call struct {
	*mock.Call
}

// SaveImageObject is a helper method to define mock.On call
//   - image dto.Image
func (_e *MockDeviceExtDBClientInterface_Expecter) SaveImageObject(image interface{}) *MockDeviceExtDBClientInterface_SaveImageObject_Call {
	return &MockDeviceExtDBClientInterface_SaveImageObject_Call{Call: _e.mock.On("SaveImageObject", image)}
}

func (_c *MockDeviceExtDBClientInterface_SaveImageObject_Call) Run(run func(image dto.Image)) *MockDeviceExtDBClientInterface_SaveImageObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Image))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_SaveImageObject_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_SaveImageObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_SaveImageObject_Call) RunAndReturn(run func(dto.Image) errors.HedgeError) *MockDeviceExtDBClientInterface_SaveImageObject_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function with given fields: key, value
func (_m *MockDeviceExtDBClientInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockDeviceExtDBClientInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockDeviceExtDBClientInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockDeviceExtDBClientInterface_SetMetricCounter_Call {
	return &MockDeviceExtDBClientInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockDeviceExtDBClientInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockDeviceExtDBClientInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_SetMetricCounter_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_SetMetricCounter_Call) RunAndReturn(run func(string, int64) errors.HedgeError) *MockDeviceExtDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssociation provides a mock function with given fields: nodeA, nodeAType, associationNode
func (_m *MockDeviceExtDBClientInterface) UpdateAssociation(nodeA string, nodeAType string, associationNode []dto.AssociationNode) (string, errors.HedgeError) {
	ret := _m.Called(nodeA, nodeAType, associationNode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssociation")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) (string, errors.HedgeError)); ok {
		return rf(nodeA, nodeAType, associationNode)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.AssociationNode) string); ok {
		r0 = rf(nodeA, nodeAType, associationNode)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.AssociationNode) errors.HedgeError); ok {
		r1 = rf(nodeA, nodeAType, associationNode)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_UpdateAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssociation'
type MockDeviceExtDBClientInterface_UpdateAssociation_Call struct {
	*mock.Call
}

// UpdateAssociation is a helper method to define mock.On call
//   - nodeA string
//   - nodeAType string
//   - associationNode []dto.AssociationNode
func (_e *MockDeviceExtDBClientInterface_Expecter) UpdateAssociation(nodeA interface{}, nodeAType interface{}, associationNode interface{}) *MockDeviceExtDBClientInterface_UpdateAssociation_Call {
	return &MockDeviceExtDBClientInterface_UpdateAssociation_Call{Call: _e.mock.On("UpdateAssociation", nodeA, nodeAType, associationNode)}
}

func (_c *MockDeviceExtDBClientInterface_UpdateAssociation_Call) Run(run func(nodeA string, nodeAType string, associationNode []dto.AssociationNode)) *MockDeviceExtDBClientInterface_UpdateAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.AssociationNode))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateAssociation_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_UpdateAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateAssociation_Call) RunAndReturn(run func(string, string, []dto.AssociationNode) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_UpdateAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceExt provides a mock function with given fields: deviceName, profileName, deviceExts
func (_m *MockDeviceExtDBClientInterface) UpdateDeviceExt(deviceName string, profileName string, deviceExts []dto.DeviceExt) (string, errors.HedgeError) {
	ret := _m.Called(deviceName, profileName, deviceExts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceExt")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, []dto.DeviceExt) (string, errors.HedgeError)); ok {
		return rf(deviceName, profileName, deviceExts)
	}
	if rf, ok := ret.Get(0).(func(string, string, []dto.DeviceExt) string); ok {
		r0 = rf(deviceName, profileName, deviceExts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []dto.DeviceExt) errors.HedgeError); ok {
		r1 = rf(deviceName, profileName, deviceExts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_UpdateDeviceExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceExt'
type MockDeviceExtDBClientInterface_UpdateDeviceExt_Call struct {
	*mock.Call
}

// UpdateDeviceExt is a helper method to define mock.On call
//   - deviceName string
//   - profileName string
//   - deviceExts []dto.DeviceExt
func (_e *MockDeviceExtDBClientInterface_Expecter) UpdateDeviceExt(deviceName interface{}, profileName interface{}, deviceExts interface{}) *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call {
	return &MockDeviceExtDBClientInterface_UpdateDeviceExt_Call{Call: _e.mock.On("UpdateDeviceExt", deviceName, profileName, deviceExts)}
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call) Run(run func(deviceName string, profileName string, deviceExts []dto.DeviceExt)) *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]dto.DeviceExt))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call) RunAndReturn(run func(string, string, []dto.DeviceExt) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_UpdateDeviceExt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceExtensionsInProfile provides a mock function with given fields: profileName, deviceExtns
func (_m *MockDeviceExtDBClientInterface) UpdateDeviceExtensionsInProfile(profileName string, deviceExtns []dto.DeviceExtension) (string, errors.HedgeError) {
	ret := _m.Called(profileName, deviceExtns)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceExtensionsInProfile")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) (string, errors.HedgeError)); ok {
		return rf(profileName, deviceExtns)
	}
	if rf, ok := ret.Get(0).(func(string, []dto.DeviceExtension) string); ok {
		r0 = rf(profileName, deviceExtns)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []dto.DeviceExtension) errors.HedgeError); ok {
		r1 = rf(profileName, deviceExtns)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceExtensionsInProfile'
type MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call struct {
	*mock.Call
}

// UpdateDeviceExtensionsInProfile is a helper method to define mock.On call
//   - profileName string
//   - deviceExtns []dto.DeviceExtension
func (_e *MockDeviceExtDBClientInterface_Expecter) UpdateDeviceExtensionsInProfile(profileName interface{}, deviceExtns interface{}) *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call {
	return &MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call{Call: _e.mock.On("UpdateDeviceExtensionsInProfile", profileName, deviceExtns)}
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call) Run(run func(profileName string, deviceExtns []dto.DeviceExtension)) *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.DeviceExtension))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call) Return(_a0 string, _a1 errors.HedgeError) *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call) RunAndReturn(run func(string, []dto.DeviceExtension) (string, errors.HedgeError)) *MockDeviceExtDBClientInterface_UpdateDeviceExtensionsInProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDigitalTwin provides a mock function with given fields: scene
func (_m *MockDeviceExtDBClientInterface) UpdateDigitalTwin(scene dto.Scene) errors.HedgeError {
	ret := _m.Called(scene)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDigitalTwin")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(dto.Scene) errors.HedgeError); ok {
		r0 = rf(scene)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDigitalTwin'
type MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call struct {
	*mock.Call
}

// UpdateDigitalTwin is a helper method to define mock.On call
//   - scene dto.Scene
func (_e *MockDeviceExtDBClientInterface_Expecter) UpdateDigitalTwin(scene interface{}) *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call {
	return &MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call{Call: _e.mock.On("UpdateDigitalTwin", scene)}
}

func (_c *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call) Run(run func(scene dto.Scene)) *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Scene))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call) RunAndReturn(run func(dto.Scene) errors.HedgeError) *MockDeviceExtDBClientInterface_UpdateDigitalTwin_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDeviceContextualAttributes provides a mock function with given fields: deviceName, data
func (_m *MockDeviceExtDBClientInterface) UpsertDeviceContextualAttributes(deviceName string, data map[string]interface{}) errors.HedgeError {
	ret := _m.Called(deviceName, data)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDeviceContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) errors.HedgeError); ok {
		r0 = rf(deviceName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDeviceContextualAttributes'
type MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call struct {
	*mock.Call
}

// UpsertDeviceContextualAttributes is a helper method to define mock.On call
//   - deviceName string
//   - data map[string]interface{}
func (_e *MockDeviceExtDBClientInterface_Expecter) UpsertDeviceContextualAttributes(deviceName interface{}, data interface{}) *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call{Call: _e.mock.On("UpsertDeviceContextualAttributes", deviceName, data)}
}

func (_c *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call) Run(run func(deviceName string, data map[string]interface{})) *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call) RunAndReturn(run func(string, map[string]interface{}) errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertDeviceContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDownsamplingConfig provides a mock function with given fields: profileName, downsamplingConfig
func (_m *MockDeviceExtDBClientInterface) UpsertDownsamplingConfig(profileName string, downsamplingConfig *dto.DownsamplingConfig) errors.HedgeError {
	ret := _m.Called(profileName, downsamplingConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDownsamplingConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, *dto.DownsamplingConfig) errors.HedgeError); ok {
		r0 = rf(profileName, downsamplingConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDownsamplingConfig'
type MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call struct {
	*mock.Call
}

// UpsertDownsamplingConfig is a helper method to define mock.On call
//   - profileName string
//   - downsamplingConfig *dto.DownsamplingConfig
func (_e *MockDeviceExtDBClientInterface_Expecter) UpsertDownsamplingConfig(profileName interface{}, downsamplingConfig interface{}) *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call {
	return &MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call{Call: _e.mock.On("UpsertDownsamplingConfig", profileName, downsamplingConfig)}
}

func (_c *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call) Run(run func(profileName string, downsamplingConfig *dto.DownsamplingConfig)) *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*dto.DownsamplingConfig))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call) RunAndReturn(run func(string, *dto.DownsamplingConfig) errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertDownsamplingConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNodeRawDataConfigs provides a mock function with given fields: nodeRawDataConfigs, existingConfigsToReplace
func (_m *MockDeviceExtDBClientInterface) UpsertNodeRawDataConfigs(nodeRawDataConfigs []dto.NodeRawDataConfig, existingConfigsToReplace []dto.NodeRawDataConfig) errors.HedgeError {
	ret := _m.Called(nodeRawDataConfigs, existingConfigsToReplace)

	if len(ret) == 0 {
		panic("no return value specified for UpsertNodeRawDataConfigs")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func([]dto.NodeRawDataConfig, []dto.NodeRawDataConfig) errors.HedgeError); ok {
		r0 = rf(nodeRawDataConfigs, existingConfigsToReplace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNodeRawDataConfigs'
type MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call struct {
	*mock.Call
}

// UpsertNodeRawDataConfigs is a helper method to define mock.On call
//   - nodeRawDataConfigs []dto.NodeRawDataConfig
//   - existingConfigsToReplace []dto.NodeRawDataConfig
func (_e *MockDeviceExtDBClientInterface_Expecter) UpsertNodeRawDataConfigs(nodeRawDataConfigs interface{}, existingConfigsToReplace interface{}) *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call {
	return &MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call{Call: _e.mock.On("UpsertNodeRawDataConfigs", nodeRawDataConfigs, existingConfigsToReplace)}
}

func (_c *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call) Run(run func(nodeRawDataConfigs []dto.NodeRawDataConfig, existingConfigsToReplace []dto.NodeRawDataConfig)) *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]dto.NodeRawDataConfig), args[1].([]dto.NodeRawDataConfig))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call) RunAndReturn(run func([]dto.NodeRawDataConfig, []dto.NodeRawDataConfig) errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertNodeRawDataConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertProfileContextualAttributes provides a mock function with given fields: profileName, bizAttributes
func (_m *MockDeviceExtDBClientInterface) UpsertProfileContextualAttributes(profileName string, bizAttributes []string) errors.HedgeError {
	ret := _m.Called(profileName, bizAttributes)

	if len(ret) == 0 {
		panic("no return value specified for UpsertProfileContextualAttributes")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, []string) errors.HedgeError); ok {
		r0 = rf(profileName, bizAttributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertProfileContextualAttributes'
type MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call struct {
	*mock.Call
}

// UpsertProfileContextualAttributes is a helper method to define mock.On call
//   - profileName string
//   - bizAttributes []string
func (_e *MockDeviceExtDBClientInterface_Expecter) UpsertProfileContextualAttributes(profileName interface{}, bizAttributes interface{}) *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call {
	return &MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call{Call: _e.mock.On("UpsertProfileContextualAttributes", profileName, bizAttributes)}
}

func (_c *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call) Run(run func(profileName string, bizAttributes []string)) *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call) Return(_a0 errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call) RunAndReturn(run func(string, []string) errors.HedgeError) *MockDeviceExtDBClientInterface_UpsertProfileContextualAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceExtDBClientInterface creates a new instance of MockDeviceExtDBClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceExtDBClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceExtDBClientInterface {
	mock := &MockDeviceExtDBClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
