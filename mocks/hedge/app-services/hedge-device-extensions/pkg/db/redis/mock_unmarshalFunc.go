// Code generated by mockery v2.38.0. DO NOT EDIT.

package redis

import mock "github.com/stretchr/testify/mock"

// MockunmarshalFunc is an autogenerated mock type for the unmarshalFunc type
type MockunmarshalFunc struct {
	mock.Mock
}

type MockunmarshalFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockunmarshalFunc) EXPECT() *MockunmarshalFunc_Expecter {
	return &MockunmarshalFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: in, out
func (_m *MockunmarshalFunc) Execute(in []byte, out interface{}) error {
	ret := _m.Called(in, out)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockunmarshalFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockunmarshalFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - in []byte
//   - out interface{}
func (_e *MockunmarshalFunc_Expecter) Execute(in interface{}, out interface{}) *MockunmarshalFunc_Execute_Call {
	return &MockunmarshalFunc_Execute_Call{Call: _e.mock.On("Execute", in, out)}
}

func (_c *MockunmarshalFunc_Execute_Call) Run(run func(in []byte, out interface{})) *MockunmarshalFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *MockunmarshalFunc_Execute_Call) Return(err error) *MockunmarshalFunc_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockunmarshalFunc_Execute_Call) RunAndReturn(run func([]byte, interface{}) error) *MockunmarshalFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockunmarshalFunc creates a new instance of MockunmarshalFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockunmarshalFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockunmarshalFunc {
	mock := &MockunmarshalFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
