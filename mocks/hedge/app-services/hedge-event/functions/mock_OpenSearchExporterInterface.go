// Code generated by mockery v2.38.0. DO NOT EDIT.

package functions

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockOpenSearchExporterInterface is an autogenerated mock type for the ElasticEventExporterInterface type
type MockOpenSearchExporterInterface struct {
	mock.Mock
}

type MockElasticEventExporterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpenSearchExporterInterface) EXPECT() *MockElasticEventExporterInterface_Expecter {
	return &MockElasticEventExporterInterface_Expecter{mock: &_m.Mock}
}

// SaveEventToOpenSearch provides a mock function with given fields: ctx, data
func (_m *MockOpenSearchExporterInterface) SaveEventToOpenSearch(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveEventToOpenSearch")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockElasticEventExporterInterface_SaveEventToOpenSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEventToOpenSearch'
type MockElasticEventExporterInterface_SaveEventToOpenSearch_Call struct {
	*mock.Call
}

// SaveEventToElastic is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockElasticEventExporterInterface_Expecter) SaveEventToElastic(ctx interface{}, data interface{}) *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call {
	return &MockElasticEventExporterInterface_SaveEventToOpenSearch_Call{Call: _e.mock.On("SaveEventToOpenSearch", ctx, data)}
}

func (_c *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call) Return(_a0 bool, _a1 interface{}) *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockElasticEventExporterInterface_SaveEventToOpenSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockElasticEventExporterInterface creates a new instance of MockOpenSearchExporterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockElasticEventExporterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOpenSearchExporterInterface {
	mock := &MockOpenSearchExporterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
