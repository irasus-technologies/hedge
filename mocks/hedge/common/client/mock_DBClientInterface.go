// Code generated by mockery v2.38.0. DO NOT EDIT.

package client

import (
	client "hedge/common/client"
	db "hedge/common/db"

	errors "hedge/common/errors"

	mock "github.com/stretchr/testify/mock"

	redsync "github.com/go-redsync/redsync/v4"
)

// MockDBClientInterface is an autogenerated mock type for the DBClientInterface type
type MockDBClientInterface struct {
	mock.Mock
}

type MockDBClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClientInterface) EXPECT() *MockDBClientInterface_Expecter {
	return &MockDBClientInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function with given fields: lockName
func (_m *MockDBClientInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _m.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return rf(lockName)
	}
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDBClientInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockDBClientInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName string
func (_e *MockDBClientInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockDBClientInterface_AcquireRedisLock_Call {
	return &MockDBClientInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) Return(_a0 *redsync.Mutex, _a1 errors.HedgeError) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) RunAndReturn(run func(string) (*redsync.Mutex, errors.HedgeError)) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields: dbConfig
func (_m *MockDBClientInterface) GetDbClient(dbConfig *db.DatabaseConfig) client.DBClientInterface {
	ret := _m.Called(dbConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 client.DBClientInterface
	if rf, ok := ret.Get(0).(func(*db.DatabaseConfig) client.DBClientInterface); ok {
		r0 = rf(dbConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.DBClientInterface)
		}
	}

	return r0
}

// MockDBClientInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockDBClientInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig *db.DatabaseConfig
func (_e *MockDBClientInterface_Expecter) GetDbClient(dbConfig interface{}) *MockDBClientInterface_GetDbClient_Call {
	return &MockDBClientInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig)}
}

func (_c *MockDBClientInterface_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig)) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig))
	})
	return _c
}

func (_c *MockDBClientInterface_GetDbClient_Call) Return(_a0 client.DBClientInterface) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClientInterface_GetDbClient_Call) RunAndReturn(run func(*db.DatabaseConfig) client.DBClientInterface) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function with given fields: key
func (_m *MockDBClientInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDBClientInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockDBClientInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key string
func (_e *MockDBClientInterface_Expecter) GetMetricCounter(key interface{}) *MockDBClientInterface_GetMetricCounter_Call {
	return &MockDBClientInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) Run(run func(key string)) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) RunAndReturn(run func(string) (int64, errors.HedgeError)) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function with given fields: key, value
func (_m *MockDBClientInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = rf(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockDBClientInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockDBClientInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockDBClientInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockDBClientInterface_IncrMetricCounterBy_Call {
	return &MockDBClientInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(string, int64) (int64, errors.HedgeError)) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// PublishToRedisBus provides a mock function with given fields: topic, msg
func (_m *MockDBClientInterface) PublishToRedisBus(topic string, msg interface{}) error {
	ret := _m.Called(topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for PublishToRedisBus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDBClientInterface_PublishToRedisBus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishToRedisBus'
type MockDBClientInterface_PublishToRedisBus_Call struct {
	*mock.Call
}

// PublishToRedisBus is a helper method to define mock.On call
//   - topic string
//   - msg interface{}
func (_e *MockDBClientInterface_Expecter) PublishToRedisBus(topic interface{}, msg interface{}) *MockDBClientInterface_PublishToRedisBus_Call {
	return &MockDBClientInterface_PublishToRedisBus_Call{Call: _e.mock.On("PublishToRedisBus", topic, msg)}
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) Run(run func(topic string, msg interface{})) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) Return(_a0 error) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) RunAndReturn(run func(string, interface{}) error) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function with given fields: key, value
func (_m *MockDBClientInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockDBClientInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockDBClientInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockDBClientInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockDBClientInterface_SetMetricCounter_Call {
	return &MockDBClientInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) Return(_a0 errors.HedgeError) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) RunAndReturn(run func(string, int64) errors.HedgeError) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBClientInterface creates a new instance of MockDBClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClientInterface {
	mock := &MockDBClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
