// Code generated by mockery v2.38.0. DO NOT EDIT.

package client

import (
	"github.com/opensearch-project/opensearch-go/v4/opensearchapi"
	"hedge/common/dto"

	//esapi "github.com/elastic/go-elasticsearch/v8/esapi"
	mock "github.com/stretchr/testify/mock"
)

// MockElasticClientInterface is an autogenerated mock type for the ElasticClientInterface type
type MockElasticClientInterface struct {
	mock.Mock
}

type MockElasticClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockElasticClientInterface) EXPECT() *MockElasticClientInterface_Expecter {
	return &MockElasticClientInterface_Expecter{mock: &_m.Mock}
}

// BuildSearchRequest provides a mock function with given fields: luceneQuery, indexName
func (_m *MockElasticClientInterface) BuildSearchRequest(luceneQuery string, indexName string) opensearchapi.SearchReq {
	ret := _m.Called(luceneQuery, indexName)

	if len(ret) == 0 {
		panic("no return value specified for BuildSearchRequest")
	}

	var r0 opensearchapi.SearchReq
	if rf, ok := ret.Get(0).(func(string, string) opensearchapi.SearchReq); ok {
		r0 = rf(luceneQuery, indexName)
	} else {
		r0 = ret.Get(0).(opensearchapi.SearchReq)
	}

	return r0
}

// MockElasticClientInterface_BuildSearchRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSearchRequest'
type MockElasticClientInterface_BuildSearchRequest_Call struct {
	*mock.Call
}

// BuildSearchRequest is a helper method to define mock.On call
//   - luceneQuery string
//   - indexName string
func (_e *MockElasticClientInterface_Expecter) BuildSearchRequest(luceneQuery interface{}, indexName interface{}) *MockElasticClientInterface_BuildSearchRequest_Call {
	return &MockElasticClientInterface_BuildSearchRequest_Call{Call: _e.mock.On("BuildSearchRequest", luceneQuery, indexName)}
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) Run(run func(luceneQuery string, indexName string)) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) Return(_a0 opensearchapi.SearchReq) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) RunAndReturn(run func(string, string) opensearchapi.SearchReq) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToHedgeEvents provides a mock function with given fields: result
func (_m *MockElasticClientInterface) ConvertToHedgeEvents(result map[string]interface{}) ([]*dto.HedgeEvent, error) {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToHedgeEvents")
	}

	var r0 []*dto.HedgeEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]*dto.HedgeEvent, error)); ok {
		return rf(result)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*dto.HedgeEvent); ok {
		r0 = rf(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.HedgeEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElasticClientInterface_ConvertToHedgeEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToHedgeEvents'
type MockElasticClientInterface_ConvertToHedgeEvents_Call struct {
	*mock.Call
}

// ConvertToHedgeEvents is a helper method to define mock.On call
//   - result map[string]interface{}
func (_e *MockElasticClientInterface_Expecter) ConvertToHedgeEvents(result interface{}) *MockElasticClientInterface_ConvertToHedgeEvents_Call {
	return &MockElasticClientInterface_ConvertToHedgeEvents_Call{Call: _e.mock.On("ConvertToHedgeEvents", result)}
}

func (_c *MockElasticClientInterface_ConvertToHedgeEvents_Call) Run(run func(result map[string]interface{})) *MockElasticClientInterface_ConvertToHedgeEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockElasticClientInterface_ConvertToHedgeEvents_Call) Return(_a0 []*dto.HedgeEvent, _a1 error) *MockElasticClientInterface_ConvertToHedgeEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticClientInterface_ConvertToHedgeEvents_Call) RunAndReturn(run func(map[string]interface{}) ([]*dto.HedgeEvent, error)) *MockElasticClientInterface_ConvertToHedgeEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToCommandLogs provides a mock function with given fields: hitResults
func (_m *MockElasticClientInterface) ConvertToCommandLogs(hitResults map[string]interface{}) ([]*dto.CommandExecutionLog, error) {
	ret := _m.Called(hitResults)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToCommandLogs")
	}

	var r0 []*dto.CommandExecutionLog
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]*dto.CommandExecutionLog, error)); ok {
		return rf(hitResults)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []*dto.CommandExecutionLog); ok {
		r0 = rf(hitResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.CommandExecutionLog)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(hitResults)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElasticClientInterface_ConvertToCommandLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToCommandLogs'
type MockElasticClientInterface_ConvertToCommandLogs_Call struct {
	*mock.Call
}

// ConvertToCommandLogs is a helper method to define mock.On call
//   - hitResults map[string]interface{}
func (_e *MockElasticClientInterface_Expecter) ConvertToCommandLogs(hitResults interface{}) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	return &MockElasticClientInterface_ConvertToCommandLogs_Call{Call: _e.mock.On("ConvertToCommandLogs", hitResults)}
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) Run(run func(hitResults map[string]interface{})) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) Return(_a0 []*dto.CommandExecutionLog, _a1 error) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) RunAndReturn(run func(map[string]interface{}) ([]*dto.CommandExecutionLog, error)) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: req
func (_m *MockElasticClientInterface) Index(req opensearchapi.IndexReq) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(opensearchapi.IndexReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElasticClientInterface_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockElasticClientInterface_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - req esapi.IndexRequest
func (_e *MockElasticClientInterface_Expecter) Index(req interface{}) *MockElasticClientInterface_Index_Call {
	return &MockElasticClientInterface_Index_Call{Call: _e.mock.On("Index", req)}
}

func (_c *MockElasticClientInterface_Index_Call) Run(run func(req opensearchapi.IndexReq)) *MockElasticClientInterface_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(opensearchapi.IndexReq))
	})
	return _c
}

func (_c *MockElasticClientInterface_Index_Call) Return(_a0 error) *MockElasticClientInterface_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_Index_Call) RunAndReturn(run func(opensearchapi.IndexReq) error) *MockElasticClientInterface_Index_Call {
	_c.Call.Return(run)
	return _c
}

// IndexCommandLog provides a mock function with given fields: remediateAction
func (_m *MockElasticClientInterface) IndexCommandLog(remediateAction *dto.CommandExecutionLog) error {
	ret := _m.Called(remediateAction)

	if len(ret) == 0 {
		panic("no return value specified for IndexCommandLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.CommandExecutionLog) error); ok {
		r0 = rf(remediateAction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElasticClientInterface_IndexCommandLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexCommandLog'
type MockElasticClientInterface_IndexCommandLog_Call struct {
	*mock.Call
}

// IndexCommandLog is a helper method to define mock.On call
//   - remediateAction *models.CommandExecutionLog
func (_e *MockElasticClientInterface_Expecter) IndexCommandLog(remediateAction interface{}) *MockElasticClientInterface_IndexCommandLog_Call {
	return &MockElasticClientInterface_IndexCommandLog_Call{Call: _e.mock.On("IndexCommandLog", remediateAction)}
}

func (_c *MockElasticClientInterface_IndexCommandLog_Call) Run(run func(remediateAction *dto.CommandExecutionLog)) *MockElasticClientInterface_IndexCommandLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.CommandExecutionLog))
	})
	return _c
}

func (_c *MockElasticClientInterface_IndexCommandLog_Call) Return(_a0 error) *MockElasticClientInterface_IndexCommandLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_IndexCommandLog_Call) RunAndReturn(run func(*dto.CommandExecutionLog) error) *MockElasticClientInterface_IndexCommandLog_Call {
	_c.Call.Return(run)
	return _c
}

// IndexEvent provides a mock function with given fields: bmcEvent
func (_m *MockElasticClientInterface) IndexEvent(bmcEvent *dto.HedgeEvent) error {
	ret := _m.Called(bmcEvent)

	if len(ret) == 0 {
		panic("no return value specified for IndexEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.HedgeEvent) error); ok {
		r0 = rf(bmcEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElasticClientInterface_IndexEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexEvent'
type MockElasticClientInterface_IndexEvent_Call struct {
	*mock.Call
}

// IndexEvent is a helper method to define mock.On call
//   - bmcEvent *models.HedgeEvent
func (_e *MockElasticClientInterface_Expecter) IndexEvent(bmcEvent interface{}) *MockElasticClientInterface_IndexEvent_Call {
	return &MockElasticClientInterface_IndexEvent_Call{Call: _e.mock.On("IndexEvent", bmcEvent)}
}

func (_c *MockElasticClientInterface_IndexEvent_Call) Run(run func(bmcEvent *dto.HedgeEvent)) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.HedgeEvent))
	})
	return _c
}

func (_c *MockElasticClientInterface_IndexEvent_Call) Return(_a0 error) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_IndexEvent_Call) RunAndReturn(run func(*dto.HedgeEvent) error) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Return(run)
	return _c
}

// IndexMlPrediction provides a mock function with given fields: mlPrediction
func (_m *MockElasticClientInterface) IndexMlPrediction(mlPrediction *dto.MLPrediction) error {
	ret := _m.Called(mlPrediction)

	if len(ret) == 0 {
		panic("no return value specified for IndexMlPrediction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.MLPrediction) error); ok {
		r0 = rf(mlPrediction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElasticClientInterface_IndexMlPrediction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexMlPrediction'
type MockElasticClientInterface_IndexMlPrediction_Call struct {
	*mock.Call
}

// IndexMlPrediction is a helper method to define mock.On call
//   - mlPrediction *models.MLPrediction
func (_e *MockElasticClientInterface_Expecter) IndexMlPrediction(mlPrediction interface{}) *MockElasticClientInterface_IndexMlPrediction_Call {
	return &MockElasticClientInterface_IndexMlPrediction_Call{Call: _e.mock.On("IndexMlPrediction", mlPrediction)}
}

func (_c *MockElasticClientInterface_IndexMlPrediction_Call) Run(run func(mlPrediction *dto.MLPrediction)) *MockElasticClientInterface_IndexMlPrediction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.MLPrediction))
	})
	return _c
}

func (_c *MockElasticClientInterface_IndexMlPrediction_Call) Return(_a0 error) *MockElasticClientInterface_IndexMlPrediction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_IndexMlPrediction_Call) RunAndReturn(run func(*dto.MLPrediction) error) *MockElasticClientInterface_IndexMlPrediction_Call {
	_c.Call.Return(run)
	return _c
}

// Ingest provides a mock function with given fields: indexName, prediction
func (_m *MockElasticClientInterface) Ingest(indexName string, prediction string) error {
	ret := _m.Called(indexName, prediction)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(indexName, prediction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockElasticClientInterface_Ingest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingest'
type MockElasticClientInterface_Ingest_Call struct {
	*mock.Call
}

// Ingest is a helper method to define mock.On call
//   - indexName string
//   - prediction string
func (_e *MockElasticClientInterface_Expecter) Ingest(indexName interface{}, prediction interface{}) *MockElasticClientInterface_Ingest_Call {
	return &MockElasticClientInterface_Ingest_Call{Call: _e.mock.On("Ingest", indexName, prediction)}
}

func (_c *MockElasticClientInterface_Ingest_Call) Run(run func(indexName string, prediction string)) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_Ingest_Call) Return(_a0 error) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockElasticClientInterface_Ingest_Call) RunAndReturn(run func(string, string) error) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: luceneQuery, indexName
func (_m *MockElasticClientInterface) Search(luceneQuery string, indexName string) (map[string]interface{}, error) {
	ret := _m.Called(luceneQuery, indexName)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return rf(luceneQuery, indexName)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(luceneQuery, indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(luceneQuery, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElasticClientInterface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockElasticClientInterface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - luceneQuery string
//   - indexName string
func (_e *MockElasticClientInterface_Expecter) Search(luceneQuery interface{}, indexName interface{}) *MockElasticClientInterface_Search_Call {
	return &MockElasticClientInterface_Search_Call{Call: _e.mock.On("Search", luceneQuery, indexName)}
}

func (_c *MockElasticClientInterface_Search_Call) Run(run func(luceneQuery string, indexName string)) *MockElasticClientInterface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_Search_Call) Return(_a0 map[string]interface{}, _a1 error) *MockElasticClientInterface_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticClientInterface_Search_Call) RunAndReturn(run func(string, string) (map[string]interface{}, error)) *MockElasticClientInterface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchCommandLogs provides a mock function with given fields: luceneQuery
func (_m *MockElasticClientInterface) SearchCommandLogs(luceneQuery string) ([]*dto.CommandExecutionLog, error) {
	ret := _m.Called(luceneQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchCommandLogs")
	}

	var r0 []*dto.CommandExecutionLog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*dto.CommandExecutionLog, error)); ok {
		return rf(luceneQuery)
	}
	if rf, ok := ret.Get(0).(func(string) []*dto.CommandExecutionLog); ok {
		r0 = rf(luceneQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.CommandExecutionLog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(luceneQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElasticClientInterface_SearchCommandLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchCommandLogs'
type MockElasticClientInterface_SearchCommandLogs_Call struct {
	*mock.Call
}

// SearchCommandLogs is a helper method to define mock.On call
//   - luceneQuery string
func (_e *MockElasticClientInterface_Expecter) SearchCommandLogs(luceneQuery interface{}) *MockElasticClientInterface_SearchCommandLogs_Call {
	return &MockElasticClientInterface_SearchCommandLogs_Call{Call: _e.mock.On("SearchCommandLogs", luceneQuery)}
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) Run(run func(luceneQuery string)) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) Return(_a0 []*dto.CommandExecutionLog, _a1 error) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) RunAndReturn(run func(string) ([]*dto.CommandExecutionLog, error)) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Return(run)
	return _c
}

// SearchEvents provides a mock function with given fields: luceneQuery
func (_m *MockElasticClientInterface) SearchEvents(luceneQuery string) ([]*dto.HedgeEvent, error) {
	ret := _m.Called(luceneQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchEvents")
	}

	var r0 []*dto.HedgeEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*dto.HedgeEvent, error)); ok {
		return rf(luceneQuery)
	}
	if rf, ok := ret.Get(0).(func(string) []*dto.HedgeEvent); ok {
		r0 = rf(luceneQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.HedgeEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(luceneQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockElasticClientInterface_SearchEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchEvents'
type MockElasticClientInterface_SearchEvents_Call struct {
	*mock.Call
}

// SearchEvents is a helper method to define mock.On call
//   - luceneQuery string
func (_e *MockElasticClientInterface_Expecter) SearchEvents(luceneQuery interface{}) *MockElasticClientInterface_SearchEvents_Call {
	return &MockElasticClientInterface_SearchEvents_Call{Call: _e.mock.On("SearchEvents", luceneQuery)}
}

func (_c *MockElasticClientInterface_SearchEvents_Call) Run(run func(luceneQuery string)) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_SearchEvents_Call) Return(_a0 []*dto.HedgeEvent, _a1 error) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockElasticClientInterface_SearchEvents_Call) RunAndReturn(run func(string) ([]*dto.HedgeEvent, error)) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockElasticClientInterface creates a new instance of MockElasticClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockElasticClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockElasticClientInterface {
	mock := &MockElasticClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
