// Code generated by mockery v2.38.0. DO NOT EDIT.

package redis

import (
	errors "hedge/common/errors"
	mock "github.com/stretchr/testify/mock"

	redsync "github.com/go-redsync/redsync/v4"
)

// MockCommonRedisDBInterface is an autogenerated mock type for the CommonRedisDBInterface type
type MockCommonRedisDBInterface struct {
	mock.Mock
}

type MockCommonRedisDBInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommonRedisDBInterface) EXPECT() *MockCommonRedisDBInterface_Expecter {
	return &MockCommonRedisDBInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function with given fields: lockName
func (_m *MockCommonRedisDBInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _m.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return rf(lockName)
	}
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockCommonRedisDBInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockCommonRedisDBInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName string
func (_e *MockCommonRedisDBInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockCommonRedisDBInterface_AcquireRedisLock_Call {
	return &MockCommonRedisDBInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockCommonRedisDBInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockCommonRedisDBInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommonRedisDBInterface_AcquireRedisLock_Call) Return(_a0 *redsync.Mutex, _a1 errors.HedgeError) *MockCommonRedisDBInterface_AcquireRedisLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonRedisDBInterface_AcquireRedisLock_Call) RunAndReturn(run func(string) (*redsync.Mutex, errors.HedgeError)) *MockCommonRedisDBInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function with given fields: key
func (_m *MockCommonRedisDBInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockCommonRedisDBInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockCommonRedisDBInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key string
func (_e *MockCommonRedisDBInterface_Expecter) GetMetricCounter(key interface{}) *MockCommonRedisDBInterface_GetMetricCounter_Call {
	return &MockCommonRedisDBInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockCommonRedisDBInterface_GetMetricCounter_Call) Run(run func(key string)) *MockCommonRedisDBInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommonRedisDBInterface_GetMetricCounter_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockCommonRedisDBInterface_GetMetricCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonRedisDBInterface_GetMetricCounter_Call) RunAndReturn(run func(string) (int64, errors.HedgeError)) *MockCommonRedisDBInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function with given fields: key, value
func (_m *MockCommonRedisDBInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = rf(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockCommonRedisDBInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockCommonRedisDBInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockCommonRedisDBInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockCommonRedisDBInterface_IncrMetricCounterBy_Call {
	return &MockCommonRedisDBInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockCommonRedisDBInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockCommonRedisDBInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockCommonRedisDBInterface_IncrMetricCounterBy_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockCommonRedisDBInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommonRedisDBInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(string, int64) (int64, errors.HedgeError)) *MockCommonRedisDBInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function with given fields: key, value
func (_m *MockCommonRedisDBInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockCommonRedisDBInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockCommonRedisDBInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockCommonRedisDBInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockCommonRedisDBInterface_SetMetricCounter_Call {
	return &MockCommonRedisDBInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockCommonRedisDBInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockCommonRedisDBInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockCommonRedisDBInterface_SetMetricCounter_Call) Return(_a0 errors.HedgeError) *MockCommonRedisDBInterface_SetMetricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommonRedisDBInterface_SetMetricCounter_Call) RunAndReturn(run func(string, int64) errors.HedgeError) *MockCommonRedisDBInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommonRedisDBInterface creates a new instance of MockCommonRedisDBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommonRedisDBInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommonRedisDBInterface {
	mock := &MockCommonRedisDBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
