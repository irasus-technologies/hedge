// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	exec "os/exec"

	mock "github.com/stretchr/testify/mock"
)

// MockCommandRunnerInterface is an autogenerated mock type for the CommandRunnerInterface type
type MockCommandRunnerInterface struct {
	mock.Mock
}

type MockCommandRunnerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandRunnerInterface) EXPECT() *MockCommandRunnerInterface_Expecter {
	return &MockCommandRunnerInterface_Expecter{mock: &_m.Mock}
}

// GetCmd provides a mock function with given fields: command, args
func (_m *MockCommandRunnerInterface) GetCmd(command string, args ...string) *exec.Cmd {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCmd")
	}

	var r0 *exec.Cmd
	if rf, ok := ret.Get(0).(func(string, ...string) *exec.Cmd); ok {
		r0 = rf(command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	return r0
}

// MockCommandRunnerInterface_GetCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCmd'
type MockCommandRunnerInterface_GetCmd_Call struct {
	*mock.Call
}

// GetCmd is a helper method to define mock.On call
//   - command string
//   - args ...string
func (_e *MockCommandRunnerInterface_Expecter) GetCmd(command interface{}, args ...interface{}) *MockCommandRunnerInterface_GetCmd_Call {
	return &MockCommandRunnerInterface_GetCmd_Call{Call: _e.mock.On("GetCmd",
		append([]interface{}{command}, args...)...)}
}

func (_c *MockCommandRunnerInterface_GetCmd_Call) Run(run func(command string, args ...string)) *MockCommandRunnerInterface_GetCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCommandRunnerInterface_GetCmd_Call) Return(_a0 *exec.Cmd) *MockCommandRunnerInterface_GetCmd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandRunnerInterface_GetCmd_Call) RunAndReturn(run func(string, ...string) *exec.Cmd) *MockCommandRunnerInterface_GetCmd_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: cmd
func (_m *MockCommandRunnerInterface) Run(cmd *exec.Cmd) error {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*exec.Cmd) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommandRunnerInterface_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommandRunnerInterface_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - cmd *exec.Cmd
func (_e *MockCommandRunnerInterface_Expecter) Run(cmd interface{}) *MockCommandRunnerInterface_Run_Call {
	return &MockCommandRunnerInterface_Run_Call{Call: _e.mock.On("Run", cmd)}
}

func (_c *MockCommandRunnerInterface_Run_Call) Run(run func(cmd *exec.Cmd)) *MockCommandRunnerInterface_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exec.Cmd))
	})
	return _c
}

func (_c *MockCommandRunnerInterface_Run_Call) Return(_a0 error) *MockCommandRunnerInterface_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandRunnerInterface_Run_Call) RunAndReturn(run func(*exec.Cmd) error) *MockCommandRunnerInterface_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommandRunnerInterface creates a new instance of MockCommandRunnerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandRunnerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandRunnerInterface {
	mock := &MockCommandRunnerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
