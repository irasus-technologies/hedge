// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockHTTPSenderInterface is an autogenerated mock type for the HTTPSenderInterface type
type MockHTTPSenderInterface struct {
	mock.Mock
}

type MockHTTPSenderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPSenderInterface) EXPECT() *MockHTTPSenderInterface_Expecter {
	return &MockHTTPSenderInterface_Expecter{mock: &_m.Mock}
}

// GetMimeType provides a mock function with given fields:
func (_m *MockHTTPSenderInterface) GetMimeType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMimeType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHTTPSenderInterface_GetMimeType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMimeType'
type MockHTTPSenderInterface_GetMimeType_Call struct {
	*mock.Call
}

// GetMimeType is a helper method to define mock.On call
func (_e *MockHTTPSenderInterface_Expecter) GetMimeType() *MockHTTPSenderInterface_GetMimeType_Call {
	return &MockHTTPSenderInterface_GetMimeType_Call{Call: _e.mock.On("GetMimeType")}
}

func (_c *MockHTTPSenderInterface_GetMimeType_Call) Run(run func()) *MockHTTPSenderInterface_GetMimeType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHTTPSenderInterface_GetMimeType_Call) Return(_a0 string) *MockHTTPSenderInterface_GetMimeType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHTTPSenderInterface_GetMimeType_Call) RunAndReturn(run func() string) *MockHTTPSenderInterface_GetMimeType_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistOnError provides a mock function with given fields:
func (_m *MockHTTPSenderInterface) GetPersistOnError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPersistOnError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHTTPSenderInterface_GetPersistOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistOnError'
type MockHTTPSenderInterface_GetPersistOnError_Call struct {
	*mock.Call
}

// GetPersistOnError is a helper method to define mock.On call
func (_e *MockHTTPSenderInterface_Expecter) GetPersistOnError() *MockHTTPSenderInterface_GetPersistOnError_Call {
	return &MockHTTPSenderInterface_GetPersistOnError_Call{Call: _e.mock.On("GetPersistOnError")}
}

func (_c *MockHTTPSenderInterface_GetPersistOnError_Call) Run(run func()) *MockHTTPSenderInterface_GetPersistOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHTTPSenderInterface_GetPersistOnError_Call) Return(_a0 bool) *MockHTTPSenderInterface_GetPersistOnError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHTTPSenderInterface_GetPersistOnError_Call) RunAndReturn(run func() bool) *MockHTTPSenderInterface_GetPersistOnError_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function with given fields:
func (_m *MockHTTPSenderInterface) GetURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHTTPSenderInterface_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockHTTPSenderInterface_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
func (_e *MockHTTPSenderInterface_Expecter) GetURL() *MockHTTPSenderInterface_GetURL_Call {
	return &MockHTTPSenderInterface_GetURL_Call{Call: _e.mock.On("GetURL")}
}

func (_c *MockHTTPSenderInterface_GetURL_Call) Run(run func()) *MockHTTPSenderInterface_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHTTPSenderInterface_GetURL_Call) Return(_a0 string) *MockHTTPSenderInterface_GetURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHTTPSenderInterface_GetURL_Call) RunAndReturn(run func() string) *MockHTTPSenderInterface_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPDelete provides a mock function with given fields: ctx, data
func (_m *MockHTTPSenderInterface) HTTPDelete(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for HTTPDelete")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPDelete'
type MockHTTPSenderInterface_HTTPDelete_Call struct {
	*mock.Call
}

// HTTPDelete is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockHTTPSenderInterface_Expecter) HTTPDelete(ctx interface{}, data interface{}) *MockHTTPSenderInterface_HTTPDelete_Call {
	return &MockHTTPSenderInterface_HTTPDelete_Call{Call: _e.mock.On("HTTPDelete", ctx, data)}
}

func (_c *MockHTTPSenderInterface_HTTPDelete_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockHTTPSenderInterface_HTTPDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPDelete_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPDelete_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockHTTPSenderInterface_HTTPDelete_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPGet provides a mock function with given fields: ctx, data
func (_m *MockHTTPSenderInterface) HTTPGet(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for HTTPGet")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPGet'
type MockHTTPSenderInterface_HTTPGet_Call struct {
	*mock.Call
}

// HTTPGet is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockHTTPSenderInterface_Expecter) HTTPGet(ctx interface{}, data interface{}) *MockHTTPSenderInterface_HTTPGet_Call {
	return &MockHTTPSenderInterface_HTTPGet_Call{Call: _e.mock.On("HTTPGet", ctx, data)}
}

func (_c *MockHTTPSenderInterface_HTTPGet_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockHTTPSenderInterface_HTTPGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPGet_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPGet_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockHTTPSenderInterface_HTTPGet_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPPatch provides a mock function with given fields: ctx, data
func (_m *MockHTTPSenderInterface) HTTPPatch(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for HTTPPatch")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPPatch'
type MockHTTPSenderInterface_HTTPPatch_Call struct {
	*mock.Call
}

// HTTPPatch is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockHTTPSenderInterface_Expecter) HTTPPatch(ctx interface{}, data interface{}) *MockHTTPSenderInterface_HTTPPatch_Call {
	return &MockHTTPSenderInterface_HTTPPatch_Call{Call: _e.mock.On("HTTPPatch", ctx, data)}
}

func (_c *MockHTTPSenderInterface_HTTPPatch_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockHTTPSenderInterface_HTTPPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPatch_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPPatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPatch_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockHTTPSenderInterface_HTTPPatch_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPPost provides a mock function with given fields: ctx, data
func (_m *MockHTTPSenderInterface) HTTPPost(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for HTTPPost")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPPost'
type MockHTTPSenderInterface_HTTPPost_Call struct {
	*mock.Call
}

// HTTPPost is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockHTTPSenderInterface_Expecter) HTTPPost(ctx interface{}, data interface{}) *MockHTTPSenderInterface_HTTPPost_Call {
	return &MockHTTPSenderInterface_HTTPPost_Call{Call: _e.mock.On("HTTPPost", ctx, data)}
}

func (_c *MockHTTPSenderInterface_HTTPPost_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockHTTPSenderInterface_HTTPPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPost_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPost_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockHTTPSenderInterface_HTTPPost_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPPut provides a mock function with given fields: ctx, data
func (_m *MockHTTPSenderInterface) HTTPPut(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for HTTPPut")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPPut'
type MockHTTPSenderInterface_HTTPPut_Call struct {
	*mock.Call
}

// HTTPPut is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockHTTPSenderInterface_Expecter) HTTPPut(ctx interface{}, data interface{}) *MockHTTPSenderInterface_HTTPPut_Call {
	return &MockHTTPSenderInterface_HTTPPut_Call{Call: _e.mock.On("HTTPPut", ctx, data)}
}

func (_c *MockHTTPSenderInterface_HTTPPut_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockHTTPSenderInterface_HTTPPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPut_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPPut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPPut_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockHTTPSenderInterface_HTTPPut_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPSend provides a mock function with given fields: ctx, data, method
func (_m *MockHTTPSenderInterface) HTTPSend(ctx interfaces.AppFunctionContext, data interface{}, method string) (bool, interface{}) {
	ret := _m.Called(ctx, data, method)

	if len(ret) == 0 {
		panic("no return value specified for HTTPSend")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}, string) (bool, interface{})); ok {
		return rf(ctx, data, method)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}, string) bool); ok {
		r0 = rf(ctx, data, method)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}, string) interface{}); ok {
		r1 = rf(ctx, data, method)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockHTTPSenderInterface_HTTPSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPSend'
type MockHTTPSenderInterface_HTTPSend_Call struct {
	*mock.Call
}

// HTTPSend is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
//   - method string
func (_e *MockHTTPSenderInterface_Expecter) HTTPSend(ctx interface{}, data interface{}, method interface{}) *MockHTTPSenderInterface_HTTPSend_Call {
	return &MockHTTPSenderInterface_HTTPSend_Call{Call: _e.mock.On("HTTPSend", ctx, data, method)}
}

func (_c *MockHTTPSenderInterface_HTTPSend_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{}, method string)) *MockHTTPSenderInterface_HTTPSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPSend_Call) Return(_a0 bool, _a1 interface{}) *MockHTTPSenderInterface_HTTPSend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHTTPSenderInterface_HTTPSend_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}, string) (bool, interface{})) *MockHTTPSenderInterface_HTTPSend_Call {
	_c.Call.Return(run)
	return _c
}

// SetPersistOnError provides a mock function with given fields: updatedPersistOnErrorValue
func (_m *MockHTTPSenderInterface) SetPersistOnError(updatedPersistOnErrorValue bool) {
	_m.Called(updatedPersistOnErrorValue)
}

// MockHTTPSenderInterface_SetPersistOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPersistOnError'
type MockHTTPSenderInterface_SetPersistOnError_Call struct {
	*mock.Call
}

// SetPersistOnError is a helper method to define mock.On call
//   - updatedPersistOnErrorValue bool
func (_e *MockHTTPSenderInterface_Expecter) SetPersistOnError(updatedPersistOnErrorValue interface{}) *MockHTTPSenderInterface_SetPersistOnError_Call {
	return &MockHTTPSenderInterface_SetPersistOnError_Call{Call: _e.mock.On("SetPersistOnError", updatedPersistOnErrorValue)}
}

func (_c *MockHTTPSenderInterface_SetPersistOnError_Call) Run(run func(updatedPersistOnErrorValue bool)) *MockHTTPSenderInterface_SetPersistOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_SetPersistOnError_Call) Return() *MockHTTPSenderInterface_SetPersistOnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPSenderInterface_SetPersistOnError_Call) RunAndReturn(run func(bool)) *MockHTTPSenderInterface_SetPersistOnError_Call {
	_c.Call.Return(run)
	return _c
}

// SetURL provides a mock function with given fields: url
func (_m *MockHTTPSenderInterface) SetURL(url string) {
	_m.Called(url)
}

// MockHTTPSenderInterface_SetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetURL'
type MockHTTPSenderInterface_SetURL_Call struct {
	*mock.Call
}

// SetURL is a helper method to define mock.On call
//   - url string
func (_e *MockHTTPSenderInterface_Expecter) SetURL(url interface{}) *MockHTTPSenderInterface_SetURL_Call {
	return &MockHTTPSenderInterface_SetURL_Call{Call: _e.mock.On("SetURL", url)}
}

func (_c *MockHTTPSenderInterface_SetURL_Call) Run(run func(url string)) *MockHTTPSenderInterface_SetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHTTPSenderInterface_SetURL_Call) Return() *MockHTTPSenderInterface_SetURL_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPSenderInterface_SetURL_Call) RunAndReturn(run func(string)) *MockHTTPSenderInterface_SetURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPSenderInterface creates a new instance of MockHTTPSenderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPSenderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPSenderInterface {
	mock := &MockHTTPSenderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
