// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockDataStoreProvider is an autogenerated mock type for the DataStoreProvider type
type MockDataStoreProvider struct {
	mock.Mock
}

type MockDataStoreProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataStoreProvider) EXPECT() *MockDataStoreProvider_Expecter {
	return &MockDataStoreProvider_Expecter{mock: &_m.Mock}
}

// GetDataURL provides a mock function with given fields:
func (_m *MockDataStoreProvider) GetDataURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDataStoreProvider_GetDataURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataURL'
type MockDataStoreProvider_GetDataURL_Call struct {
	*mock.Call
}

// GetDataURL is a helper method to define mock.On call
func (_e *MockDataStoreProvider_Expecter) GetDataURL() *MockDataStoreProvider_GetDataURL_Call {
	return &MockDataStoreProvider_GetDataURL_Call{Call: _e.mock.On("GetDataURL")}
}

func (_c *MockDataStoreProvider_GetDataURL_Call) Run(run func()) *MockDataStoreProvider_GetDataURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataStoreProvider_GetDataURL_Call) Return(_a0 string) *MockDataStoreProvider_GetDataURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataStoreProvider_GetDataURL_Call) RunAndReturn(run func() string) *MockDataStoreProvider_GetDataURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthHeader provides a mock function with given fields: req
func (_m *MockDataStoreProvider) SetAuthHeader(req *http.Request) {
	_m.Called(req)
}

// MockDataStoreProvider_SetAuthHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthHeader'
type MockDataStoreProvider_SetAuthHeader_Call struct {
	*mock.Call
}

// SetAuthHeader is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockDataStoreProvider_Expecter) SetAuthHeader(req interface{}) *MockDataStoreProvider_SetAuthHeader_Call {
	return &MockDataStoreProvider_SetAuthHeader_Call{Call: _e.mock.On("SetAuthHeader", req)}
}

func (_c *MockDataStoreProvider_SetAuthHeader_Call) Run(run func(req *http.Request)) *MockDataStoreProvider_SetAuthHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockDataStoreProvider_SetAuthHeader_Call) Return() *MockDataStoreProvider_SetAuthHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDataStoreProvider_SetAuthHeader_Call) RunAndReturn(run func(*http.Request)) *MockDataStoreProvider_SetAuthHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataStoreProvider creates a new instance of MockDataStoreProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataStoreProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataStoreProvider {
	mock := &MockDataStoreProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
