// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"
	models "hedge/common/dto"

	service "hedge/common/service"
)

// MockDeviceServiceInter is an autogenerated mock type for the DeviceServiceInter type
type MockDeviceServiceInter struct {
	mock.Mock
}

type MockDeviceServiceInter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceServiceInter) EXPECT() *MockDeviceServiceInter_Expecter {
	return &MockDeviceServiceInter_Expecter{mock: &_m.Mock}
}

// ClearCache provides a mock function with given fields:
func (_m *MockDeviceServiceInter) ClearCache() {
	_m.Called()
}

// MockDeviceServiceInter_ClearCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCache'
type MockDeviceServiceInter_ClearCache_Call struct {
	*mock.Call
}

// ClearCache is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) ClearCache() *MockDeviceServiceInter_ClearCache_Call {
	return &MockDeviceServiceInter_ClearCache_Call{Call: _e.mock.On("ClearCache")}
}

func (_c *MockDeviceServiceInter_ClearCache_Call) Run(run func()) *MockDeviceServiceInter_ClearCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_ClearCache_Call) Return() *MockDeviceServiceInter_ClearCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDeviceServiceInter_ClearCache_Call) RunAndReturn(run func()) *MockDeviceServiceInter_ClearCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceInfoMap provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetDeviceInfoMap() (map[string]models.DeviceInfo, map[string][]models.DeviceInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceInfoMap")
	}

	var r0 map[string]models.DeviceInfo
	var r1 map[string][]models.DeviceInfo
	var r2 error
	if rf, ok := ret.Get(0).(func() (map[string]models.DeviceInfo, map[string][]models.DeviceInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]models.DeviceInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.DeviceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() map[string][]models.DeviceInfo); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]models.DeviceInfo)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeviceServiceInter_GetDeviceInfoMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceInfoMap'
type MockDeviceServiceInter_GetDeviceInfoMap_Call struct {
	*mock.Call
}

// GetDeviceInfoMap is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetDeviceInfoMap() *MockDeviceServiceInter_GetDeviceInfoMap_Call {
	return &MockDeviceServiceInter_GetDeviceInfoMap_Call{Call: _e.mock.On("GetDeviceInfoMap")}
}

func (_c *MockDeviceServiceInter_GetDeviceInfoMap_Call) Run(run func()) *MockDeviceServiceInter_GetDeviceInfoMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceInfoMap_Call) Return(deviceToDeviceInfoMap map[string]models.DeviceInfo, metricToDeviceInfoMap map[string][]models.DeviceInfo, err error) *MockDeviceServiceInter_GetDeviceInfoMap_Call {
	_c.Call.Return(deviceToDeviceInfoMap, metricToDeviceInfoMap, err)
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceInfoMap_Call) RunAndReturn(run func() (map[string]models.DeviceInfo, map[string][]models.DeviceInfo, error)) *MockDeviceServiceInter_GetDeviceInfoMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceLabels provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetDeviceLabels() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceLabels")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDeviceLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceLabels'
type MockDeviceServiceInter_GetDeviceLabels_Call struct {
	*mock.Call
}

// GetDeviceLabels is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetDeviceLabels() *MockDeviceServiceInter_GetDeviceLabels_Call {
	return &MockDeviceServiceInter_GetDeviceLabels_Call{Call: _e.mock.On("GetDeviceLabels")}
}

func (_c *MockDeviceServiceInter_GetDeviceLabels_Call) Run(run func()) *MockDeviceServiceInter_GetDeviceLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceLabels_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDeviceLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceLabels_Call) RunAndReturn(run func() []string) *MockDeviceServiceInter_GetDeviceLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceProfiles provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetDeviceProfiles() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceProfiles")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDeviceProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceProfiles'
type MockDeviceServiceInter_GetDeviceProfiles_Call struct {
	*mock.Call
}

// GetDeviceProfiles is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetDeviceProfiles() *MockDeviceServiceInter_GetDeviceProfiles_Call {
	return &MockDeviceServiceInter_GetDeviceProfiles_Call{Call: _e.mock.On("GetDeviceProfiles")}
}

func (_c *MockDeviceServiceInter_GetDeviceProfiles_Call) Run(run func()) *MockDeviceServiceInter_GetDeviceProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceProfiles_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDeviceProfiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceProfiles_Call) RunAndReturn(run func() []string) *MockDeviceServiceInter_GetDeviceProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceToDeviceInfoMap provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetDeviceToDeviceInfoMap() map[string]models.DeviceInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceToDeviceInfoMap")
	}

	var r0 map[string]models.DeviceInfo
	if rf, ok := ret.Get(0).(func() map[string]models.DeviceInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.DeviceInfo)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceToDeviceInfoMap'
type MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call struct {
	*mock.Call
}

// GetDeviceToDeviceInfoMap is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetDeviceToDeviceInfoMap() *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call {
	return &MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call{Call: _e.mock.On("GetDeviceToDeviceInfoMap")}
}

func (_c *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call) Run(run func()) *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call) Return(_a0 map[string]models.DeviceInfo) *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call) RunAndReturn(run func() map[string]models.DeviceInfo) *MockDeviceServiceInter_GetDeviceToDeviceInfoMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByLabel provides a mock function with given fields: label
func (_m *MockDeviceServiceInter) GetDevicesByLabel(label string) []string {
	ret := _m.Called(label)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByLabel")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDevicesByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByLabel'
type MockDeviceServiceInter_GetDevicesByLabel_Call struct {
	*mock.Call
}

// GetDevicesByLabel is a helper method to define mock.On call
//   - label string
func (_e *MockDeviceServiceInter_Expecter) GetDevicesByLabel(label interface{}) *MockDeviceServiceInter_GetDevicesByLabel_Call {
	return &MockDeviceServiceInter_GetDevicesByLabel_Call{Call: _e.mock.On("GetDevicesByLabel", label)}
}

func (_c *MockDeviceServiceInter_GetDevicesByLabel_Call) Run(run func(label string)) *MockDeviceServiceInter_GetDevicesByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabel_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDevicesByLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabel_Call) RunAndReturn(run func(string) []string) *MockDeviceServiceInter_GetDevicesByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByLabels provides a mock function with given fields: labels
func (_m *MockDeviceServiceInter) GetDevicesByLabels(labels []string) []string {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByLabels")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDevicesByLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByLabels'
type MockDeviceServiceInter_GetDevicesByLabels_Call struct {
	*mock.Call
}

// GetDevicesByLabels is a helper method to define mock.On call
//   - labels []string
func (_e *MockDeviceServiceInter_Expecter) GetDevicesByLabels(labels interface{}) *MockDeviceServiceInter_GetDevicesByLabels_Call {
	return &MockDeviceServiceInter_GetDevicesByLabels_Call{Call: _e.mock.On("GetDevicesByLabels", labels)}
}

func (_c *MockDeviceServiceInter_GetDevicesByLabels_Call) Run(run func(labels []string)) *MockDeviceServiceInter_GetDevicesByLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabels_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDevicesByLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabels_Call) RunAndReturn(run func([]string) []string) *MockDeviceServiceInter_GetDevicesByLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByLabelsCriteriaOR provides a mock function with given fields: labels
func (_m *MockDeviceServiceInter) GetDevicesByLabelsCriteriaOR(labels []string) []string {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByLabelsCriteriaOR")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByLabelsCriteriaOR'
type MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call struct {
	*mock.Call
}

// GetDevicesByLabelsCriteriaOR is a helper method to define mock.On call
//   - labels []string
func (_e *MockDeviceServiceInter_Expecter) GetDevicesByLabelsCriteriaOR(labels interface{}) *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call {
	return &MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call{Call: _e.mock.On("GetDevicesByLabelsCriteriaOR", labels)}
}

func (_c *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call) Run(run func(labels []string)) *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call) RunAndReturn(run func([]string) []string) *MockDeviceServiceInter_GetDevicesByLabelsCriteriaOR_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByProfile provides a mock function with given fields: profile
func (_m *MockDeviceServiceInter) GetDevicesByProfile(profile string) []string {
	ret := _m.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByProfile")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetDevicesByProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByProfile'
type MockDeviceServiceInter_GetDevicesByProfile_Call struct {
	*mock.Call
}

// GetDevicesByProfile is a helper method to define mock.On call
//   - profile string
func (_e *MockDeviceServiceInter_Expecter) GetDevicesByProfile(profile interface{}) *MockDeviceServiceInter_GetDevicesByProfile_Call {
	return &MockDeviceServiceInter_GetDevicesByProfile_Call{Call: _e.mock.On("GetDevicesByProfile", profile)}
}

func (_c *MockDeviceServiceInter_GetDevicesByProfile_Call) Run(run func(profile string)) *MockDeviceServiceInter_GetDevicesByProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByProfile_Call) Return(_a0 []string) *MockDeviceServiceInter_GetDevicesByProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetDevicesByProfile_Call) RunAndReturn(run func(string) []string) *MockDeviceServiceInter_GetDevicesByProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetLabels() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type MockDeviceServiceInter_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetLabels() *MockDeviceServiceInter_GetLabels_Call {
	return &MockDeviceServiceInter_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *MockDeviceServiceInter_GetLabels_Call) Run(run func()) *MockDeviceServiceInter_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetLabels_Call) Return(_a0 []string) *MockDeviceServiceInter_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetLabels_Call) RunAndReturn(run func() []string) *MockDeviceServiceInter_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsByDevices provides a mock function with given fields: devices
func (_m *MockDeviceServiceInter) GetMetricsByDevices(devices []string) []string {
	ret := _m.Called(devices)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsByDevices")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(devices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetMetricsByDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsByDevices'
type MockDeviceServiceInter_GetMetricsByDevices_Call struct {
	*mock.Call
}

// GetMetricsByDevices is a helper method to define mock.On call
//   - devices []string
func (_e *MockDeviceServiceInter_Expecter) GetMetricsByDevices(devices interface{}) *MockDeviceServiceInter_GetMetricsByDevices_Call {
	return &MockDeviceServiceInter_GetMetricsByDevices_Call{Call: _e.mock.On("GetMetricsByDevices", devices)}
}

func (_c *MockDeviceServiceInter_GetMetricsByDevices_Call) Run(run func(devices []string)) *MockDeviceServiceInter_GetMetricsByDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetMetricsByDevices_Call) Return(_a0 []string) *MockDeviceServiceInter_GetMetricsByDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetMetricsByDevices_Call) RunAndReturn(run func([]string) []string) *MockDeviceServiceInter_GetMetricsByDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfiles provides a mock function with given fields:
func (_m *MockDeviceServiceInter) GetProfiles() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockDeviceServiceInter_GetProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfiles'
type MockDeviceServiceInter_GetProfiles_Call struct {
	*mock.Call
}

// GetProfiles is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) GetProfiles() *MockDeviceServiceInter_GetProfiles_Call {
	return &MockDeviceServiceInter_GetProfiles_Call{Call: _e.mock.On("GetProfiles")}
}

func (_c *MockDeviceServiceInter_GetProfiles_Call) Run(run func()) *MockDeviceServiceInter_GetProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_GetProfiles_Call) Return(_a0 []string) *MockDeviceServiceInter_GetProfiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_GetProfiles_Call) RunAndReturn(run func() []string) *MockDeviceServiceInter_GetProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// LoadDeviceInfoFromDB provides a mock function with given fields:
func (_m *MockDeviceServiceInter) LoadDeviceInfoFromDB() {
	_m.Called()
}

// MockDeviceServiceInter_LoadDeviceInfoFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadDeviceInfoFromDB'
type MockDeviceServiceInter_LoadDeviceInfoFromDB_Call struct {
	*mock.Call
}

// LoadDeviceInfoFromDB is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) LoadDeviceInfoFromDB() *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call {
	return &MockDeviceServiceInter_LoadDeviceInfoFromDB_Call{Call: _e.mock.On("LoadDeviceInfoFromDB")}
}

func (_c *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call) Run(run func()) *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call) Return() *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call) RunAndReturn(run func()) *MockDeviceServiceInter_LoadDeviceInfoFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// LoadProfileAndLabels provides a mock function with given fields:
func (_m *MockDeviceServiceInter) LoadProfileAndLabels() *service.DeviceInfoService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadProfileAndLabels")
	}

	var r0 *service.DeviceInfoService
	if rf, ok := ret.Get(0).(func() *service.DeviceInfoService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.DeviceInfoService)
		}
	}

	return r0
}

// MockDeviceServiceInter_LoadProfileAndLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadProfileAndLabels'
type MockDeviceServiceInter_LoadProfileAndLabels_Call struct {
	*mock.Call
}

// LoadProfileAndLabels is a helper method to define mock.On call
func (_e *MockDeviceServiceInter_Expecter) LoadProfileAndLabels() *MockDeviceServiceInter_LoadProfileAndLabels_Call {
	return &MockDeviceServiceInter_LoadProfileAndLabels_Call{Call: _e.mock.On("LoadProfileAndLabels")}
}

func (_c *MockDeviceServiceInter_LoadProfileAndLabels_Call) Run(run func()) *MockDeviceServiceInter_LoadProfileAndLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceServiceInter_LoadProfileAndLabels_Call) Return(_a0 *service.DeviceInfoService) *MockDeviceServiceInter_LoadProfileAndLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceServiceInter_LoadProfileAndLabels_Call) RunAndReturn(run func() *service.DeviceInfoService) *MockDeviceServiceInter_LoadProfileAndLabels_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceServiceInter creates a new instance of MockDeviceServiceInter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceServiceInter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceServiceInter {
	mock := &MockDeviceServiceInter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
