// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockStringValuesFormatter is an autogenerated mock type for the StringValuesFormatter type
type MockStringValuesFormatter struct {
	mock.Mock
}

type MockStringValuesFormatter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStringValuesFormatter) EXPECT() *MockStringValuesFormatter_Expecter {
	return &MockStringValuesFormatter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStringValuesFormatter) Execute(_a0 string, _a1 interfaces.AppFunctionContext, _a2 interface{}) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interfaces.AppFunctionContext, interface{}) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, interfaces.AppFunctionContext, interface{}) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, interfaces.AppFunctionContext, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStringValuesFormatter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStringValuesFormatter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interfaces.AppFunctionContext
//   - _a2 interface{}
func (_e *MockStringValuesFormatter_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStringValuesFormatter_Execute_Call {
	return &MockStringValuesFormatter_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *MockStringValuesFormatter_Execute_Call) Run(run func(_a0 string, _a1 interfaces.AppFunctionContext, _a2 interface{})) *MockStringValuesFormatter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interfaces.AppFunctionContext), args[2].(interface{}))
	})
	return _c
}

func (_c *MockStringValuesFormatter_Execute_Call) Return(_a0 string, _a1 error) *MockStringValuesFormatter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStringValuesFormatter_Execute_Call) RunAndReturn(run func(string, interfaces.AppFunctionContext, interface{}) (string, error)) *MockStringValuesFormatter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStringValuesFormatter creates a new instance of MockStringValuesFormatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStringValuesFormatter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStringValuesFormatter {
	mock := &MockStringValuesFormatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
