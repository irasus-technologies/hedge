// Code generated by mockery v2.45.1. DO NOT EDIT.

package service

import (
	http "net/http"
	mock "github.com/stretchr/testify/mock"
)

// MockADEConnectionInterface is an autogenerated mock type for the ADEConnectionInterface type
type MockADEConnectionInterface struct {
	mock.Mock
}

type MockADEConnectionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockADEConnectionInterface) EXPECT() *MockADEConnectionInterface_Expecter {
	return &MockADEConnectionInterface_Expecter{mock: &_m.Mock}
}

// ExecuteADEApi provides a mock function with given fields: method, relativeURL, body, contentType
func (_m *MockADEConnectionInterface) ExecuteADEApi(method string, relativeURL string, body interface{}, contentType string) (*http.Response, error) {
	ret := _m.Called(method, relativeURL, body, contentType)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteADEApi")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) (*http.Response, error)); ok {
		return rf(method, relativeURL, body, contentType)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) *http.Response); ok {
		r0 = rf(method, relativeURL, body, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, string) error); ok {
		r1 = rf(method, relativeURL, body, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockADEConnectionInterface_ExecuteADEApi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteADEApi'
type MockADEConnectionInterface_ExecuteADEApi_Call struct {
	*mock.Call
}

// ExecuteADEApi is a helper method to define mock.On call
//   - method string
//   - relativeURL string
//   - body interface{}
//   - contentType string
func (_e *MockADEConnectionInterface_Expecter) ExecuteADEApi(method interface{}, relativeURL interface{}, body interface{}, contentType interface{}) *MockADEConnectionInterface_ExecuteADEApi_Call {
	return &MockADEConnectionInterface_ExecuteADEApi_Call{Call: _e.mock.On("ExecuteADEApi", method, relativeURL, body, contentType)}
}

func (_c *MockADEConnectionInterface_ExecuteADEApi_Call) Run(run func(method string, relativeURL string, body interface{}, contentType string)) *MockADEConnectionInterface_ExecuteADEApi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}), args[3].(string))
	})
	return _c
}

func (_c *MockADEConnectionInterface_ExecuteADEApi_Call) Return(_a0 *http.Response, _a1 error) *MockADEConnectionInterface_ExecuteADEApi_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockADEConnectionInterface_ExecuteADEApi_Call) RunAndReturn(run func(string, string, interface{}, string) (*http.Response, error)) *MockADEConnectionInterface_ExecuteADEApi_Call {
	_c.Call.Return(run)
	return _c
}

// GetBearerToken provides a mock function with given fields:
func (_m *MockADEConnectionInterface) GetBearerToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBearerToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockADEConnectionInterface_GetBearerToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBearerToken'
type MockADEConnectionInterface_GetBearerToken_Call struct {
	*mock.Call
}

// GetBearerToken is a helper method to define mock.On call
func (_e *MockADEConnectionInterface_Expecter) GetBearerToken() *MockADEConnectionInterface_GetBearerToken_Call {
	return &MockADEConnectionInterface_GetBearerToken_Call{Call: _e.mock.On("GetBearerToken")}
}

func (_c *MockADEConnectionInterface_GetBearerToken_Call) Run(run func()) *MockADEConnectionInterface_GetBearerToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockADEConnectionInterface_GetBearerToken_Call) Return(_a0 string) *MockADEConnectionInterface_GetBearerToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockADEConnectionInterface_GetBearerToken_Call) RunAndReturn(run func() string) *MockADEConnectionInterface_GetBearerToken_Call {
	_c.Call.Return(run)
	return _c
}


// MockADEConnectionInterface_GetHttpClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpClient'
type MockADEConnectionInterface_GetHttpClient_Call struct {
	*mock.Call
}

// GetHttpClient is a helper method to define mock.On call
func (_e *MockADEConnectionInterface_Expecter) GetHttpClient() *MockADEConnectionInterface_GetHttpClient_Call {
	return &MockADEConnectionInterface_GetHttpClient_Call{Call: _e.mock.On("GetHttpClient")}
}

func (_c *MockADEConnectionInterface_GetHttpClient_Call) Run(run func()) *MockADEConnectionInterface_GetHttpClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}


// GetTenantURL provides a mock function with given fields:
func (_m *MockADEConnectionInterface) GetTenantURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTenantURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockADEConnectionInterface_GetTenantURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantURL'
type MockADEConnectionInterface_GetTenantURL_Call struct {
	*mock.Call
}

// GetTenantURL is a helper method to define mock.On call
func (_e *MockADEConnectionInterface_Expecter) GetTenantURL() *MockADEConnectionInterface_GetTenantURL_Call {
	return &MockADEConnectionInterface_GetTenantURL_Call{Call: _e.mock.On("GetTenantURL")}
}

func (_c *MockADEConnectionInterface_GetTenantURL_Call) Run(run func()) *MockADEConnectionInterface_GetTenantURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockADEConnectionInterface_GetTenantURL_Call) Return(_a0 string) *MockADEConnectionInterface_GetTenantURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockADEConnectionInterface_GetTenantURL_Call) RunAndReturn(run func() string) *MockADEConnectionInterface_GetTenantURL_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeRefreshAndJwtToken provides a mock function with given fields:
func (_m *MockADEConnectionInterface) InitializeRefreshAndJwtToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitializeRefreshAndJwtToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeRefreshAndJwtToken'
type MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call struct {
	*mock.Call
}

// InitializeRefreshAndJwtToken is a helper method to define mock.On call
func (_e *MockADEConnectionInterface_Expecter) InitializeRefreshAndJwtToken() *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call {
	return &MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call{Call: _e.mock.On("InitializeRefreshAndJwtToken")}
}

func (_c *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call) Run(run func()) *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call) Return(_a0 string) *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call) RunAndReturn(run func() string) *MockADEConnectionInterface_InitializeRefreshAndJwtToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwtTokenFromRefreshToken provides a mock function with given fields:
func (_m *MockADEConnectionInterface) NewJwtTokenFromRefreshToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewJwtTokenFromRefreshToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewJwtTokenFromRefreshToken'
type MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call struct {
	*mock.Call
}

// NewJwtTokenFromRefreshToken is a helper method to define mock.On call
func (_e *MockADEConnectionInterface_Expecter) NewJwtTokenFromRefreshToken() *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call {
	return &MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call{Call: _e.mock.On("NewJwtTokenFromRefreshToken")}
}

func (_c *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call) Run(run func()) *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call) Return(_a0 string) *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call) RunAndReturn(run func() string) *MockADEConnectionInterface_NewJwtTokenFromRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthHeader provides a mock function with given fields: req
func (_m *MockADEConnectionInterface) SetAuthHeader(req *http.Request) {
	_m.Called(req)
}

// MockADEConnectionInterface_SetAuthHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthHeader'
type MockADEConnectionInterface_SetAuthHeader_Call struct {
	*mock.Call
}

// SetAuthHeader is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockADEConnectionInterface_Expecter) SetAuthHeader(req interface{}) *MockADEConnectionInterface_SetAuthHeader_Call {
	return &MockADEConnectionInterface_SetAuthHeader_Call{Call: _e.mock.On("SetAuthHeader", req)}
}

func (_c *MockADEConnectionInterface_SetAuthHeader_Call) Run(run func(req *http.Request)) *MockADEConnectionInterface_SetAuthHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockADEConnectionInterface_SetAuthHeader_Call) Return() *MockADEConnectionInterface_SetAuthHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockADEConnectionInterface_SetAuthHeader_Call) RunAndReturn(run func(*http.Request)) *MockADEConnectionInterface_SetAuthHeader_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileOnADE provides a mock function with given fields: remoteFile, localFile, fileId
func (_m *MockADEConnectionInterface) UpdateFileOnADE(remoteFile string, localFile string, fileId string) error {
	ret := _m.Called(remoteFile, localFile, fileId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileOnADE")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(remoteFile, localFile, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockADEConnectionInterface_UpdateFileOnADE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileOnADE'
type MockADEConnectionInterface_UpdateFileOnADE_Call struct {
	*mock.Call
}

// UpdateFileOnADE is a helper method to define mock.On call
//   - remoteFile string
//   - localFile string
//   - fileId string
func (_e *MockADEConnectionInterface_Expecter) UpdateFileOnADE(remoteFile interface{}, localFile interface{}, fileId interface{}) *MockADEConnectionInterface_UpdateFileOnADE_Call {
	return &MockADEConnectionInterface_UpdateFileOnADE_Call{Call: _e.mock.On("UpdateFileOnADE", remoteFile, localFile, fileId)}
}

func (_c *MockADEConnectionInterface_UpdateFileOnADE_Call) Run(run func(remoteFile string, localFile string, fileId string)) *MockADEConnectionInterface_UpdateFileOnADE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockADEConnectionInterface_UpdateFileOnADE_Call) Return(_a0 error) *MockADEConnectionInterface_UpdateFileOnADE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockADEConnectionInterface_UpdateFileOnADE_Call) RunAndReturn(run func(string, string, string) error) *MockADEConnectionInterface_UpdateFileOnADE_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFileToADE provides a mock function with given fields: remoteFile, localFile
func (_m *MockADEConnectionInterface) UploadFileToADE(remoteFile string, localFile string) (string, error) {
	ret := _m.Called(remoteFile, localFile)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileToADE")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(remoteFile, localFile)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(remoteFile, localFile)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(remoteFile, localFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockADEConnectionInterface_UploadFileToADE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFileToADE'
type MockADEConnectionInterface_UploadFileToADE_Call struct {
	*mock.Call
}

// UploadFileToADE is a helper method to define mock.On call
//   - remoteFile string
//   - localFile string
func (_e *MockADEConnectionInterface_Expecter) UploadFileToADE(remoteFile interface{}, localFile interface{}) *MockADEConnectionInterface_UploadFileToADE_Call {
	return &MockADEConnectionInterface_UploadFileToADE_Call{Call: _e.mock.On("UploadFileToADE", remoteFile, localFile)}
}

func (_c *MockADEConnectionInterface_UploadFileToADE_Call) Run(run func(remoteFile string, localFile string)) *MockADEConnectionInterface_UploadFileToADE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockADEConnectionInterface_UploadFileToADE_Call) Return(_a0 string, _a1 error) *MockADEConnectionInterface_UploadFileToADE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockADEConnectionInterface_UploadFileToADE_Call) RunAndReturn(run func(string, string) (string, error)) *MockADEConnectionInterface_UploadFileToADE_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockADEConnectionInterface creates a new instance of MockADEConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockADEConnectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockADEConnectionInterface {
	mock := &MockADEConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
