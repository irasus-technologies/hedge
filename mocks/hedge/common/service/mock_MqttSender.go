// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	metrics "github.com/rcrowley/go-metrics"

	mock "github.com/stretchr/testify/mock"

	mqtt "github.com/eclipse/paho.mqtt.golang"

	transforms "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/transforms"
)

// MockMqttSender is an autogenerated mock type for the MqttSender type
type MockMqttSender struct {
	mock.Mock
}

type MockMqttSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMqttSender) EXPECT() *MockMqttSender_Expecter {
	return &MockMqttSender_Expecter{mock: &_m.Mock}
}

// ConnectToBroker provides a mock function with given fields: ctx, exportData
func (_m *MockMqttSender) ConnectToBroker(ctx interfaces.AppFunctionContext, exportData []byte) error {
	ret := _m.Called(ctx, exportData)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToBroker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, []byte) error); ok {
		r0 = rf(ctx, exportData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMqttSender_ConnectToBroker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectToBroker'
type MockMqttSender_ConnectToBroker_Call struct {
	*mock.Call
}

// ConnectToBroker is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - exportData []byte
func (_e *MockMqttSender_Expecter) ConnectToBroker(ctx interface{}, exportData interface{}) *MockMqttSender_ConnectToBroker_Call {
	return &MockMqttSender_ConnectToBroker_Call{Call: _e.mock.On("ConnectToBroker", ctx, exportData)}
}

func (_c *MockMqttSender_ConnectToBroker_Call) Run(run func(ctx interfaces.AppFunctionContext, exportData []byte)) *MockMqttSender_ConnectToBroker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].([]byte))
	})
	return _c
}

func (_c *MockMqttSender_ConnectToBroker_Call) Return(_a0 error) *MockMqttSender_ConnectToBroker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_ConnectToBroker_Call) RunAndReturn(run func(interfaces.AppFunctionContext, []byte) error) *MockMqttSender_ConnectToBroker_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function with given fields:
func (_m *MockMqttSender) GetClient() mqtt.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 mqtt.Client
	if rf, ok := ret.Get(0).(func() mqtt.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Client)
		}
	}

	return r0
}

// MockMqttSender_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockMqttSender_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockMqttSender_Expecter) GetClient() *MockMqttSender_GetClient_Call {
	return &MockMqttSender_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockMqttSender_GetClient_Call) Run(run func()) *MockMqttSender_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMqttSender_GetClient_Call) Return(_a0 mqtt.Client) *MockMqttSender_GetClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_GetClient_Call) RunAndReturn(run func() mqtt.Client) *MockMqttSender_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetMQTTSecretConfig provides a mock function with given fields:
func (_m *MockMqttSender) GetMQTTSecretConfig() transforms.MQTTSecretConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMQTTSecretConfig")
	}

	var r0 transforms.MQTTSecretConfig
	if rf, ok := ret.Get(0).(func() transforms.MQTTSecretConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(transforms.MQTTSecretConfig)
	}

	return r0
}

// MockMqttSender_GetMQTTSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMQTTSecretConfig'
type MockMqttSender_GetMQTTSecretConfig_Call struct {
	*mock.Call
}

// GetMQTTSecretConfig is a helper method to define mock.On call
func (_e *MockMqttSender_Expecter) GetMQTTSecretConfig() *MockMqttSender_GetMQTTSecretConfig_Call {
	return &MockMqttSender_GetMQTTSecretConfig_Call{Call: _e.mock.On("GetMQTTSecretConfig")}
}

func (_c *MockMqttSender_GetMQTTSecretConfig_Call) Run(run func()) *MockMqttSender_GetMQTTSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMqttSender_GetMQTTSecretConfig_Call) Return(_a0 transforms.MQTTSecretConfig) *MockMqttSender_GetMQTTSecretConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_GetMQTTSecretConfig_Call) RunAndReturn(run func() transforms.MQTTSecretConfig) *MockMqttSender_GetMQTTSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetMqttSizeMetrics provides a mock function with given fields:
func (_m *MockMqttSender) GetMqttSizeMetrics() metrics.Histogram {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMqttSizeMetrics")
	}

	var r0 metrics.Histogram
	if rf, ok := ret.Get(0).(func() metrics.Histogram); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Histogram)
		}
	}

	return r0
}

// MockMqttSender_GetMqttSizeMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMqttSizeMetrics'
type MockMqttSender_GetMqttSizeMetrics_Call struct {
	*mock.Call
}

// GetMqttSizeMetrics is a helper method to define mock.On call
func (_e *MockMqttSender_Expecter) GetMqttSizeMetrics() *MockMqttSender_GetMqttSizeMetrics_Call {
	return &MockMqttSender_GetMqttSizeMetrics_Call{Call: _e.mock.On("GetMqttSizeMetrics")}
}

func (_c *MockMqttSender_GetMqttSizeMetrics_Call) Run(run func()) *MockMqttSender_GetMqttSizeMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMqttSender_GetMqttSizeMetrics_Call) Return(_a0 metrics.Histogram) *MockMqttSender_GetMqttSizeMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_GetMqttSizeMetrics_Call) RunAndReturn(run func() metrics.Histogram) *MockMqttSender_GetMqttSizeMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistOnError provides a mock function with given fields:
func (_m *MockMqttSender) GetPersistOnError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPersistOnError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMqttSender_GetPersistOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistOnError'
type MockMqttSender_GetPersistOnError_Call struct {
	*mock.Call
}

// GetPersistOnError is a helper method to define mock.On call
func (_e *MockMqttSender_Expecter) GetPersistOnError() *MockMqttSender_GetPersistOnError_Call {
	return &MockMqttSender_GetPersistOnError_Call{Call: _e.mock.On("GetPersistOnError")}
}

func (_c *MockMqttSender_GetPersistOnError_Call) Run(run func()) *MockMqttSender_GetPersistOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMqttSender_GetPersistOnError_Call) Return(_a0 bool) *MockMqttSender_GetPersistOnError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_GetPersistOnError_Call) RunAndReturn(run func() bool) *MockMqttSender_GetPersistOnError_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeMQTTClient provides a mock function with given fields: ctx
func (_m *MockMqttSender) InitializeMQTTClient(ctx interfaces.AppFunctionContext) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitializeMQTTClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMqttSender_InitializeMQTTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeMQTTClient'
type MockMqttSender_InitializeMQTTClient_Call struct {
	*mock.Call
}

// InitializeMQTTClient is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
func (_e *MockMqttSender_Expecter) InitializeMQTTClient(ctx interface{}) *MockMqttSender_InitializeMQTTClient_Call {
	return &MockMqttSender_InitializeMQTTClient_Call{Call: _e.mock.On("InitializeMQTTClient", ctx)}
}

func (_c *MockMqttSender_InitializeMQTTClient_Call) Run(run func(ctx interfaces.AppFunctionContext)) *MockMqttSender_InitializeMQTTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext))
	})
	return _c
}

func (_c *MockMqttSender_InitializeMQTTClient_Call) Return(_a0 error) *MockMqttSender_InitializeMQTTClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMqttSender_InitializeMQTTClient_Call) RunAndReturn(run func(interfaces.AppFunctionContext) error) *MockMqttSender_InitializeMQTTClient_Call {
	_c.Call.Return(run)
	return _c
}

// MQTTSend provides a mock function with given fields: ctx, data
func (_m *MockMqttSender) MQTTSend(ctx interfaces.AppFunctionContext, data interface{}) (bool, interface{}) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for MQTTSend")
	}

	var r0 bool
	var r1 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) (bool, interface{})); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interfaces.AppFunctionContext, interface{}) interface{}); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// MockMqttSender_MQTTSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MQTTSend'
type MockMqttSender_MQTTSend_Call struct {
	*mock.Call
}

// MQTTSend is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - data interface{}
func (_e *MockMqttSender_Expecter) MQTTSend(ctx interface{}, data interface{}) *MockMqttSender_MQTTSend_Call {
	return &MockMqttSender_MQTTSend_Call{Call: _e.mock.On("MQTTSend", ctx, data)}
}

func (_c *MockMqttSender_MQTTSend_Call) Run(run func(ctx interfaces.AppFunctionContext, data interface{})) *MockMqttSender_MQTTSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMqttSender_MQTTSend_Call) Return(_a0 bool, _a1 interface{}) *MockMqttSender_MQTTSend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMqttSender_MQTTSend_Call) RunAndReturn(run func(interfaces.AppFunctionContext, interface{}) (bool, interface{})) *MockMqttSender_MQTTSend_Call {
	_c.Call.Return(run)
	return _c
}

// SetMqttSizeMetrics provides a mock function with given fields: prevSizeMetrics
func (_m *MockMqttSender) SetMqttSizeMetrics(prevSizeMetrics metrics.Histogram) {
	_m.Called(prevSizeMetrics)
}

// MockMqttSender_SetMqttSizeMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMqttSizeMetrics'
type MockMqttSender_SetMqttSizeMetrics_Call struct {
	*mock.Call
}

// SetMqttSizeMetrics is a helper method to define mock.On call
//   - prevSizeMetrics metrics.Histogram
func (_e *MockMqttSender_Expecter) SetMqttSizeMetrics(prevSizeMetrics interface{}) *MockMqttSender_SetMqttSizeMetrics_Call {
	return &MockMqttSender_SetMqttSizeMetrics_Call{Call: _e.mock.On("SetMqttSizeMetrics", prevSizeMetrics)}
}

func (_c *MockMqttSender_SetMqttSizeMetrics_Call) Run(run func(prevSizeMetrics metrics.Histogram)) *MockMqttSender_SetMqttSizeMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.Histogram))
	})
	return _c
}

func (_c *MockMqttSender_SetMqttSizeMetrics_Call) Return() *MockMqttSender_SetMqttSizeMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMqttSender_SetMqttSizeMetrics_Call) RunAndReturn(run func(metrics.Histogram)) *MockMqttSender_SetMqttSizeMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// SetPersistOnError provides a mock function with given fields: updatedPersistOnErrorValue
func (_m *MockMqttSender) SetPersistOnError(updatedPersistOnErrorValue bool) {
	_m.Called(updatedPersistOnErrorValue)
}

// MockMqttSender_SetPersistOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPersistOnError'
type MockMqttSender_SetPersistOnError_Call struct {
	*mock.Call
}

// SetPersistOnError is a helper method to define mock.On call
//   - updatedPersistOnErrorValue bool
func (_e *MockMqttSender_Expecter) SetPersistOnError(updatedPersistOnErrorValue interface{}) *MockMqttSender_SetPersistOnError_Call {
	return &MockMqttSender_SetPersistOnError_Call{Call: _e.mock.On("SetPersistOnError", updatedPersistOnErrorValue)}
}

func (_c *MockMqttSender_SetPersistOnError_Call) Run(run func(updatedPersistOnErrorValue bool)) *MockMqttSender_SetPersistOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockMqttSender_SetPersistOnError_Call) Return() *MockMqttSender_SetPersistOnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMqttSender_SetPersistOnError_Call) RunAndReturn(run func(bool)) *MockMqttSender_SetPersistOnError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMqttSender creates a new instance of MockMqttSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMqttSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMqttSender {
	mock := &MockMqttSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
