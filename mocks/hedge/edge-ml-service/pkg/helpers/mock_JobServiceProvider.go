// Code generated by mockery v2.45.1. DO NOT EDIT.

package helpers

import (
	job "hedge/edge-ml-service/pkg/dto/job"
	mock "github.com/stretchr/testify/mock"
)

// MockJobServiceProvider is an autogenerated mock type for the JobServiceProvider type
type MockJobServiceProvider struct {
	mock.Mock
}

type MockJobServiceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobServiceProvider) EXPECT() *MockJobServiceProvider_Expecter {
	return &MockJobServiceProvider_Expecter{mock: &_m.Mock}
}

// DownloadModel provides a mock function with given fields: localModelDirectory, fileId
func (_m *MockJobServiceProvider) DownloadModel(localModelDirectory string, fileId string) error {
	ret := _m.Called(localModelDirectory, fileId)

	if len(ret) == 0 {
		panic("no return value specified for DownloadModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(localModelDirectory, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobServiceProvider_DownloadModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadModel'
type MockJobServiceProvider_DownloadModel_Call struct {
	*mock.Call
}

// DownloadModel is a helper method to define mock.On call
//   - localModelDirectory string
//   - fileId string
func (_e *MockJobServiceProvider_Expecter) DownloadModel(localModelDirectory interface{}, fileId interface{}) *MockJobServiceProvider_DownloadModel_Call {
	return &MockJobServiceProvider_DownloadModel_Call{Call: _e.mock.On("DownloadModel", localModelDirectory, fileId)}
}

func (_c *MockJobServiceProvider_DownloadModel_Call) Run(run func(localModelDirectory string, fileId string)) *MockJobServiceProvider_DownloadModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJobServiceProvider_DownloadModel_Call) Return(_a0 error) *MockJobServiceProvider_DownloadModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceProvider_DownloadModel_Call) RunAndReturn(run func(string, string) error) *MockJobServiceProvider_DownloadModel_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrainingJobStatus provides a mock function with given fields: _a0
func (_m *MockJobServiceProvider) GetTrainingJobStatus(_a0 *job.TrainingJobDetails) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*job.TrainingJobDetails) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobServiceProvider_GetTrainingJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainingJobStatus'
type MockJobServiceProvider_GetTrainingJobStatus_Call struct {
	*mock.Call
}

// GetTrainingJobStatus is a helper method to define mock.On call
//   - _a0 *job.TrainingJobDetails
func (_e *MockJobServiceProvider_Expecter) GetTrainingJobStatus(_a0 interface{}) *MockJobServiceProvider_GetTrainingJobStatus_Call {
	return &MockJobServiceProvider_GetTrainingJobStatus_Call{Call: _e.mock.On("GetTrainingJobStatus", _a0)}
}

func (_c *MockJobServiceProvider_GetTrainingJobStatus_Call) Run(run func(_a0 *job.TrainingJobDetails)) *MockJobServiceProvider_GetTrainingJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*job.TrainingJobDetails))
	})
	return _c
}

func (_c *MockJobServiceProvider_GetTrainingJobStatus_Call) Return(_a0 error) *MockJobServiceProvider_GetTrainingJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceProvider_GetTrainingJobStatus_Call) RunAndReturn(run func(*job.TrainingJobDetails) error) *MockJobServiceProvider_GetTrainingJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTrainingJob provides a mock function with given fields: jobConfig
func (_m *MockJobServiceProvider) SubmitTrainingJob(jobConfig *job.TrainingJobDetails) error {
	ret := _m.Called(jobConfig)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTrainingJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*job.TrainingJobDetails) error); ok {
		r0 = rf(jobConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobServiceProvider_SubmitTrainingJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTrainingJob'
type MockJobServiceProvider_SubmitTrainingJob_Call struct {
	*mock.Call
}

// SubmitTrainingJob is a helper method to define mock.On call
//   - jobConfig *job.TrainingJobDetails
func (_e *MockJobServiceProvider_Expecter) SubmitTrainingJob(jobConfig interface{}) *MockJobServiceProvider_SubmitTrainingJob_Call {
	return &MockJobServiceProvider_SubmitTrainingJob_Call{Call: _e.mock.On("SubmitTrainingJob", jobConfig)}
}

func (_c *MockJobServiceProvider_SubmitTrainingJob_Call) Run(run func(jobConfig *job.TrainingJobDetails)) *MockJobServiceProvider_SubmitTrainingJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*job.TrainingJobDetails))
	})
	return _c
}

func (_c *MockJobServiceProvider_SubmitTrainingJob_Call) Return(_a0 error) *MockJobServiceProvider_SubmitTrainingJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceProvider_SubmitTrainingJob_Call) RunAndReturn(run func(*job.TrainingJobDetails) error) *MockJobServiceProvider_SubmitTrainingJob_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: remoteFile, localFile
func (_m *MockJobServiceProvider) UploadFile(remoteFile string, localFile string) error {
	ret := _m.Called(remoteFile, localFile)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(remoteFile, localFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobServiceProvider_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockJobServiceProvider_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - remoteFile string
//   - localFile string
func (_e *MockJobServiceProvider_Expecter) UploadFile(remoteFile interface{}, localFile interface{}) *MockJobServiceProvider_UploadFile_Call {
	return &MockJobServiceProvider_UploadFile_Call{Call: _e.mock.On("UploadFile", remoteFile, localFile)}
}

func (_c *MockJobServiceProvider_UploadFile_Call) Run(run func(remoteFile string, localFile string)) *MockJobServiceProvider_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJobServiceProvider_UploadFile_Call) Return(_a0 error) *MockJobServiceProvider_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceProvider_UploadFile_Call) RunAndReturn(run func(string, string) error) *MockJobServiceProvider_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobServiceProvider creates a new instance of MockJobServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobServiceProvider {
	mock := &MockJobServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
