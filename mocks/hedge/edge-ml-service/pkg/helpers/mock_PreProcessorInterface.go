// Code generated by mockery v2.45.1. DO NOT EDIT.

package helpers

import (
	config "hedge/edge-ml-service/pkg/dto/config"
	data "hedge/edge-ml-service/pkg/dto/data"

	helpers "hedge/edge-ml-service/pkg/helpers"

	logger "github.com/edgexfoundry/go-mod-core-contracts/v3/clients/logger"

	mock "github.com/stretchr/testify/mock"
)

// MockPreProcessorInterface is an autogenerated mock type for the PreProcessorInterface type
type MockPreProcessorInterface struct {
	mock.Mock
}

type MockPreProcessorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreProcessorInterface) EXPECT() *MockPreProcessorInterface_Expecter {
	return &MockPreProcessorInterface_Expecter{mock: &_m.Mock}
}

// AccumulateMultipleTimeseriesFeaturesSets provides a mock function with given fields: releaseCandidates
func (_m *MockPreProcessorInterface) AccumulateMultipleTimeseriesFeaturesSets(releaseCandidates map[string][]data.InferenceData) (bool, map[string]data.InferenceData) {
	ret := _m.Called(releaseCandidates)

	if len(ret) == 0 {
		panic("no return value specified for AccumulateMultipleTimeseriesFeaturesSets")
	}

	var r0 bool
	var r1 map[string]data.InferenceData
	if rf, ok := ret.Get(0).(func(map[string][]data.InferenceData) (bool, map[string]data.InferenceData)); ok {
		return rf(releaseCandidates)
	}
	if rf, ok := ret.Get(0).(func(map[string][]data.InferenceData) bool); ok {
		r0 = rf(releaseCandidates)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(map[string][]data.InferenceData) map[string]data.InferenceData); ok {
		r1 = rf(releaseCandidates)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]data.InferenceData)
		}
	}

	return r0, r1
}

// MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccumulateMultipleTimeseriesFeaturesSets'
type MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call struct {
	*mock.Call
}

// AccumulateMultipleTimeseriesFeaturesSets is a helper method to define mock.On call
//   - releaseCandidates map[string][]data.InferenceData
func (_e *MockPreProcessorInterface_Expecter) AccumulateMultipleTimeseriesFeaturesSets(releaseCandidates interface{}) *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call {
	return &MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call{Call: _e.mock.On("AccumulateMultipleTimeseriesFeaturesSets", releaseCandidates)}
}

func (_c *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call) Run(run func(releaseCandidates map[string][]data.InferenceData)) *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string][]data.InferenceData))
	})
	return _c
}

func (_c *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call) Return(_a0 bool, _a1 map[string]data.InferenceData) *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call) RunAndReturn(run func(map[string][]data.InferenceData) (bool, map[string]data.InferenceData)) *MockPreProcessorInterface_AccumulateMultipleTimeseriesFeaturesSets_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeaturesToIndex provides a mock function with given fields:
func (_m *MockPreProcessorInterface) GetFeaturesToIndex() map[string]int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeaturesToIndex")
	}

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	return r0
}

// MockPreProcessorInterface_GetFeaturesToIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeaturesToIndex'
type MockPreProcessorInterface_GetFeaturesToIndex_Call struct {
	*mock.Call
}

// GetFeaturesToIndex is a helper method to define mock.On call
func (_e *MockPreProcessorInterface_Expecter) GetFeaturesToIndex() *MockPreProcessorInterface_GetFeaturesToIndex_Call {
	return &MockPreProcessorInterface_GetFeaturesToIndex_Call{Call: _e.mock.On("GetFeaturesToIndex")}
}

func (_c *MockPreProcessorInterface_GetFeaturesToIndex_Call) Run(run func()) *MockPreProcessorInterface_GetFeaturesToIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetFeaturesToIndex_Call) Return(_a0 map[string]int) *MockPreProcessorInterface_GetFeaturesToIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetFeaturesToIndex_Call) RunAndReturn(run func() map[string]int) *MockPreProcessorInterface_GetFeaturesToIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLAlgorithmDefinition provides a mock function with given fields:
func (_m *MockPreProcessorInterface) GetMLAlgorithmDefinition() *config.MLAlgorithmDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMLAlgorithmDefinition")
	}

	var r0 *config.MLAlgorithmDefinition
	if rf, ok := ret.Get(0).(func() *config.MLAlgorithmDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.MLAlgorithmDefinition)
		}
	}

	return r0
}

// MockPreProcessorInterface_GetMLAlgorithmDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLAlgorithmDefinition'
type MockPreProcessorInterface_GetMLAlgorithmDefinition_Call struct {
	*mock.Call
}

// GetMLAlgorithmDefinition is a helper method to define mock.On call
func (_e *MockPreProcessorInterface_Expecter) GetMLAlgorithmDefinition() *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call {
	return &MockPreProcessorInterface_GetMLAlgorithmDefinition_Call{Call: _e.mock.On("GetMLAlgorithmDefinition")}
}

func (_c *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call) Run(run func()) *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call) Return(_a0 *config.MLAlgorithmDefinition) *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call) RunAndReturn(run func() *config.MLAlgorithmDefinition) *MockPreProcessorInterface_GetMLAlgorithmDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLModelConfig provides a mock function with given fields:
func (_m *MockPreProcessorInterface) GetMLModelConfig() *config.MLModelConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMLModelConfig")
	}

	var r0 *config.MLModelConfig
	if rf, ok := ret.Get(0).(func() *config.MLModelConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.MLModelConfig)
		}
	}

	return r0
}

// MockPreProcessorInterface_GetMLModelConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLModelConfig'
type MockPreProcessorInterface_GetMLModelConfig_Call struct {
	*mock.Call
}

// GetMLModelConfig is a helper method to define mock.On call
func (_e *MockPreProcessorInterface_Expecter) GetMLModelConfig() *MockPreProcessorInterface_GetMLModelConfig_Call {
	return &MockPreProcessorInterface_GetMLModelConfig_Call{Call: _e.mock.On("GetMLModelConfig")}
}

func (_c *MockPreProcessorInterface_GetMLModelConfig_Call) Run(run func()) *MockPreProcessorInterface_GetMLModelConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetMLModelConfig_Call) Return(_a0 *config.MLModelConfig) *MockPreProcessorInterface_GetMLModelConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetMLModelConfig_Call) RunAndReturn(run func() *config.MLModelConfig) *MockPreProcessorInterface_GetMLModelConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputFeaturesToIndex provides a mock function with given fields:
func (_m *MockPreProcessorInterface) GetOutputFeaturesToIndex() map[string]int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputFeaturesToIndex")
	}

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	return r0
}

// MockPreProcessorInterface_GetOutputFeaturesToIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputFeaturesToIndex'
type MockPreProcessorInterface_GetOutputFeaturesToIndex_Call struct {
	*mock.Call
}

// GetOutputFeaturesToIndex is a helper method to define mock.On call
func (_e *MockPreProcessorInterface_Expecter) GetOutputFeaturesToIndex() *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call {
	return &MockPreProcessorInterface_GetOutputFeaturesToIndex_Call{Call: _e.mock.On("GetOutputFeaturesToIndex")}
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call) Run(run func()) *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call) Return(_a0 map[string]int) *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call) RunAndReturn(run func() map[string]int) *MockPreProcessorInterface_GetOutputFeaturesToIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputFeaturesToValues provides a mock function with given fields: sampledData
func (_m *MockPreProcessorInterface) GetOutputFeaturesToValues(sampledData []*data.TSDataElement) map[string]interface{} {
	ret := _m.Called(sampledData)

	if len(ret) == 0 {
		panic("no return value specified for GetOutputFeaturesToValues")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]*data.TSDataElement) map[string]interface{}); ok {
		r0 = rf(sampledData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockPreProcessorInterface_GetOutputFeaturesToValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputFeaturesToValues'
type MockPreProcessorInterface_GetOutputFeaturesToValues_Call struct {
	*mock.Call
}

// GetOutputFeaturesToValues is a helper method to define mock.On call
//   - sampledData []*data.TSDataElement
func (_e *MockPreProcessorInterface_Expecter) GetOutputFeaturesToValues(sampledData interface{}) *MockPreProcessorInterface_GetOutputFeaturesToValues_Call {
	return &MockPreProcessorInterface_GetOutputFeaturesToValues_Call{Call: _e.mock.On("GetOutputFeaturesToValues", sampledData)}
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToValues_Call) Run(run func(sampledData []*data.TSDataElement)) *MockPreProcessorInterface_GetOutputFeaturesToValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*data.TSDataElement))
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToValues_Call) Return(_a0 map[string]interface{}) *MockPreProcessorInterface_GetOutputFeaturesToValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetOutputFeaturesToValues_Call) RunAndReturn(run func([]*data.TSDataElement) map[string]interface{}) *MockPreProcessorInterface_GetOutputFeaturesToValues_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreProcessor provides a mock function with given fields: lc, mlModelConfig, mlAlgoDefinition, isTrainingContext
func (_m *MockPreProcessorInterface) GetPreProcessor(lc logger.LoggingClient, mlModelConfig *config.MLModelConfig, mlAlgoDefinition *config.MLAlgorithmDefinition, isTrainingContext bool) helpers.PreProcessorInterface {
	ret := _m.Called(lc, mlModelConfig, mlAlgoDefinition, isTrainingContext)

	if len(ret) == 0 {
		panic("no return value specified for GetPreProcessor")
	}

	var r0 helpers.PreProcessorInterface
	if rf, ok := ret.Get(0).(func(logger.LoggingClient, *config.MLModelConfig, *config.MLAlgorithmDefinition, bool) helpers.PreProcessorInterface); ok {
		r0 = rf(lc, mlModelConfig, mlAlgoDefinition, isTrainingContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(helpers.PreProcessorInterface)
		}
	}

	return r0
}

// MockPreProcessorInterface_GetPreProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreProcessor'
type MockPreProcessorInterface_GetPreProcessor_Call struct {
	*mock.Call
}

// GetPreProcessor is a helper method to define mock.On call
//   - lc logger.LoggingClient
//   - mlModelConfig *config.MLModelConfig
//   - mlAlgoDefinition *config.MLAlgorithmDefinition
//   - isTrainingContext bool
func (_e *MockPreProcessorInterface_Expecter) GetPreProcessor(lc interface{}, mlModelConfig interface{}, mlAlgoDefinition interface{}, isTrainingContext interface{}) *MockPreProcessorInterface_GetPreProcessor_Call {
	return &MockPreProcessorInterface_GetPreProcessor_Call{Call: _e.mock.On("GetPreProcessor", lc, mlModelConfig, mlAlgoDefinition, isTrainingContext)}
}

func (_c *MockPreProcessorInterface_GetPreProcessor_Call) Run(run func(lc logger.LoggingClient, mlModelConfig *config.MLModelConfig, mlAlgoDefinition *config.MLAlgorithmDefinition, isTrainingContext bool)) *MockPreProcessorInterface_GetPreProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.LoggingClient), args[1].(*config.MLModelConfig), args[2].(*config.MLAlgorithmDefinition), args[3].(bool))
	})
	return _c
}

func (_c *MockPreProcessorInterface_GetPreProcessor_Call) Return(_a0 helpers.PreProcessorInterface) *MockPreProcessorInterface_GetPreProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GetPreProcessor_Call) RunAndReturn(run func(logger.LoggingClient, *config.MLModelConfig, *config.MLAlgorithmDefinition, bool) helpers.PreProcessorInterface) *MockPreProcessorInterface_GetPreProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// GroupSamples provides a mock function with given fields: sampledData
func (_m *MockPreProcessorInterface) GroupSamples(sampledData []*data.TSDataElement) map[string][]*data.TSDataElement {
	ret := _m.Called(sampledData)

	if len(ret) == 0 {
		panic("no return value specified for GroupSamples")
	}

	var r0 map[string][]*data.TSDataElement
	if rf, ok := ret.Get(0).(func([]*data.TSDataElement) map[string][]*data.TSDataElement); ok {
		r0 = rf(sampledData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*data.TSDataElement)
		}
	}

	return r0
}

// MockPreProcessorInterface_GroupSamples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupSamples'
type MockPreProcessorInterface_GroupSamples_Call struct {
	*mock.Call
}

// GroupSamples is a helper method to define mock.On call
//   - sampledData []*data.TSDataElement
func (_e *MockPreProcessorInterface_Expecter) GroupSamples(sampledData interface{}) *MockPreProcessorInterface_GroupSamples_Call {
	return &MockPreProcessorInterface_GroupSamples_Call{Call: _e.mock.On("GroupSamples", sampledData)}
}

func (_c *MockPreProcessorInterface_GroupSamples_Call) Run(run func(sampledData []*data.TSDataElement)) *MockPreProcessorInterface_GroupSamples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*data.TSDataElement))
	})
	return _c
}

func (_c *MockPreProcessorInterface_GroupSamples_Call) Return(_a0 map[string][]*data.TSDataElement) *MockPreProcessorInterface_GroupSamples_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPreProcessorInterface_GroupSamples_Call) RunAndReturn(run func([]*data.TSDataElement) map[string][]*data.TSDataElement) *MockPreProcessorInterface_GroupSamples_Call {
	_c.Call.Return(run)
	return _c
}

// TakeSample provides a mock function with given fields: tsDataElements
func (_m *MockPreProcessorInterface) TakeSample(tsDataElements []*data.TSDataElement) (bool, []*data.TSDataElement) {
	ret := _m.Called(tsDataElements)

	if len(ret) == 0 {
		panic("no return value specified for TakeSample")
	}

	var r0 bool
	var r1 []*data.TSDataElement
	if rf, ok := ret.Get(0).(func([]*data.TSDataElement) (bool, []*data.TSDataElement)); ok {
		return rf(tsDataElements)
	}
	if rf, ok := ret.Get(0).(func([]*data.TSDataElement) bool); ok {
		r0 = rf(tsDataElements)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]*data.TSDataElement) []*data.TSDataElement); ok {
		r1 = rf(tsDataElements)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*data.TSDataElement)
		}
	}

	return r0, r1
}

// MockPreProcessorInterface_TakeSample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeSample'
type MockPreProcessorInterface_TakeSample_Call struct {
	*mock.Call
}

// TakeSample is a helper method to define mock.On call
//   - tsDataElements []*data.TSDataElement
func (_e *MockPreProcessorInterface_Expecter) TakeSample(tsDataElements interface{}) *MockPreProcessorInterface_TakeSample_Call {
	return &MockPreProcessorInterface_TakeSample_Call{Call: _e.mock.On("TakeSample", tsDataElements)}
}

func (_c *MockPreProcessorInterface_TakeSample_Call) Run(run func(tsDataElements []*data.TSDataElement)) *MockPreProcessorInterface_TakeSample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*data.TSDataElement))
	})
	return _c
}

func (_c *MockPreProcessorInterface_TakeSample_Call) Return(_a0 bool, _a1 []*data.TSDataElement) *MockPreProcessorInterface_TakeSample_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreProcessorInterface_TakeSample_Call) RunAndReturn(run func([]*data.TSDataElement) (bool, []*data.TSDataElement)) *MockPreProcessorInterface_TakeSample_Call {
	_c.Call.Return(run)
	return _c
}

// TransformToFeature provides a mock function with given fields: groupName, sampledData
func (_m *MockPreProcessorInterface) TransformToFeature(groupName string, sampledData []*data.TSDataElement) (map[int64][]interface{}, bool) {
	ret := _m.Called(groupName, sampledData)

	if len(ret) == 0 {
		panic("no return value specified for TransformToFeature")
	}

	var r0 map[int64][]interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, []*data.TSDataElement) (map[int64][]interface{}, bool)); ok {
		return rf(groupName, sampledData)
	}
	if rf, ok := ret.Get(0).(func(string, []*data.TSDataElement) map[int64][]interface{}); ok {
		r0 = rf(groupName, sampledData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64][]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, []*data.TSDataElement) bool); ok {
		r1 = rf(groupName, sampledData)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPreProcessorInterface_TransformToFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformToFeature'
type MockPreProcessorInterface_TransformToFeature_Call struct {
	*mock.Call
}

// TransformToFeature is a helper method to define mock.On call
//   - groupName string
//   - sampledData []*data.TSDataElement
func (_e *MockPreProcessorInterface_Expecter) TransformToFeature(groupName interface{}, sampledData interface{}) *MockPreProcessorInterface_TransformToFeature_Call {
	return &MockPreProcessorInterface_TransformToFeature_Call{Call: _e.mock.On("TransformToFeature", groupName, sampledData)}
}

func (_c *MockPreProcessorInterface_TransformToFeature_Call) Run(run func(groupName string, sampledData []*data.TSDataElement)) *MockPreProcessorInterface_TransformToFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*data.TSDataElement))
	})
	return _c
}

func (_c *MockPreProcessorInterface_TransformToFeature_Call) Return(_a0 map[int64][]interface{}, _a1 bool) *MockPreProcessorInterface_TransformToFeature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreProcessorInterface_TransformToFeature_Call) RunAndReturn(run func(string, []*data.TSDataElement) (map[int64][]interface{}, bool)) *MockPreProcessorInterface_TransformToFeature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPreProcessorInterface creates a new instance of MockPreProcessorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreProcessorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreProcessorInterface {
	mock := &MockPreProcessorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
