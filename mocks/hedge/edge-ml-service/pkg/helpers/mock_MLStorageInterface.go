// Code generated by mockery v2.45.1. DO NOT EDIT.

package helpers

import (
	helpers "hedge/edge-ml-service/pkg/helpers"
	logger "github.com/edgexfoundry/go-mod-core-contracts/v3/clients/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockMLStorageInterface is an autogenerated mock type for the MLStorageInterface type
type MockMLStorageInterface struct {
	mock.Mock
}

type MockMLStorageInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMLStorageInterface) EXPECT() *MockMLStorageInterface_Expecter {
	return &MockMLStorageInterface_Expecter{mock: &_m.Mock}
}

// AddModelAndConfigFile provides a mock function with given fields: modelBytes
func (_m *MockMLStorageInterface) AddModelAndConfigFile(modelBytes []byte) error {
	ret := _m.Called(modelBytes)

	if len(ret) == 0 {
		panic("no return value specified for AddModelAndConfigFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(modelBytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_AddModelAndConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddModelAndConfigFile'
type MockMLStorageInterface_AddModelAndConfigFile_Call struct {
	*mock.Call
}

// AddModelAndConfigFile is a helper method to define mock.On call
//   - modelBytes []byte
func (_e *MockMLStorageInterface_Expecter) AddModelAndConfigFile(modelBytes interface{}) *MockMLStorageInterface_AddModelAndConfigFile_Call {
	return &MockMLStorageInterface_AddModelAndConfigFile_Call{Call: _e.mock.On("AddModelAndConfigFile", modelBytes)}
}

func (_c *MockMLStorageInterface_AddModelAndConfigFile_Call) Run(run func(modelBytes []byte)) *MockMLStorageInterface_AddModelAndConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockMLStorageInterface_AddModelAndConfigFile_Call) Return(_a0 error) *MockMLStorageInterface_AddModelAndConfigFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_AddModelAndConfigFile_Call) RunAndReturn(run func([]byte) error) *MockMLStorageInterface_AddModelAndConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddModelIgnoreFile provides a mock function with given fields:
func (_m *MockMLStorageInterface) AddModelIgnoreFile() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddModelIgnoreFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_AddModelIgnoreFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddModelIgnoreFile'
type MockMLStorageInterface_AddModelIgnoreFile_Call struct {
	*mock.Call
}

// AddModelIgnoreFile is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) AddModelIgnoreFile() *MockMLStorageInterface_AddModelIgnoreFile_Call {
	return &MockMLStorageInterface_AddModelIgnoreFile_Call{Call: _e.mock.On("AddModelIgnoreFile")}
}

func (_c *MockMLStorageInterface_AddModelIgnoreFile_Call) Run(run func()) *MockMLStorageInterface_AddModelIgnoreFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_AddModelIgnoreFile_Call) Return(_a0 error) *MockMLStorageInterface_AddModelIgnoreFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_AddModelIgnoreFile_Call) RunAndReturn(run func() error) *MockMLStorageInterface_AddModelIgnoreFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddTrainingDataToFile provides a mock function with given fields: data, headers
func (_m *MockMLStorageInterface) AddTrainingDataToFile(data [][]string, headers []string) error {
	ret := _m.Called(data, headers)

	if len(ret) == 0 {
		panic("no return value specified for AddTrainingDataToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([][]string, []string) error); ok {
		r0 = rf(data, headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_AddTrainingDataToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTrainingDataToFile'
type MockMLStorageInterface_AddTrainingDataToFile_Call struct {
	*mock.Call
}

// AddTrainingDataToFile is a helper method to define mock.On call
//   - data [][]string
//   - headers []string
func (_e *MockMLStorageInterface_Expecter) AddTrainingDataToFile(data interface{}, headers interface{}) *MockMLStorageInterface_AddTrainingDataToFile_Call {
	return &MockMLStorageInterface_AddTrainingDataToFile_Call{Call: _e.mock.On("AddTrainingDataToFile", data, headers)}
}

func (_c *MockMLStorageInterface_AddTrainingDataToFile_Call) Run(run func(data [][]string, headers []string)) *MockMLStorageInterface_AddTrainingDataToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]string), args[1].([]string))
	})
	return _c
}

func (_c *MockMLStorageInterface_AddTrainingDataToFile_Call) Return(_a0 error) *MockMLStorageInterface_AddTrainingDataToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_AddTrainingDataToFile_Call) RunAndReturn(run func([][]string, []string) error) *MockMLStorageInterface_AddTrainingDataToFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddTrainingDataToFileWithFileName provides a mock function with given fields: data, headers, fileName
func (_m *MockMLStorageInterface) AddTrainingDataToFileWithFileName(data [][]string, headers []string, fileName string) error {
	ret := _m.Called(data, headers, fileName)

	if len(ret) == 0 {
		panic("no return value specified for AddTrainingDataToFileWithFileName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([][]string, []string, string) error); ok {
		r0 = rf(data, headers, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTrainingDataToFileWithFileName'
type MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call struct {
	*mock.Call
}

// AddTrainingDataToFileWithFileName is a helper method to define mock.On call
//   - data [][]string
//   - headers []string
//   - fileName string
func (_e *MockMLStorageInterface_Expecter) AddTrainingDataToFileWithFileName(data interface{}, headers interface{}, fileName interface{}) *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call {
	return &MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call{Call: _e.mock.On("AddTrainingDataToFileWithFileName", data, headers, fileName)}
}

func (_c *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call) Run(run func(data [][]string, headers []string, fileName string)) *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]string), args[1].([]string), args[2].(string))
	})
	return _c
}

func (_c *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call) Return(_a0 error) *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call) RunAndReturn(run func([][]string, []string, string) error) *MockMLStorageInterface_AddTrainingDataToFileWithFileName_Call {
	_c.Call.Return(run)
	return _c
}

// CompressFiles provides a mock function with given fields: inputFiles, zipFilePath
func (_m *MockMLStorageInterface) CompressFiles(inputFiles []helpers.ZipFileInfo, zipFilePath string) error {
	ret := _m.Called(inputFiles, zipFilePath)

	if len(ret) == 0 {
		panic("no return value specified for CompressFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]helpers.ZipFileInfo, string) error); ok {
		r0 = rf(inputFiles, zipFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_CompressFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressFiles'
type MockMLStorageInterface_CompressFiles_Call struct {
	*mock.Call
}

// CompressFiles is a helper method to define mock.On call
//   - inputFiles []helpers.ZipFileInfo
//   - zipFilePath string
func (_e *MockMLStorageInterface_Expecter) CompressFiles(inputFiles interface{}, zipFilePath interface{}) *MockMLStorageInterface_CompressFiles_Call {
	return &MockMLStorageInterface_CompressFiles_Call{Call: _e.mock.On("CompressFiles", inputFiles, zipFilePath)}
}

func (_c *MockMLStorageInterface_CompressFiles_Call) Run(run func(inputFiles []helpers.ZipFileInfo, zipFilePath string)) *MockMLStorageInterface_CompressFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]helpers.ZipFileInfo), args[1].(string))
	})
	return _c
}

func (_c *MockMLStorageInterface_CompressFiles_Call) Return(_a0 error) *MockMLStorageInterface_CompressFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_CompressFiles_Call) RunAndReturn(run func([]helpers.ZipFileInfo, string) error) *MockMLStorageInterface_CompressFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CompressFolder provides a mock function with given fields: inputFolder, zipFileName
func (_m *MockMLStorageInterface) CompressFolder(inputFolder string, zipFileName string) error {
	ret := _m.Called(inputFolder, zipFileName)

	if len(ret) == 0 {
		panic("no return value specified for CompressFolder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputFolder, zipFileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_CompressFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressFolder'
type MockMLStorageInterface_CompressFolder_Call struct {
	*mock.Call
}

// CompressFolder is a helper method to define mock.On call
//   - inputFolder string
//   - zipFileName string
func (_e *MockMLStorageInterface_Expecter) CompressFolder(inputFolder interface{}, zipFileName interface{}) *MockMLStorageInterface_CompressFolder_Call {
	return &MockMLStorageInterface_CompressFolder_Call{Call: _e.mock.On("CompressFolder", inputFolder, zipFileName)}
}

func (_c *MockMLStorageInterface_CompressFolder_Call) Run(run func(inputFolder string, zipFileName string)) *MockMLStorageInterface_CompressFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLStorageInterface_CompressFolder_Call) Return(_a0 error) *MockMLStorageInterface_CompressFolder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_CompressFolder_Call) RunAndReturn(run func(string, string) error) *MockMLStorageInterface_CompressFolder_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function with given fields: filename
func (_m *MockMLStorageInterface) FileExists(filename string) bool {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMLStorageInterface_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockMLStorageInterface_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - filename string
func (_e *MockMLStorageInterface_Expecter) FileExists(filename interface{}) *MockMLStorageInterface_FileExists_Call {
	return &MockMLStorageInterface_FileExists_Call{Call: _e.mock.On("FileExists", filename)}
}

func (_c *MockMLStorageInterface_FileExists_Call) Run(run func(filename string)) *MockMLStorageInterface_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLStorageInterface_FileExists_Call) Return(_a0 bool) *MockMLStorageInterface_FileExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_FileExists_Call) RunAndReturn(run func(string) bool) *MockMLStorageInterface_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratorRemoteConfigJsonFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GeneratorRemoteConfigJsonFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratorRemoteConfigJsonFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratorRemoteConfigJsonFileName'
type MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call struct {
	*mock.Call
}

// GeneratorRemoteConfigJsonFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GeneratorRemoteConfigJsonFileName() *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call {
	return &MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call{Call: _e.mock.On("GeneratorRemoteConfigJsonFileName")}
}

func (_c *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call) Run(run func()) *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call) Return(_a0 string) *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GeneratorRemoteConfigJsonFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratorRemoteTrainingDataZipFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GeneratorRemoteTrainingDataZipFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratorRemoteTrainingDataZipFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratorRemoteTrainingDataZipFileName'
type MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call struct {
	*mock.Call
}

// GeneratorRemoteTrainingDataZipFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GeneratorRemoteTrainingDataZipFileName() *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call {
	return &MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call{Call: _e.mock.On("GeneratorRemoteTrainingDataZipFileName")}
}

func (_c *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call) Run(run func()) *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call) Return(_a0 string) *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GeneratorRemoteTrainingDataZipFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetBaseLocalDirectory provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetBaseLocalDirectory() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseLocalDirectory")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetBaseLocalDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseLocalDirectory'
type MockMLStorageInterface_GetBaseLocalDirectory_Call struct {
	*mock.Call
}

// GetBaseLocalDirectory is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetBaseLocalDirectory() *MockMLStorageInterface_GetBaseLocalDirectory_Call {
	return &MockMLStorageInterface_GetBaseLocalDirectory_Call{Call: _e.mock.On("GetBaseLocalDirectory")}
}

func (_c *MockMLStorageInterface_GetBaseLocalDirectory_Call) Run(run func()) *MockMLStorageInterface_GetBaseLocalDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetBaseLocalDirectory_Call) Return(_a0 string) *MockMLStorageInterface_GetBaseLocalDirectory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetBaseLocalDirectory_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetBaseLocalDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalTrainingDataBaseDir provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetLocalTrainingDataBaseDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalTrainingDataBaseDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalTrainingDataBaseDir'
type MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call struct {
	*mock.Call
}

// GetLocalTrainingDataBaseDir is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetLocalTrainingDataBaseDir() *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call {
	return &MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call{Call: _e.mock.On("GetLocalTrainingDataBaseDir")}
}

func (_c *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call) Run(run func()) *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call) Return(_a0 string) *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetLocalTrainingDataBaseDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLModelConfigFileName provides a mock function with given fields: isTrainingDataGeneration
func (_m *MockMLStorageInterface) GetMLModelConfigFileName(isTrainingDataGeneration bool) string {
	ret := _m.Called(isTrainingDataGeneration)

	if len(ret) == 0 {
		panic("no return value specified for GetMLModelConfigFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(isTrainingDataGeneration)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetMLModelConfigFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLModelConfigFileName'
type MockMLStorageInterface_GetMLModelConfigFileName_Call struct {
	*mock.Call
}

// GetMLModelConfigFileName is a helper method to define mock.On call
//   - isTrainingDataGeneration bool
func (_e *MockMLStorageInterface_Expecter) GetMLModelConfigFileName(isTrainingDataGeneration interface{}) *MockMLStorageInterface_GetMLModelConfigFileName_Call {
	return &MockMLStorageInterface_GetMLModelConfigFileName_Call{Call: _e.mock.On("GetMLModelConfigFileName", isTrainingDataGeneration)}
}

func (_c *MockMLStorageInterface_GetMLModelConfigFileName_Call) Run(run func(isTrainingDataGeneration bool)) *MockMLStorageInterface_GetMLModelConfigFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockMLStorageInterface_GetMLModelConfigFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetMLModelConfigFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetMLModelConfigFileName_Call) RunAndReturn(run func(bool) string) *MockMLStorageInterface_GetMLModelConfigFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLStorage provides a mock function with given fields: baseLocalDirectory, mlAlgorithm, mlTrainingDataConfig, lc
func (_m *MockMLStorageInterface) GetMLStorage(baseLocalDirectory string, mlAlgorithm string, mlTrainingDataConfig string, lc logger.LoggingClient) helpers.MLStorageInterface {
	ret := _m.Called(baseLocalDirectory, mlAlgorithm, mlTrainingDataConfig, lc)

	if len(ret) == 0 {
		panic("no return value specified for GetMLStorage")
	}

	var r0 helpers.MLStorageInterface
	if rf, ok := ret.Get(0).(func(string, string, string, logger.LoggingClient) helpers.MLStorageInterface); ok {
		r0 = rf(baseLocalDirectory, mlAlgorithm, mlTrainingDataConfig, lc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(helpers.MLStorageInterface)
		}
	}

	return r0
}

// MockMLStorageInterface_GetMLStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLStorage'
type MockMLStorageInterface_GetMLStorage_Call struct {
	*mock.Call
}

// GetMLStorage is a helper method to define mock.On call
//   - baseLocalDirectory string
//   - mlAlgorithm string
//   - mlTrainingDataConfig string
//   - lc logger.LoggingClient
func (_e *MockMLStorageInterface_Expecter) GetMLStorage(baseLocalDirectory interface{}, mlAlgorithm interface{}, mlTrainingDataConfig interface{}, lc interface{}) *MockMLStorageInterface_GetMLStorage_Call {
	return &MockMLStorageInterface_GetMLStorage_Call{Call: _e.mock.On("GetMLStorage", baseLocalDirectory, mlAlgorithm, mlTrainingDataConfig, lc)}
}

func (_c *MockMLStorageInterface_GetMLStorage_Call) Run(run func(baseLocalDirectory string, mlAlgorithm string, mlTrainingDataConfig string, lc logger.LoggingClient)) *MockMLStorageInterface_GetMLStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(logger.LoggingClient))
	})
	return _c
}

func (_c *MockMLStorageInterface_GetMLStorage_Call) Return(_a0 helpers.MLStorageInterface) *MockMLStorageInterface_GetMLStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetMLStorage_Call) RunAndReturn(run func(string, string, string, logger.LoggingClient) helpers.MLStorageInterface) *MockMLStorageInterface_GetMLStorage_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelDir provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetModelDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetModelDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelDir'
type MockMLStorageInterface_GetModelDir_Call struct {
	*mock.Call
}

// GetModelDir is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetModelDir() *MockMLStorageInterface_GetModelDir_Call {
	return &MockMLStorageInterface_GetModelDir_Call{Call: _e.mock.On("GetModelDir")}
}

func (_c *MockMLStorageInterface_GetModelDir_Call) Run(run func()) *MockMLStorageInterface_GetModelDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetModelDir_Call) Return(_a0 string) *MockMLStorageInterface_GetModelDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetModelDir_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetModelDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelIgnoreFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetModelIgnoreFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelIgnoreFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetModelIgnoreFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelIgnoreFileName'
type MockMLStorageInterface_GetModelIgnoreFileName_Call struct {
	*mock.Call
}

// GetModelIgnoreFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetModelIgnoreFileName() *MockMLStorageInterface_GetModelIgnoreFileName_Call {
	return &MockMLStorageInterface_GetModelIgnoreFileName_Call{Call: _e.mock.On("GetModelIgnoreFileName")}
}

func (_c *MockMLStorageInterface_GetModelIgnoreFileName_Call) Run(run func()) *MockMLStorageInterface_GetModelIgnoreFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetModelIgnoreFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetModelIgnoreFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetModelIgnoreFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetModelIgnoreFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelLocalDir provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetModelLocalDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelLocalDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetModelLocalDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelLocalDir'
type MockMLStorageInterface_GetModelLocalDir_Call struct {
	*mock.Call
}

// GetModelLocalDir is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetModelLocalDir() *MockMLStorageInterface_GetModelLocalDir_Call {
	return &MockMLStorageInterface_GetModelLocalDir_Call{Call: _e.mock.On("GetModelLocalDir")}
}

func (_c *MockMLStorageInterface_GetModelLocalDir_Call) Run(run func()) *MockMLStorageInterface_GetModelLocalDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetModelLocalDir_Call) Return(_a0 string) *MockMLStorageInterface_GetModelLocalDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetModelLocalDir_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetModelLocalDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelLocalZipFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetModelLocalZipFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelLocalZipFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetModelLocalZipFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelLocalZipFileName'
type MockMLStorageInterface_GetModelLocalZipFileName_Call struct {
	*mock.Call
}

// GetModelLocalZipFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetModelLocalZipFileName() *MockMLStorageInterface_GetModelLocalZipFileName_Call {
	return &MockMLStorageInterface_GetModelLocalZipFileName_Call{Call: _e.mock.On("GetModelLocalZipFileName")}
}

func (_c *MockMLStorageInterface_GetModelLocalZipFileName_Call) Run(run func()) *MockMLStorageInterface_GetModelLocalZipFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetModelLocalZipFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetModelLocalZipFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetModelLocalZipFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetModelLocalZipFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelZipFile provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetModelZipFile() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModelZipFile")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetModelZipFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelZipFile'
type MockMLStorageInterface_GetModelZipFile_Call struct {
	*mock.Call
}

// GetModelZipFile is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetModelZipFile() *MockMLStorageInterface_GetModelZipFile_Call {
	return &MockMLStorageInterface_GetModelZipFile_Call{Call: _e.mock.On("GetModelZipFile")}
}

func (_c *MockMLStorageInterface_GetModelZipFile_Call) Run(run func()) *MockMLStorageInterface_GetModelZipFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetModelZipFile_Call) Return(_a0 string) *MockMLStorageInterface_GetModelZipFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetModelZipFile_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetModelZipFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteConfigFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetRemoteConfigFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteConfigFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetRemoteConfigFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteConfigFileName'
type MockMLStorageInterface_GetRemoteConfigFileName_Call struct {
	*mock.Call
}

// GetRemoteConfigFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetRemoteConfigFileName() *MockMLStorageInterface_GetRemoteConfigFileName_Call {
	return &MockMLStorageInterface_GetRemoteConfigFileName_Call{Call: _e.mock.On("GetRemoteConfigFileName")}
}

func (_c *MockMLStorageInterface_GetRemoteConfigFileName_Call) Run(run func()) *MockMLStorageInterface_GetRemoteConfigFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetRemoteConfigFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetRemoteConfigFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetRemoteConfigFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetRemoteConfigFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteTrainingDataFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetRemoteTrainingDataFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteTrainingDataFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetRemoteTrainingDataFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteTrainingDataFileName'
type MockMLStorageInterface_GetRemoteTrainingDataFileName_Call struct {
	*mock.Call
}

// GetRemoteTrainingDataFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetRemoteTrainingDataFileName() *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call {
	return &MockMLStorageInterface_GetRemoteTrainingDataFileName_Call{Call: _e.mock.On("GetRemoteTrainingDataFileName")}
}

func (_c *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call) Run(run func()) *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetRemoteTrainingDataFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrainingDataFileName provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetTrainingDataFileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingDataFileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetTrainingDataFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainingDataFileName'
type MockMLStorageInterface_GetTrainingDataFileName_Call struct {
	*mock.Call
}

// GetTrainingDataFileName is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetTrainingDataFileName() *MockMLStorageInterface_GetTrainingDataFileName_Call {
	return &MockMLStorageInterface_GetTrainingDataFileName_Call{Call: _e.mock.On("GetTrainingDataFileName")}
}

func (_c *MockMLStorageInterface_GetTrainingDataFileName_Call) Run(run func()) *MockMLStorageInterface_GetTrainingDataFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetTrainingDataFileName_Call) Return(_a0 string) *MockMLStorageInterface_GetTrainingDataFileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetTrainingDataFileName_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetTrainingDataFileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrainingInputZipFile provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetTrainingInputZipFile() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingInputZipFile")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetTrainingInputZipFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainingInputZipFile'
type MockMLStorageInterface_GetTrainingInputZipFile_Call struct {
	*mock.Call
}

// GetTrainingInputZipFile is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetTrainingInputZipFile() *MockMLStorageInterface_GetTrainingInputZipFile_Call {
	return &MockMLStorageInterface_GetTrainingInputZipFile_Call{Call: _e.mock.On("GetTrainingInputZipFile")}
}

func (_c *MockMLStorageInterface_GetTrainingInputZipFile_Call) Run(run func()) *MockMLStorageInterface_GetTrainingInputZipFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetTrainingInputZipFile_Call) Return(_a0 string) *MockMLStorageInterface_GetTrainingInputZipFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetTrainingInputZipFile_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetTrainingInputZipFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidationLocalDir provides a mock function with given fields:
func (_m *MockMLStorageInterface) GetValidationLocalDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidationLocalDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMLStorageInterface_GetValidationLocalDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidationLocalDir'
type MockMLStorageInterface_GetValidationLocalDir_Call struct {
	*mock.Call
}

// GetValidationLocalDir is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) GetValidationLocalDir() *MockMLStorageInterface_GetValidationLocalDir_Call {
	return &MockMLStorageInterface_GetValidationLocalDir_Call{Call: _e.mock.On("GetValidationLocalDir")}
}

func (_c *MockMLStorageInterface_GetValidationLocalDir_Call) Run(run func()) *MockMLStorageInterface_GetValidationLocalDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_GetValidationLocalDir_Call) Return(_a0 string) *MockMLStorageInterface_GetValidationLocalDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_GetValidationLocalDir_Call) RunAndReturn(run func() string) *MockMLStorageInterface_GetValidationLocalDir_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeFile provides a mock function with given fields: fileName
func (_m *MockMLStorageInterface) InitializeFile(fileName string) error {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for InitializeFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_InitializeFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeFile'
type MockMLStorageInterface_InitializeFile_Call struct {
	*mock.Call
}

// InitializeFile is a helper method to define mock.On call
//   - fileName string
func (_e *MockMLStorageInterface_Expecter) InitializeFile(fileName interface{}) *MockMLStorageInterface_InitializeFile_Call {
	return &MockMLStorageInterface_InitializeFile_Call{Call: _e.mock.On("InitializeFile", fileName)}
}

func (_c *MockMLStorageInterface_InitializeFile_Call) Run(run func(fileName string)) *MockMLStorageInterface_InitializeFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLStorageInterface_InitializeFile_Call) Return(_a0 error) *MockMLStorageInterface_InitializeFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_InitializeFile_Call) RunAndReturn(run func(string) error) *MockMLStorageInterface_InitializeFile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveModelIgnoreFile provides a mock function with given fields:
func (_m *MockMLStorageInterface) RemoveModelIgnoreFile() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveModelIgnoreFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMLStorageInterface_RemoveModelIgnoreFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveModelIgnoreFile'
type MockMLStorageInterface_RemoveModelIgnoreFile_Call struct {
	*mock.Call
}

// RemoveModelIgnoreFile is a helper method to define mock.On call
func (_e *MockMLStorageInterface_Expecter) RemoveModelIgnoreFile() *MockMLStorageInterface_RemoveModelIgnoreFile_Call {
	return &MockMLStorageInterface_RemoveModelIgnoreFile_Call{Call: _e.mock.On("RemoveModelIgnoreFile")}
}

func (_c *MockMLStorageInterface_RemoveModelIgnoreFile_Call) Run(run func()) *MockMLStorageInterface_RemoveModelIgnoreFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLStorageInterface_RemoveModelIgnoreFile_Call) Return(_a0 error) *MockMLStorageInterface_RemoveModelIgnoreFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLStorageInterface_RemoveModelIgnoreFile_Call) RunAndReturn(run func() error) *MockMLStorageInterface_RemoveModelIgnoreFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMLStorageInterface creates a new instance of MockMLStorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMLStorageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMLStorageInterface {
	mock := &MockMLStorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
