// Code generated by mockery v2.38.0. DO NOT EDIT.

package ml_agent

import (
	ml_agent "hedge/edge-ml-service/pkg/ml-agent"
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"

	ml_model "hedge/edge-ml-service/pkg/dto/ml_model"

	mock "github.com/stretchr/testify/mock"
)

// MockMLAgentMQTTPublisherInterface is an autogenerated mock type for the MLAgentMQTTPublisherInterface type
type MockMLAgentMQTTPublisherInterface struct {
	mock.Mock
}

type MockMLAgentMQTTPublisherInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMLAgentMQTTPublisherInterface) EXPECT() *MockMLAgentMQTTPublisherInterface_Expecter {
	return &MockMLAgentMQTTPublisherInterface_Expecter{mock: &_m.Mock}
}

// BuildModelDownloadStatusPayload provides a mock function with given fields: ctx, modelDeployCommand, isSuccess, message
func (_m *MockMLAgentMQTTPublisherInterface) BuildModelDownloadStatusPayload(ctx interfaces.AppFunctionContext, modelDeployCommand ml_model.ModelDeployCommand, isSuccess bool, message string) ml_model.ModelDeploymentStatus {
	ret := _m.Called(ctx, modelDeployCommand, isSuccess, message)

	if len(ret) == 0 {
		panic("no return value specified for BuildModelDownloadStatusPayload")
	}

	var r0 ml_model.ModelDeploymentStatus
	if rf, ok := ret.Get(0).(func(interfaces.AppFunctionContext, ml_model.ModelDeployCommand, bool, string) ml_model.ModelDeploymentStatus); ok {
		r0 = rf(ctx, modelDeployCommand, isSuccess, message)
	} else {
		r0 = ret.Get(0).(ml_model.ModelDeploymentStatus)
	}

	return r0
}

// MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildModelDownloadStatusPayload'
type MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call struct {
	*mock.Call
}

// BuildModelDownloadStatusPayload is a helper method to define mock.On call
//   - ctx interfaces.AppFunctionContext
//   - modelDeployCommand ml_model.ModelDeployCommand
//   - isSuccess bool
//   - message string
func (_e *MockMLAgentMQTTPublisherInterface_Expecter) BuildModelDownloadStatusPayload(ctx interface{}, modelDeployCommand interface{}, isSuccess interface{}, message interface{}) *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call {
	return &MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call{Call: _e.mock.On("BuildModelDownloadStatusPayload", ctx, modelDeployCommand, isSuccess, message)}
}

func (_c *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call) Run(run func(ctx interfaces.AppFunctionContext, modelDeployCommand ml_model.ModelDeployCommand, isSuccess bool, message string)) *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.AppFunctionContext), args[1].(ml_model.ModelDeployCommand), args[2].(bool), args[3].(string))
	})
	return _c
}

func (_c *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call) Return(_a0 ml_model.ModelDeploymentStatus) *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call) RunAndReturn(run func(interfaces.AppFunctionContext, ml_model.ModelDeployCommand, bool, string) ml_model.ModelDeploymentStatus) *MockMLAgentMQTTPublisherInterface_BuildModelDownloadStatusPayload_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLAgentMQTTPublisher provides a mock function with given fields: service, appConfig
func (_m *MockMLAgentMQTTPublisherInterface) GetMLAgentMQTTPublisher(service interfaces.ApplicationService, appConfig ml_agent.MLEdgeAgentConfigInterface) ml_agent.MLAgentMQTTPublisherInterface {
	ret := _m.Called(service, appConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetMLAgentMQTTPublisher")
	}

	var r0 ml_agent.MLAgentMQTTPublisherInterface
	if rf, ok := ret.Get(0).(func(interfaces.ApplicationService, ml_agent.MLEdgeAgentConfigInterface) ml_agent.MLAgentMQTTPublisherInterface); ok {
		r0 = rf(service, appConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ml_agent.MLAgentMQTTPublisherInterface)
		}
	}

	return r0
}

// MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLAgentMQTTPublisher'
type MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call struct {
	*mock.Call
}

// GetMLAgentMQTTPublisher is a helper method to define mock.On call
//   - service interfaces.ApplicationService
//   - appConfig ml_agent.MLEdgeAgentConfigInterface
func (_e *MockMLAgentMQTTPublisherInterface_Expecter) GetMLAgentMQTTPublisher(service interface{}, appConfig interface{}) *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call {
	return &MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call{Call: _e.mock.On("GetMLAgentMQTTPublisher", service, appConfig)}
}

func (_c *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call) Run(run func(service interfaces.ApplicationService, appConfig ml_agent.MLEdgeAgentConfigInterface)) *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.ApplicationService), args[1].(ml_agent.MLEdgeAgentConfigInterface))
	})
	return _c
}

func (_c *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call) Return(_a0 ml_agent.MLAgentMQTTPublisherInterface) *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call) RunAndReturn(run func(interfaces.ApplicationService, ml_agent.MLEdgeAgentConfigInterface) ml_agent.MLAgentMQTTPublisherInterface) *MockMLAgentMQTTPublisherInterface_GetMLAgentMQTTPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMLAgentMQTTPublisherInterface creates a new instance of MockMLAgentMQTTPublisherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMLAgentMQTTPublisherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMLAgentMQTTPublisherInterface {
	mock := &MockMLAgentMQTTPublisherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
