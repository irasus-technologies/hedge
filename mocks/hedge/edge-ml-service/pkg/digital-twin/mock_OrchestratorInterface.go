// Code generated by mockery v2.34.2. DO NOT EDIT.

package digital_twin

import mock "github.com/stretchr/testify/mock"

// MockOrchestratorInterface is an autogenerated mock type for the OrchestratorInterface type
type MockOrchestratorInterface struct {
	mock.Mock
}

type MockOrchestratorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrchestratorInterface) EXPECT() *MockOrchestratorInterface_Expecter {
	return &MockOrchestratorInterface_Expecter{mock: &_m.Mock}
}

// RunPredictions provides a mock function with given fields: simulationDefinitionName
func (_m *MockOrchestratorInterface) RunPredictions(simulationDefinitionName string) error {
	ret := _m.Called(simulationDefinitionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(simulationDefinitionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrchestratorInterface_RunPredictions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPredictions'
type MockOrchestratorInterface_RunPredictions_Call struct {
	*mock.Call
}

// RunPredictions is a helper method to define mock.On call
//  - simulationDefinitionName string
func (_e *MockOrchestratorInterface_Expecter) RunPredictions(simulationDefinitionName interface{}) *MockOrchestratorInterface_RunPredictions_Call {
	return &MockOrchestratorInterface_RunPredictions_Call{Call: _e.mock.On("RunPredictions", simulationDefinitionName)}
}

func (_c *MockOrchestratorInterface_RunPredictions_Call) Run(run func(simulationDefinitionName string)) *MockOrchestratorInterface_RunPredictions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrchestratorInterface_RunPredictions_Call) Return(_a0 error) *MockOrchestratorInterface_RunPredictions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestratorInterface_RunPredictions_Call) RunAndReturn(run func(string) error) *MockOrchestratorInterface_RunPredictions_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTrainingJob provides a mock function with given fields: jobName, simulationDefinitionName
func (_m *MockOrchestratorInterface) SubmitTrainingJob(jobName string, simulationDefinitionName string) (string, error) {
	ret := _m.Called(jobName, simulationDefinitionName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(jobName, simulationDefinitionName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(jobName, simulationDefinitionName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(jobName, simulationDefinitionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrchestratorInterface_SubmitTrainingJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTrainingJob'
type MockOrchestratorInterface_SubmitTrainingJob_Call struct {
	*mock.Call
}

// SubmitTrainingJob is a helper method to define mock.On call
//  - jobName string
//  - simulationDefinitionName string
func (_e *MockOrchestratorInterface_Expecter) SubmitTrainingJob(jobName interface{}, simulationDefinitionName interface{}) *MockOrchestratorInterface_SubmitTrainingJob_Call {
	return &MockOrchestratorInterface_SubmitTrainingJob_Call{Call: _e.mock.On("SubmitTrainingJob", jobName, simulationDefinitionName)}
}

func (_c *MockOrchestratorInterface_SubmitTrainingJob_Call) Run(run func(jobName string, simulationDefinitionName string)) *MockOrchestratorInterface_SubmitTrainingJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockOrchestratorInterface_SubmitTrainingJob_Call) Return(_a0 string, _a1 error) *MockOrchestratorInterface_SubmitTrainingJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrchestratorInterface_SubmitTrainingJob_Call) RunAndReturn(run func(string, string) (string, error)) *MockOrchestratorInterface_SubmitTrainingJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrchestratorInterface creates a new instance of MockOrchestratorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrchestratorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrchestratorInterface {
	mock := &MockOrchestratorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
