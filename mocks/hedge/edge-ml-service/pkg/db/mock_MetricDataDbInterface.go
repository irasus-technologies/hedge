// Code generated by mockery v2.38.0. DO NOT EDIT.

package db

import (
	db "hedge/edge-ml-service/pkg/db"
	config "hedge/edge-ml-service/pkg/dto/config"

	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"

	mock "github.com/stretchr/testify/mock"

	service "hedge/common/service"
)

// MockMetricDataDbInterface is an autogenerated mock type for the MetricDataDbInterface type
type MockMetricDataDbInterface struct {
	mock.Mock
}

type MockMetricDataDbInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricDataDbInterface) EXPECT() *MockMetricDataDbInterface_Expecter {
	return &MockMetricDataDbInterface_Expecter{mock: &_m.Mock}
}

// GetMetricDataDb provides a mock function with given fields: _a0, connectionConfig, dataSourceProvider
func (_m *MockMetricDataDbInterface) GetMetricDataDb(_a0 interfaces.ApplicationService, connectionConfig *config.MLMgmtConfig, dataSourceProvider service.DataStoreProvider) db.MetricDataDbInterface {
	ret := _m.Called(_a0, connectionConfig, dataSourceProvider)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricDataDb")
	}

	var r0 db.MetricDataDbInterface
	if rf, ok := ret.Get(0).(func(interfaces.ApplicationService, *config.MLMgmtConfig, service.DataStoreProvider) db.MetricDataDbInterface); ok {
		r0 = rf(_a0, connectionConfig, dataSourceProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.MetricDataDbInterface)
		}
	}

	return r0
}

// MockMetricDataDbInterface_GetMetricDataDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricDataDb'
type MockMetricDataDbInterface_GetMetricDataDb_Call struct {
	*mock.Call
}

// GetMetricDataDb is a helper method to define mock.On call
//   - _a0 interfaces.ApplicationService
//   - connectionConfig *config.MLMgmtConfig
//   - dataSourceProvider service.DataStoreProvider
func (_e *MockMetricDataDbInterface_Expecter) GetMetricDataDb(_a0 interface{}, connectionConfig interface{}, dataSourceProvider interface{}) *MockMetricDataDbInterface_GetMetricDataDb_Call {
	return &MockMetricDataDbInterface_GetMetricDataDb_Call{Call: _e.mock.On("GetMetricDataDb", _a0, connectionConfig, dataSourceProvider)}
}

func (_c *MockMetricDataDbInterface_GetMetricDataDb_Call) Run(run func(_a0 interfaces.ApplicationService, connectionConfig *config.MLMgmtConfig, dataSourceProvider service.DataStoreProvider)) *MockMetricDataDbInterface_GetMetricDataDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.ApplicationService), args[1].(*config.MLMgmtConfig), args[2].(service.DataStoreProvider))
	})
	return _c
}

func (_c *MockMetricDataDbInterface_GetMetricDataDb_Call) Return(_a0 db.MetricDataDbInterface) *MockMetricDataDbInterface_GetMetricDataDb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricDataDbInterface_GetMetricDataDb_Call) RunAndReturn(run func(interfaces.ApplicationService, *config.MLMgmtConfig, service.DataStoreProvider) db.MetricDataDbInterface) *MockMetricDataDbInterface_GetMetricDataDb_Call {
	_c.Call.Return(run)
	return _c
}

// GetTSLabels provides a mock function with given fields: label
func (_m *MockMetricDataDbInterface) GetTSLabels(label string) ([]byte, error) {
	ret := _m.Called(label)

	if len(ret) == 0 {
		panic("no return value specified for GetTSLabels")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(label)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetricDataDbInterface_GetTSLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTSLabels'
type MockMetricDataDbInterface_GetTSLabels_Call struct {
	*mock.Call
}

// GetTSLabels is a helper method to define mock.On call
//   - label string
func (_e *MockMetricDataDbInterface_Expecter) GetTSLabels(label interface{}) *MockMetricDataDbInterface_GetTSLabels_Call {
	return &MockMetricDataDbInterface_GetTSLabels_Call{Call: _e.mock.On("GetTSLabels", label)}
}

func (_c *MockMetricDataDbInterface_GetTSLabels_Call) Run(run func(label string)) *MockMetricDataDbInterface_GetTSLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetricDataDbInterface_GetTSLabels_Call) Return(_a0 []byte, _a1 error) *MockMetricDataDbInterface_GetTSLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetricDataDbInterface_GetTSLabels_Call) RunAndReturn(run func(string) ([]byte, error)) *MockMetricDataDbInterface_GetTSLabels_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricDataDbInterface creates a new instance of MockMetricDataDbInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricDataDbInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricDataDbInterface {
	mock := &MockMetricDataDbInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
