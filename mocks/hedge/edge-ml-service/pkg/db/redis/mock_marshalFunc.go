// Code generated by mockery v2.53.2. DO NOT EDIT.

package redis

import mock "github.com/stretchr/testify/mock"

// MockmarshalFunc is an autogenerated mock type for the marshalFunc type
type MockmarshalFunc struct {
	mock.Mock
}

type MockmarshalFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockmarshalFunc) EXPECT() *MockmarshalFunc_Expecter {
	return &MockmarshalFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: in
func (_m *MockmarshalFunc) Execute(in interface{}) ([]byte, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockmarshalFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockmarshalFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - in interface{}
func (_e *MockmarshalFunc_Expecter) Execute(in interface{}) *MockmarshalFunc_Execute_Call {
	return &MockmarshalFunc_Execute_Call{Call: _e.mock.On("Execute", in)}
}

func (_c *MockmarshalFunc_Execute_Call) Run(run func(in interface{})) *MockmarshalFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockmarshalFunc_Execute_Call) Return(out []byte, err error) *MockmarshalFunc_Execute_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockmarshalFunc_Execute_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *MockmarshalFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmarshalFunc creates a new instance of MockmarshalFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmarshalFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockmarshalFunc {
	mock := &MockmarshalFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
