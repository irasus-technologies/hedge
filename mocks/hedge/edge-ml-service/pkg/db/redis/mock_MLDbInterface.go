// Code generated by mockery v2.53.2. DO NOT EDIT.

package redis

import (
	db "hedge/common/db"
	config "hedge/edge-ml-service/pkg/dto/config"

	errors "hedge/common/errors"

	job "hedge/edge-ml-service/pkg/dto/job"

	ml_model "hedge/edge-ml-service/pkg/dto/ml_model"

	mock "github.com/stretchr/testify/mock"

	redis "hedge/edge-ml-service/pkg/db/redis"

	redsync "github.com/go-redsync/redsync/v4"
)

// MockMLDbInterface is an autogenerated mock type for the MLDbInterface type
type MockMLDbInterface struct {
	mock.Mock
}

type MockMLDbInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMLDbInterface) EXPECT() *MockMLDbInterface_Expecter {
	return &MockMLDbInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function with given fields: lockName
func (_m *MockMLDbInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _m.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return rf(lockName)
	}
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockMLDbInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName string
func (_e *MockMLDbInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockMLDbInterface_AcquireRedisLock_Call {
	return &MockMLDbInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockMLDbInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockMLDbInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_AcquireRedisLock_Call) Return(_a0 *redsync.Mutex, _a1 errors.HedgeError) *MockMLDbInterface_AcquireRedisLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_AcquireRedisLock_Call) RunAndReturn(run func(string) (*redsync.Mutex, errors.HedgeError)) *MockMLDbInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// AddMLEventConfig provides a mock function with given fields: eventConfig
func (_m *MockMLDbInterface) AddMLEventConfig(eventConfig config.MLEventConfig) (config.MLEventConfig, errors.HedgeError) {
	ret := _m.Called(eventConfig)

	if len(ret) == 0 {
		panic("no return value specified for AddMLEventConfig")
	}

	var r0 config.MLEventConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(config.MLEventConfig) (config.MLEventConfig, errors.HedgeError)); ok {
		return rf(eventConfig)
	}
	if rf, ok := ret.Get(0).(func(config.MLEventConfig) config.MLEventConfig); ok {
		r0 = rf(eventConfig)
	} else {
		r0 = ret.Get(0).(config.MLEventConfig)
	}

	if rf, ok := ret.Get(1).(func(config.MLEventConfig) errors.HedgeError); ok {
		r1 = rf(eventConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_AddMLEventConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMLEventConfig'
type MockMLDbInterface_AddMLEventConfig_Call struct {
	*mock.Call
}

// AddMLEventConfig is a helper method to define mock.On call
//   - eventConfig config.MLEventConfig
func (_e *MockMLDbInterface_Expecter) AddMLEventConfig(eventConfig interface{}) *MockMLDbInterface_AddMLEventConfig_Call {
	return &MockMLDbInterface_AddMLEventConfig_Call{Call: _e.mock.On("AddMLEventConfig", eventConfig)}
}

func (_c *MockMLDbInterface_AddMLEventConfig_Call) Run(run func(eventConfig config.MLEventConfig)) *MockMLDbInterface_AddMLEventConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.MLEventConfig))
	})
	return _c
}

func (_c *MockMLDbInterface_AddMLEventConfig_Call) Return(_a0 config.MLEventConfig, _a1 errors.HedgeError) *MockMLDbInterface_AddMLEventConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_AddMLEventConfig_Call) RunAndReturn(run func(config.MLEventConfig) (config.MLEventConfig, errors.HedgeError)) *MockMLDbInterface_AddMLEventConfig_Call {
	_c.Call.Return(run)
	return _c
}

// AddMLTrainingJob provides a mock function with given fields: trainingJob
func (_m *MockMLDbInterface) AddMLTrainingJob(trainingJob job.TrainingJobDetails) (string, errors.HedgeError) {
	ret := _m.Called(trainingJob)

	if len(ret) == 0 {
		panic("no return value specified for AddMLTrainingJob")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(job.TrainingJobDetails) (string, errors.HedgeError)); ok {
		return rf(trainingJob)
	}
	if rf, ok := ret.Get(0).(func(job.TrainingJobDetails) string); ok {
		r0 = rf(trainingJob)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(job.TrainingJobDetails) errors.HedgeError); ok {
		r1 = rf(trainingJob)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_AddMLTrainingJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMLTrainingJob'
type MockMLDbInterface_AddMLTrainingJob_Call struct {
	*mock.Call
}

// AddMLTrainingJob is a helper method to define mock.On call
//   - trainingJob job.TrainingJobDetails
func (_e *MockMLDbInterface_Expecter) AddMLTrainingJob(trainingJob interface{}) *MockMLDbInterface_AddMLTrainingJob_Call {
	return &MockMLDbInterface_AddMLTrainingJob_Call{Call: _e.mock.On("AddMLTrainingJob", trainingJob)}
}

func (_c *MockMLDbInterface_AddMLTrainingJob_Call) Run(run func(trainingJob job.TrainingJobDetails)) *MockMLDbInterface_AddMLTrainingJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(job.TrainingJobDetails))
	})
	return _c
}

func (_c *MockMLDbInterface_AddMLTrainingJob_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMLDbInterface_AddMLTrainingJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_AddMLTrainingJob_Call) RunAndReturn(run func(job.TrainingJobDetails) (string, errors.HedgeError)) *MockMLDbInterface_AddMLTrainingJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlgorithm provides a mock function with given fields: algo
func (_m *MockMLDbInterface) CreateAlgorithm(algo config.MLAlgorithmDefinition) errors.HedgeError {
	ret := _m.Called(algo)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlgorithm")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(config.MLAlgorithmDefinition) errors.HedgeError); ok {
		r0 = rf(algo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_CreateAlgorithm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlgorithm'
type MockMLDbInterface_CreateAlgorithm_Call struct {
	*mock.Call
}

// CreateAlgorithm is a helper method to define mock.On call
//   - algo config.MLAlgorithmDefinition
func (_e *MockMLDbInterface_Expecter) CreateAlgorithm(algo interface{}) *MockMLDbInterface_CreateAlgorithm_Call {
	return &MockMLDbInterface_CreateAlgorithm_Call{Call: _e.mock.On("CreateAlgorithm", algo)}
}

func (_c *MockMLDbInterface_CreateAlgorithm_Call) Run(run func(algo config.MLAlgorithmDefinition)) *MockMLDbInterface_CreateAlgorithm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.MLAlgorithmDefinition))
	})
	return _c
}

func (_c *MockMLDbInterface_CreateAlgorithm_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_CreateAlgorithm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_CreateAlgorithm_Call) RunAndReturn(run func(config.MLAlgorithmDefinition) errors.HedgeError) *MockMLDbInterface_CreateAlgorithm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlgorithm provides a mock function with given fields: algoName
func (_m *MockMLDbInterface) DeleteAlgorithm(algoName string) errors.HedgeError {
	ret := _m.Called(algoName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlgorithm")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(algoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteAlgorithm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlgorithm'
type MockMLDbInterface_DeleteAlgorithm_Call struct {
	*mock.Call
}

// DeleteAlgorithm is a helper method to define mock.On call
//   - algoName string
func (_e *MockMLDbInterface_Expecter) DeleteAlgorithm(algoName interface{}) *MockMLDbInterface_DeleteAlgorithm_Call {
	return &MockMLDbInterface_DeleteAlgorithm_Call{Call: _e.mock.On("DeleteAlgorithm", algoName)}
}

func (_c *MockMLDbInterface_DeleteAlgorithm_Call) Run(run func(algoName string)) *MockMLDbInterface_DeleteAlgorithm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteAlgorithm_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteAlgorithm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteAlgorithm_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMLDbInterface_DeleteAlgorithm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMLEventConfigByName provides a mock function with given fields: mlAlgorithmName, mlModelConfigName, eventName
func (_m *MockMLDbInterface) DeleteMLEventConfigByName(mlAlgorithmName string, mlModelConfigName string, eventName string) errors.HedgeError {
	ret := _m.Called(mlAlgorithmName, mlModelConfigName, eventName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLEventConfigByName")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.HedgeError); ok {
		r0 = rf(mlAlgorithmName, mlModelConfigName, eventName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteMLEventConfigByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMLEventConfigByName'
type MockMLDbInterface_DeleteMLEventConfigByName_Call struct {
	*mock.Call
}

// DeleteMLEventConfigByName is a helper method to define mock.On call
//   - mlAlgorithmName string
//   - mlModelConfigName string
//   - eventName string
func (_e *MockMLDbInterface_Expecter) DeleteMLEventConfigByName(mlAlgorithmName interface{}, mlModelConfigName interface{}, eventName interface{}) *MockMLDbInterface_DeleteMLEventConfigByName_Call {
	return &MockMLDbInterface_DeleteMLEventConfigByName_Call{Call: _e.mock.On("DeleteMLEventConfigByName", mlAlgorithmName, mlModelConfigName, eventName)}
}

func (_c *MockMLDbInterface_DeleteMLEventConfigByName_Call) Run(run func(mlAlgorithmName string, mlModelConfigName string, eventName string)) *MockMLDbInterface_DeleteMLEventConfigByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteMLEventConfigByName_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteMLEventConfigByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteMLEventConfigByName_Call) RunAndReturn(run func(string, string, string) errors.HedgeError) *MockMLDbInterface_DeleteMLEventConfigByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMLModelConfig provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) DeleteMLModelConfig(mlAlgorithm string, mlModelConfigName string) errors.HedgeError {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLModelConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteMLModelConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMLModelConfig'
type MockMLDbInterface_DeleteMLModelConfig_Call struct {
	*mock.Call
}

// DeleteMLModelConfig is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) DeleteMLModelConfig(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_DeleteMLModelConfig_Call {
	return &MockMLDbInterface_DeleteMLModelConfig_Call{Call: _e.mock.On("DeleteMLModelConfig", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_DeleteMLModelConfig_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_DeleteMLModelConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelConfig_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteMLModelConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelConfig_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockMLDbInterface_DeleteMLModelConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMLModelsByConfig provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) DeleteMLModelsByConfig(mlAlgorithm string, mlModelConfigName string) errors.HedgeError {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLModelsByConfig")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteMLModelsByConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMLModelsByConfig'
type MockMLDbInterface_DeleteMLModelsByConfig_Call struct {
	*mock.Call
}

// DeleteMLModelsByConfig is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) DeleteMLModelsByConfig(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_DeleteMLModelsByConfig_Call {
	return &MockMLDbInterface_DeleteMLModelsByConfig_Call{Call: _e.mock.On("DeleteMLModelsByConfig", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_DeleteMLModelsByConfig_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_DeleteMLModelsByConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelsByConfig_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteMLModelsByConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelsByConfig_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockMLDbInterface_DeleteMLModelsByConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMLModelsByModelVersion provides a mock function with given fields: mlAlgorithm, mlModelConfigName, modelVersion
func (_m *MockMLDbInterface) DeleteMLModelsByModelVersion(mlAlgorithm string, mlModelConfigName string, modelVersion int64) errors.HedgeError {
	ret := _m.Called(mlAlgorithm, mlModelConfigName, modelVersion)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLModelsByModelVersion")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, int64) errors.HedgeError); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName, modelVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteMLModelsByModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMLModelsByModelVersion'
type MockMLDbInterface_DeleteMLModelsByModelVersion_Call struct {
	*mock.Call
}

// DeleteMLModelsByModelVersion is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
//   - modelVersion int64
func (_e *MockMLDbInterface_Expecter) DeleteMLModelsByModelVersion(mlAlgorithm interface{}, mlModelConfigName interface{}, modelVersion interface{}) *MockMLDbInterface_DeleteMLModelsByModelVersion_Call {
	return &MockMLDbInterface_DeleteMLModelsByModelVersion_Call{Call: _e.mock.On("DeleteMLModelsByModelVersion", mlAlgorithm, mlModelConfigName, modelVersion)}
}

func (_c *MockMLDbInterface_DeleteMLModelsByModelVersion_Call) Run(run func(mlAlgorithm string, mlModelConfigName string, modelVersion int64)) *MockMLDbInterface_DeleteMLModelsByModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelsByModelVersion_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteMLModelsByModelVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteMLModelsByModelVersion_Call) RunAndReturn(run func(string, string, int64) errors.HedgeError) *MockMLDbInterface_DeleteMLModelsByModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMLTrainingJobs provides a mock function with given fields: jobName
func (_m *MockMLDbInterface) DeleteMLTrainingJobs(jobName string) errors.HedgeError {
	ret := _m.Called(jobName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLTrainingJobs")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_DeleteMLTrainingJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMLTrainingJobs'
type MockMLDbInterface_DeleteMLTrainingJobs_Call struct {
	*mock.Call
}

// DeleteMLTrainingJobs is a helper method to define mock.On call
//   - jobName string
func (_e *MockMLDbInterface_Expecter) DeleteMLTrainingJobs(jobName interface{}) *MockMLDbInterface_DeleteMLTrainingJobs_Call {
	return &MockMLDbInterface_DeleteMLTrainingJobs_Call{Call: _e.mock.On("DeleteMLTrainingJobs", jobName)}
}

func (_c *MockMLDbInterface_DeleteMLTrainingJobs_Call) Run(run func(jobName string)) *MockMLDbInterface_DeleteMLTrainingJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_DeleteMLTrainingJobs_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_DeleteMLTrainingJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_DeleteMLTrainingJobs_Call) RunAndReturn(run func(string) errors.HedgeError) *MockMLDbInterface_DeleteMLTrainingJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlgorithm provides a mock function with given fields: algoName
func (_m *MockMLDbInterface) GetAlgorithm(algoName string) (*config.MLAlgorithmDefinition, errors.HedgeError) {
	ret := _m.Called(algoName)

	if len(ret) == 0 {
		panic("no return value specified for GetAlgorithm")
	}

	var r0 *config.MLAlgorithmDefinition
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (*config.MLAlgorithmDefinition, errors.HedgeError)); ok {
		return rf(algoName)
	}
	if rf, ok := ret.Get(0).(func(string) *config.MLAlgorithmDefinition); ok {
		r0 = rf(algoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.MLAlgorithmDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(algoName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetAlgorithm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlgorithm'
type MockMLDbInterface_GetAlgorithm_Call struct {
	*mock.Call
}

// GetAlgorithm is a helper method to define mock.On call
//   - algoName string
func (_e *MockMLDbInterface_Expecter) GetAlgorithm(algoName interface{}) *MockMLDbInterface_GetAlgorithm_Call {
	return &MockMLDbInterface_GetAlgorithm_Call{Call: _e.mock.On("GetAlgorithm", algoName)}
}

func (_c *MockMLDbInterface_GetAlgorithm_Call) Run(run func(algoName string)) *MockMLDbInterface_GetAlgorithm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetAlgorithm_Call) Return(_a0 *config.MLAlgorithmDefinition, _a1 errors.HedgeError) *MockMLDbInterface_GetAlgorithm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetAlgorithm_Call) RunAndReturn(run func(string) (*config.MLAlgorithmDefinition, errors.HedgeError)) *MockMLDbInterface_GetAlgorithm_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAlgorithms provides a mock function with no fields
func (_m *MockMLDbInterface) GetAllAlgorithms() ([]*config.MLAlgorithmDefinition, errors.HedgeError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAlgorithms")
	}

	var r0 []*config.MLAlgorithmDefinition
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func() ([]*config.MLAlgorithmDefinition, errors.HedgeError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*config.MLAlgorithmDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*config.MLAlgorithmDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() errors.HedgeError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetAllAlgorithms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAlgorithms'
type MockMLDbInterface_GetAllAlgorithms_Call struct {
	*mock.Call
}

// GetAllAlgorithms is a helper method to define mock.On call
func (_e *MockMLDbInterface_Expecter) GetAllAlgorithms() *MockMLDbInterface_GetAllAlgorithms_Call {
	return &MockMLDbInterface_GetAllAlgorithms_Call{Call: _e.mock.On("GetAllAlgorithms")}
}

func (_c *MockMLDbInterface_GetAllAlgorithms_Call) Run(run func()) *MockMLDbInterface_GetAllAlgorithms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMLDbInterface_GetAllAlgorithms_Call) Return(_a0 []*config.MLAlgorithmDefinition, _a1 errors.HedgeError) *MockMLDbInterface_GetAllAlgorithms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetAllAlgorithms_Call) RunAndReturn(run func() ([]*config.MLAlgorithmDefinition, errors.HedgeError)) *MockMLDbInterface_GetAllAlgorithms_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMLEventConfigsByConfig provides a mock function with given fields: mlAlgorithmName, mlModelConfigName
func (_m *MockMLDbInterface) GetAllMLEventConfigsByConfig(mlAlgorithmName string, mlModelConfigName string) ([]config.MLEventConfig, errors.HedgeError) {
	ret := _m.Called(mlAlgorithmName, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMLEventConfigsByConfig")
	}

	var r0 []config.MLEventConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]config.MLEventConfig, errors.HedgeError)); ok {
		return rf(mlAlgorithmName, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []config.MLEventConfig); ok {
		r0 = rf(mlAlgorithmName, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.MLEventConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithmName, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetAllMLEventConfigsByConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMLEventConfigsByConfig'
type MockMLDbInterface_GetAllMLEventConfigsByConfig_Call struct {
	*mock.Call
}

// GetAllMLEventConfigsByConfig is a helper method to define mock.On call
//   - mlAlgorithmName string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetAllMLEventConfigsByConfig(mlAlgorithmName interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call {
	return &MockMLDbInterface_GetAllMLEventConfigsByConfig_Call{Call: _e.mock.On("GetAllMLEventConfigsByConfig", mlAlgorithmName, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call) Run(run func(mlAlgorithmName string, mlModelConfigName string)) *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call) Return(_a0 []config.MLEventConfig, _a1 errors.HedgeError) *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call) RunAndReturn(run func(string, string) ([]config.MLEventConfig, errors.HedgeError)) *MockMLDbInterface_GetAllMLEventConfigsByConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMLModelConfigs provides a mock function with given fields: mlAlgorithm
func (_m *MockMLDbInterface) GetAllMLModelConfigs(mlAlgorithm string) ([]config.MLModelConfig, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMLModelConfigs")
	}

	var r0 []config.MLModelConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]config.MLModelConfig, errors.HedgeError)); ok {
		return rf(mlAlgorithm)
	}
	if rf, ok := ret.Get(0).(func(string) []config.MLModelConfig); ok {
		r0 = rf(mlAlgorithm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.MLModelConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetAllMLModelConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMLModelConfigs'
type MockMLDbInterface_GetAllMLModelConfigs_Call struct {
	*mock.Call
}

// GetAllMLModelConfigs is a helper method to define mock.On call
//   - mlAlgorithm string
func (_e *MockMLDbInterface_Expecter) GetAllMLModelConfigs(mlAlgorithm interface{}) *MockMLDbInterface_GetAllMLModelConfigs_Call {
	return &MockMLDbInterface_GetAllMLModelConfigs_Call{Call: _e.mock.On("GetAllMLModelConfigs", mlAlgorithm)}
}

func (_c *MockMLDbInterface_GetAllMLModelConfigs_Call) Run(run func(mlAlgorithm string)) *MockMLDbInterface_GetAllMLModelConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetAllMLModelConfigs_Call) Return(_a0 []config.MLModelConfig, _a1 errors.HedgeError) *MockMLDbInterface_GetAllMLModelConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetAllMLModelConfigs_Call) RunAndReturn(run func(string) ([]config.MLModelConfig, errors.HedgeError)) *MockMLDbInterface_GetAllMLModelConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields: dbConfig
func (_m *MockMLDbInterface) GetDbClient(dbConfig *db.DatabaseConfig) redis.MLDbInterface {
	ret := _m.Called(dbConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.MLDbInterface
	if rf, ok := ret.Get(0).(func(*db.DatabaseConfig) redis.MLDbInterface); ok {
		r0 = rf(dbConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.MLDbInterface)
		}
	}

	return r0
}

// MockMLDbInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockMLDbInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig *db.DatabaseConfig
func (_e *MockMLDbInterface_Expecter) GetDbClient(dbConfig interface{}) *MockMLDbInterface_GetDbClient_Call {
	return &MockMLDbInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig)}
}

func (_c *MockMLDbInterface_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig)) *MockMLDbInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig))
	})
	return _c
}

func (_c *MockMLDbInterface_GetDbClient_Call) Return(_a0 redis.MLDbInterface) *MockMLDbInterface_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_GetDbClient_Call) RunAndReturn(run func(*db.DatabaseConfig) redis.MLDbInterface) *MockMLDbInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentsByConfig provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) GetDeploymentsByConfig(mlAlgorithm string, mlModelConfigName string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentsByConfig")
	}

	var r0 []ml_model.ModelDeploymentStatus
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)); ok {
		return rf(mlAlgorithm, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []ml_model.ModelDeploymentStatus); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml_model.ModelDeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetDeploymentsByConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentsByConfig'
type MockMLDbInterface_GetDeploymentsByConfig_Call struct {
	*mock.Call
}

// GetDeploymentsByConfig is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetDeploymentsByConfig(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetDeploymentsByConfig_Call {
	return &MockMLDbInterface_GetDeploymentsByConfig_Call{Call: _e.mock.On("GetDeploymentsByConfig", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetDeploymentsByConfig_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_GetDeploymentsByConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByConfig_Call) Return(_a0 []ml_model.ModelDeploymentStatus, _a1 errors.HedgeError) *MockMLDbInterface_GetDeploymentsByConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByConfig_Call) RunAndReturn(run func(string, string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)) *MockMLDbInterface_GetDeploymentsByConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentsByModelVersion provides a mock function with given fields: mlAlgorithmName, mlModelConfigName, modelVersion
func (_m *MockMLDbInterface) GetDeploymentsByModelVersion(mlAlgorithmName string, mlModelConfigName string, modelVersion int64) ([]ml_model.ModelDeploymentStatus, errors.HedgeError) {
	ret := _m.Called(mlAlgorithmName, mlModelConfigName, modelVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentsByModelVersion")
	}

	var r0 []ml_model.ModelDeploymentStatus
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, int64) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)); ok {
		return rf(mlAlgorithmName, mlModelConfigName, modelVersion)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) []ml_model.ModelDeploymentStatus); ok {
		r0 = rf(mlAlgorithmName, mlModelConfigName, modelVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml_model.ModelDeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) errors.HedgeError); ok {
		r1 = rf(mlAlgorithmName, mlModelConfigName, modelVersion)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetDeploymentsByModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentsByModelVersion'
type MockMLDbInterface_GetDeploymentsByModelVersion_Call struct {
	*mock.Call
}

// GetDeploymentsByModelVersion is a helper method to define mock.On call
//   - mlAlgorithmName string
//   - mlModelConfigName string
//   - modelVersion int64
func (_e *MockMLDbInterface_Expecter) GetDeploymentsByModelVersion(mlAlgorithmName interface{}, mlModelConfigName interface{}, modelVersion interface{}) *MockMLDbInterface_GetDeploymentsByModelVersion_Call {
	return &MockMLDbInterface_GetDeploymentsByModelVersion_Call{Call: _e.mock.On("GetDeploymentsByModelVersion", mlAlgorithmName, mlModelConfigName, modelVersion)}
}

func (_c *MockMLDbInterface_GetDeploymentsByModelVersion_Call) Run(run func(mlAlgorithmName string, mlModelConfigName string, modelVersion int64)) *MockMLDbInterface_GetDeploymentsByModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByModelVersion_Call) Return(_a0 []ml_model.ModelDeploymentStatus, _a1 errors.HedgeError) *MockMLDbInterface_GetDeploymentsByModelVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByModelVersion_Call) RunAndReturn(run func(string, string, int64) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)) *MockMLDbInterface_GetDeploymentsByModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentsByNode provides a mock function with given fields: nodeName
func (_m *MockMLDbInterface) GetDeploymentsByNode(nodeName string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentsByNode")
	}

	var r0 []ml_model.ModelDeploymentStatus
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) []ml_model.ModelDeploymentStatus); ok {
		r0 = rf(nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml_model.ModelDeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(nodeName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetDeploymentsByNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentsByNode'
type MockMLDbInterface_GetDeploymentsByNode_Call struct {
	*mock.Call
}

// GetDeploymentsByNode is a helper method to define mock.On call
//   - nodeName string
func (_e *MockMLDbInterface_Expecter) GetDeploymentsByNode(nodeName interface{}) *MockMLDbInterface_GetDeploymentsByNode_Call {
	return &MockMLDbInterface_GetDeploymentsByNode_Call{Call: _e.mock.On("GetDeploymentsByNode", nodeName)}
}

func (_c *MockMLDbInterface_GetDeploymentsByNode_Call) Run(run func(nodeName string)) *MockMLDbInterface_GetDeploymentsByNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByNode_Call) Return(_a0 []ml_model.ModelDeploymentStatus, _a1 errors.HedgeError) *MockMLDbInterface_GetDeploymentsByNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetDeploymentsByNode_Call) RunAndReturn(run func(string) ([]ml_model.ModelDeploymentStatus, errors.HedgeError)) *MockMLDbInterface_GetDeploymentsByNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestModelVersion provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) GetLatestModelVersion(mlAlgorithm string, mlModelConfigName string) (int64, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestModelVersion")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) (int64, errors.HedgeError)); ok {
		return rf(mlAlgorithm, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetLatestModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestModelVersion'
type MockMLDbInterface_GetLatestModelVersion_Call struct {
	*mock.Call
}

// GetLatestModelVersion is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetLatestModelVersion(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetLatestModelVersion_Call {
	return &MockMLDbInterface_GetLatestModelVersion_Call{Call: _e.mock.On("GetLatestModelVersion", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetLatestModelVersion_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_GetLatestModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetLatestModelVersion_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockMLDbInterface_GetLatestModelVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetLatestModelVersion_Call) RunAndReturn(run func(string, string) (int64, errors.HedgeError)) *MockMLDbInterface_GetLatestModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestModelsByConfig provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) GetLatestModelsByConfig(mlAlgorithm string, mlModelConfigName string) ([]ml_model.MLModel, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestModelsByConfig")
	}

	var r0 []ml_model.MLModel
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]ml_model.MLModel, errors.HedgeError)); ok {
		return rf(mlAlgorithm, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []ml_model.MLModel); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml_model.MLModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetLatestModelsByConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestModelsByConfig'
type MockMLDbInterface_GetLatestModelsByConfig_Call struct {
	*mock.Call
}

// GetLatestModelsByConfig is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetLatestModelsByConfig(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetLatestModelsByConfig_Call {
	return &MockMLDbInterface_GetLatestModelsByConfig_Call{Call: _e.mock.On("GetLatestModelsByConfig", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetLatestModelsByConfig_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_GetLatestModelsByConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetLatestModelsByConfig_Call) Return(_a0 []ml_model.MLModel, _a1 errors.HedgeError) *MockMLDbInterface_GetLatestModelsByConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetLatestModelsByConfig_Call) RunAndReturn(run func(string, string) ([]ml_model.MLModel, errors.HedgeError)) *MockMLDbInterface_GetLatestModelsByConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLEventConfigByName provides a mock function with given fields: mlAlgorithmName, mlModelConfigName, mlEventName
func (_m *MockMLDbInterface) GetMLEventConfigByName(mlAlgorithmName string, mlModelConfigName string, mlEventName string) (config.MLEventConfig, errors.HedgeError) {
	ret := _m.Called(mlAlgorithmName, mlModelConfigName, mlEventName)

	if len(ret) == 0 {
		panic("no return value specified for GetMLEventConfigByName")
	}

	var r0 config.MLEventConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string, string) (config.MLEventConfig, errors.HedgeError)); ok {
		return rf(mlAlgorithmName, mlModelConfigName, mlEventName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) config.MLEventConfig); ok {
		r0 = rf(mlAlgorithmName, mlModelConfigName, mlEventName)
	} else {
		r0 = ret.Get(0).(config.MLEventConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithmName, mlModelConfigName, mlEventName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMLEventConfigByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLEventConfigByName'
type MockMLDbInterface_GetMLEventConfigByName_Call struct {
	*mock.Call
}

// GetMLEventConfigByName is a helper method to define mock.On call
//   - mlAlgorithmName string
//   - mlModelConfigName string
//   - mlEventName string
func (_e *MockMLDbInterface_Expecter) GetMLEventConfigByName(mlAlgorithmName interface{}, mlModelConfigName interface{}, mlEventName interface{}) *MockMLDbInterface_GetMLEventConfigByName_Call {
	return &MockMLDbInterface_GetMLEventConfigByName_Call{Call: _e.mock.On("GetMLEventConfigByName", mlAlgorithmName, mlModelConfigName, mlEventName)}
}

func (_c *MockMLDbInterface_GetMLEventConfigByName_Call) Run(run func(mlAlgorithmName string, mlModelConfigName string, mlEventName string)) *MockMLDbInterface_GetMLEventConfigByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMLEventConfigByName_Call) Return(_a0 config.MLEventConfig, _a1 errors.HedgeError) *MockMLDbInterface_GetMLEventConfigByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMLEventConfigByName_Call) RunAndReturn(run func(string, string, string) (config.MLEventConfig, errors.HedgeError)) *MockMLDbInterface_GetMLEventConfigByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLTrainingJob provides a mock function with given fields: id
func (_m *MockMLDbInterface) GetMLTrainingJob(id string) (job.TrainingJobDetails, errors.HedgeError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMLTrainingJob")
	}

	var r0 job.TrainingJobDetails
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (job.TrainingJobDetails, errors.HedgeError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) job.TrainingJobDetails); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(job.TrainingJobDetails)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMLTrainingJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLTrainingJob'
type MockMLDbInterface_GetMLTrainingJob_Call struct {
	*mock.Call
}

// GetMLTrainingJob is a helper method to define mock.On call
//   - id string
func (_e *MockMLDbInterface_Expecter) GetMLTrainingJob(id interface{}) *MockMLDbInterface_GetMLTrainingJob_Call {
	return &MockMLDbInterface_GetMLTrainingJob_Call{Call: _e.mock.On("GetMLTrainingJob", id)}
}

func (_c *MockMLDbInterface_GetMLTrainingJob_Call) Run(run func(id string)) *MockMLDbInterface_GetMLTrainingJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJob_Call) Return(_a0 job.TrainingJobDetails, _a1 errors.HedgeError) *MockMLDbInterface_GetMLTrainingJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJob_Call) RunAndReturn(run func(string) (job.TrainingJobDetails, errors.HedgeError)) *MockMLDbInterface_GetMLTrainingJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLTrainingJobs provides a mock function with given fields: key
func (_m *MockMLDbInterface) GetMLTrainingJobs(key string) ([]job.TrainingJobDetails, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMLTrainingJobs")
	}

	var r0 []job.TrainingJobDetails
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) ([]job.TrainingJobDetails, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []job.TrainingJobDetails); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.TrainingJobDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMLTrainingJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLTrainingJobs'
type MockMLDbInterface_GetMLTrainingJobs_Call struct {
	*mock.Call
}

// GetMLTrainingJobs is a helper method to define mock.On call
//   - key string
func (_e *MockMLDbInterface_Expecter) GetMLTrainingJobs(key interface{}) *MockMLDbInterface_GetMLTrainingJobs_Call {
	return &MockMLDbInterface_GetMLTrainingJobs_Call{Call: _e.mock.On("GetMLTrainingJobs", key)}
}

func (_c *MockMLDbInterface_GetMLTrainingJobs_Call) Run(run func(key string)) *MockMLDbInterface_GetMLTrainingJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJobs_Call) Return(_a0 []job.TrainingJobDetails, _a1 errors.HedgeError) *MockMLDbInterface_GetMLTrainingJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJobs_Call) RunAndReturn(run func(string) ([]job.TrainingJobDetails, errors.HedgeError)) *MockMLDbInterface_GetMLTrainingJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetMLTrainingJobsByConfig provides a mock function with given fields: mlModelConfigName, jobStatus
func (_m *MockMLDbInterface) GetMLTrainingJobsByConfig(mlModelConfigName string, jobStatus string) ([]job.TrainingJobDetails, errors.HedgeError) {
	ret := _m.Called(mlModelConfigName, jobStatus)

	if len(ret) == 0 {
		panic("no return value specified for GetMLTrainingJobsByConfig")
	}

	var r0 []job.TrainingJobDetails
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]job.TrainingJobDetails, errors.HedgeError)); ok {
		return rf(mlModelConfigName, jobStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string) []job.TrainingJobDetails); ok {
		r0 = rf(mlModelConfigName, jobStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.TrainingJobDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlModelConfigName, jobStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMLTrainingJobsByConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMLTrainingJobsByConfig'
type MockMLDbInterface_GetMLTrainingJobsByConfig_Call struct {
	*mock.Call
}

// GetMLTrainingJobsByConfig is a helper method to define mock.On call
//   - mlModelConfigName string
//   - jobStatus string
func (_e *MockMLDbInterface_Expecter) GetMLTrainingJobsByConfig(mlModelConfigName interface{}, jobStatus interface{}) *MockMLDbInterface_GetMLTrainingJobsByConfig_Call {
	return &MockMLDbInterface_GetMLTrainingJobsByConfig_Call{Call: _e.mock.On("GetMLTrainingJobsByConfig", mlModelConfigName, jobStatus)}
}

func (_c *MockMLDbInterface_GetMLTrainingJobsByConfig_Call) Run(run func(mlModelConfigName string, jobStatus string)) *MockMLDbInterface_GetMLTrainingJobsByConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJobsByConfig_Call) Return(_a0 []job.TrainingJobDetails, _a1 errors.HedgeError) *MockMLDbInterface_GetMLTrainingJobsByConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMLTrainingJobsByConfig_Call) RunAndReturn(run func(string, string) ([]job.TrainingJobDetails, errors.HedgeError)) *MockMLDbInterface_GetMLTrainingJobsByConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function with given fields: key
func (_m *MockMLDbInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockMLDbInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key string
func (_e *MockMLDbInterface_Expecter) GetMetricCounter(key interface{}) *MockMLDbInterface_GetMetricCounter_Call {
	return &MockMLDbInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockMLDbInterface_GetMetricCounter_Call) Run(run func(key string)) *MockMLDbInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMetricCounter_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockMLDbInterface_GetMetricCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMetricCounter_Call) RunAndReturn(run func(string) (int64, errors.HedgeError)) *MockMLDbInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// GetMlModelConfig provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) GetMlModelConfig(mlAlgorithm string, mlModelConfigName string) (config.MLModelConfig, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetMlModelConfig")
	}

	var r0 config.MLModelConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) (config.MLModelConfig, errors.HedgeError)); ok {
		return rf(mlAlgorithm, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) config.MLModelConfig); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		r0 = ret.Get(0).(config.MLModelConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetMlModelConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMlModelConfig'
type MockMLDbInterface_GetMlModelConfig_Call struct {
	*mock.Call
}

// GetMlModelConfig is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetMlModelConfig(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetMlModelConfig_Call {
	return &MockMLDbInterface_GetMlModelConfig_Call{Call: _e.mock.On("GetMlModelConfig", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetMlModelConfig_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_GetMlModelConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetMlModelConfig_Call) Return(_a0 config.MLModelConfig, _a1 errors.HedgeError) *MockMLDbInterface_GetMlModelConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetMlModelConfig_Call) RunAndReturn(run func(string, string) (config.MLModelConfig, errors.HedgeError)) *MockMLDbInterface_GetMlModelConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetModels provides a mock function with given fields: mlAlgorithm, mlModelConfigName
func (_m *MockMLDbInterface) GetModels(mlAlgorithm string, mlModelConfigName string) ([]ml_model.MLModel, errors.HedgeError) {
	ret := _m.Called(mlAlgorithm, mlModelConfigName)

	if len(ret) == 0 {
		panic("no return value specified for GetModels")
	}

	var r0 []ml_model.MLModel
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) ([]ml_model.MLModel, errors.HedgeError)); ok {
		return rf(mlAlgorithm, mlModelConfigName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []ml_model.MLModel); ok {
		r0 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml_model.MLModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.HedgeError); ok {
		r1 = rf(mlAlgorithm, mlModelConfigName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_GetModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModels'
type MockMLDbInterface_GetModels_Call struct {
	*mock.Call
}

// GetModels is a helper method to define mock.On call
//   - mlAlgorithm string
//   - mlModelConfigName string
func (_e *MockMLDbInterface_Expecter) GetModels(mlAlgorithm interface{}, mlModelConfigName interface{}) *MockMLDbInterface_GetModels_Call {
	return &MockMLDbInterface_GetModels_Call{Call: _e.mock.On("GetModels", mlAlgorithm, mlModelConfigName)}
}

func (_c *MockMLDbInterface_GetModels_Call) Run(run func(mlAlgorithm string, mlModelConfigName string)) *MockMLDbInterface_GetModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_GetModels_Call) Return(_a0 []ml_model.MLModel, _a1 errors.HedgeError) *MockMLDbInterface_GetModels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_GetModels_Call) RunAndReturn(run func(string, string) ([]ml_model.MLModel, errors.HedgeError)) *MockMLDbInterface_GetModels_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function with given fields: key, value
func (_m *MockMLDbInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = rf(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockMLDbInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockMLDbInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockMLDbInterface_IncrMetricCounterBy_Call {
	return &MockMLDbInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockMLDbInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockMLDbInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockMLDbInterface_IncrMetricCounterBy_Call) Return(_a0 int64, _a1 errors.HedgeError) *MockMLDbInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(string, int64) (int64, errors.HedgeError)) *MockMLDbInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// MarkOldTrainingDataDeprecated provides a mock function with given fields: mlModelConfigName, currentJobName
func (_m *MockMLDbInterface) MarkOldTrainingDataDeprecated(mlModelConfigName string, currentJobName string) errors.HedgeError {
	ret := _m.Called(mlModelConfigName, currentJobName)

	if len(ret) == 0 {
		panic("no return value specified for MarkOldTrainingDataDeprecated")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, string) errors.HedgeError); ok {
		r0 = rf(mlModelConfigName, currentJobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_MarkOldTrainingDataDeprecated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkOldTrainingDataDeprecated'
type MockMLDbInterface_MarkOldTrainingDataDeprecated_Call struct {
	*mock.Call
}

// MarkOldTrainingDataDeprecated is a helper method to define mock.On call
//   - mlModelConfigName string
//   - currentJobName string
func (_e *MockMLDbInterface_Expecter) MarkOldTrainingDataDeprecated(mlModelConfigName interface{}, currentJobName interface{}) *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call {
	return &MockMLDbInterface_MarkOldTrainingDataDeprecated_Call{Call: _e.mock.On("MarkOldTrainingDataDeprecated", mlModelConfigName, currentJobName)}
}

func (_c *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call) Run(run func(mlModelConfigName string, currentJobName string)) *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call) RunAndReturn(run func(string, string) errors.HedgeError) *MockMLDbInterface_MarkOldTrainingDataDeprecated_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMLModel provides a mock function with given fields: mlModel
func (_m *MockMLDbInterface) SaveMLModel(mlModel ml_model.MLModel) errors.HedgeError {
	ret := _m.Called(mlModel)

	if len(ret) == 0 {
		panic("no return value specified for SaveMLModel")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(ml_model.MLModel) errors.HedgeError); ok {
		r0 = rf(mlModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_SaveMLModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMLModel'
type MockMLDbInterface_SaveMLModel_Call struct {
	*mock.Call
}

// SaveMLModel is a helper method to define mock.On call
//   - mlModel ml_model.MLModel
func (_e *MockMLDbInterface_Expecter) SaveMLModel(mlModel interface{}) *MockMLDbInterface_SaveMLModel_Call {
	return &MockMLDbInterface_SaveMLModel_Call{Call: _e.mock.On("SaveMLModel", mlModel)}
}

func (_c *MockMLDbInterface_SaveMLModel_Call) Run(run func(mlModel ml_model.MLModel)) *MockMLDbInterface_SaveMLModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ml_model.MLModel))
	})
	return _c
}

func (_c *MockMLDbInterface_SaveMLModel_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_SaveMLModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_SaveMLModel_Call) RunAndReturn(run func(ml_model.MLModel) errors.HedgeError) *MockMLDbInterface_SaveMLModel_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMLModelConfig provides a mock function with given fields: mlModelConfig
func (_m *MockMLDbInterface) SaveMLModelConfig(mlModelConfig config.MLModelConfig) (string, errors.HedgeError) {
	ret := _m.Called(mlModelConfig)

	if len(ret) == 0 {
		panic("no return value specified for SaveMLModelConfig")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(config.MLModelConfig) (string, errors.HedgeError)); ok {
		return rf(mlModelConfig)
	}
	if rf, ok := ret.Get(0).(func(config.MLModelConfig) string); ok {
		r0 = rf(mlModelConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(config.MLModelConfig) errors.HedgeError); ok {
		r1 = rf(mlModelConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_SaveMLModelConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMLModelConfig'
type MockMLDbInterface_SaveMLModelConfig_Call struct {
	*mock.Call
}

// SaveMLModelConfig is a helper method to define mock.On call
//   - mlModelConfig config.MLModelConfig
func (_e *MockMLDbInterface_Expecter) SaveMLModelConfig(mlModelConfig interface{}) *MockMLDbInterface_SaveMLModelConfig_Call {
	return &MockMLDbInterface_SaveMLModelConfig_Call{Call: _e.mock.On("SaveMLModelConfig", mlModelConfig)}
}

func (_c *MockMLDbInterface_SaveMLModelConfig_Call) Run(run func(mlModelConfig config.MLModelConfig)) *MockMLDbInterface_SaveMLModelConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.MLModelConfig))
	})
	return _c
}

func (_c *MockMLDbInterface_SaveMLModelConfig_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMLDbInterface_SaveMLModelConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_SaveMLModelConfig_Call) RunAndReturn(run func(config.MLModelConfig) (string, errors.HedgeError)) *MockMLDbInterface_SaveMLModelConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function with given fields: key, value
func (_m *MockMLDbInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockMLDbInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockMLDbInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockMLDbInterface_SetMetricCounter_Call {
	return &MockMLDbInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockMLDbInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockMLDbInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockMLDbInterface_SetMetricCounter_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_SetMetricCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_SetMetricCounter_Call) RunAndReturn(run func(string, int64) errors.HedgeError) *MockMLDbInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlgorithm provides a mock function with given fields: algo
func (_m *MockMLDbInterface) UpdateAlgorithm(algo config.MLAlgorithmDefinition) errors.HedgeError {
	ret := _m.Called(algo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlgorithm")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(config.MLAlgorithmDefinition) errors.HedgeError); ok {
		r0 = rf(algo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_UpdateAlgorithm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlgorithm'
type MockMLDbInterface_UpdateAlgorithm_Call struct {
	*mock.Call
}

// UpdateAlgorithm is a helper method to define mock.On call
//   - algo config.MLAlgorithmDefinition
func (_e *MockMLDbInterface_Expecter) UpdateAlgorithm(algo interface{}) *MockMLDbInterface_UpdateAlgorithm_Call {
	return &MockMLDbInterface_UpdateAlgorithm_Call{Call: _e.mock.On("UpdateAlgorithm", algo)}
}

func (_c *MockMLDbInterface_UpdateAlgorithm_Call) Run(run func(algo config.MLAlgorithmDefinition)) *MockMLDbInterface_UpdateAlgorithm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.MLAlgorithmDefinition))
	})
	return _c
}

func (_c *MockMLDbInterface_UpdateAlgorithm_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_UpdateAlgorithm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_UpdateAlgorithm_Call) RunAndReturn(run func(config.MLAlgorithmDefinition) errors.HedgeError) *MockMLDbInterface_UpdateAlgorithm_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMLEventConfig provides a mock function with given fields: existingMLEvent, eventConfig
func (_m *MockMLDbInterface) UpdateMLEventConfig(existingMLEvent config.MLEventConfig, eventConfig config.MLEventConfig) (config.MLEventConfig, errors.HedgeError) {
	ret := _m.Called(existingMLEvent, eventConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMLEventConfig")
	}

	var r0 config.MLEventConfig
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(config.MLEventConfig, config.MLEventConfig) (config.MLEventConfig, errors.HedgeError)); ok {
		return rf(existingMLEvent, eventConfig)
	}
	if rf, ok := ret.Get(0).(func(config.MLEventConfig, config.MLEventConfig) config.MLEventConfig); ok {
		r0 = rf(existingMLEvent, eventConfig)
	} else {
		r0 = ret.Get(0).(config.MLEventConfig)
	}

	if rf, ok := ret.Get(1).(func(config.MLEventConfig, config.MLEventConfig) errors.HedgeError); ok {
		r1 = rf(existingMLEvent, eventConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_UpdateMLEventConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMLEventConfig'
type MockMLDbInterface_UpdateMLEventConfig_Call struct {
	*mock.Call
}

// UpdateMLEventConfig is a helper method to define mock.On call
//   - existingMLEvent config.MLEventConfig
//   - eventConfig config.MLEventConfig
func (_e *MockMLDbInterface_Expecter) UpdateMLEventConfig(existingMLEvent interface{}, eventConfig interface{}) *MockMLDbInterface_UpdateMLEventConfig_Call {
	return &MockMLDbInterface_UpdateMLEventConfig_Call{Call: _e.mock.On("UpdateMLEventConfig", existingMLEvent, eventConfig)}
}

func (_c *MockMLDbInterface_UpdateMLEventConfig_Call) Run(run func(existingMLEvent config.MLEventConfig, eventConfig config.MLEventConfig)) *MockMLDbInterface_UpdateMLEventConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.MLEventConfig), args[1].(config.MLEventConfig))
	})
	return _c
}

func (_c *MockMLDbInterface_UpdateMLEventConfig_Call) Return(_a0 config.MLEventConfig, _a1 errors.HedgeError) *MockMLDbInterface_UpdateMLEventConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_UpdateMLEventConfig_Call) RunAndReturn(run func(config.MLEventConfig, config.MLEventConfig) (config.MLEventConfig, errors.HedgeError)) *MockMLDbInterface_UpdateMLEventConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMLTrainingJob provides a mock function with given fields: trainingJob
func (_m *MockMLDbInterface) UpdateMLTrainingJob(trainingJob job.TrainingJobDetails) (string, errors.HedgeError) {
	ret := _m.Called(trainingJob)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMLTrainingJob")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(job.TrainingJobDetails) (string, errors.HedgeError)); ok {
		return rf(trainingJob)
	}
	if rf, ok := ret.Get(0).(func(job.TrainingJobDetails) string); ok {
		r0 = rf(trainingJob)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(job.TrainingJobDetails) errors.HedgeError); ok {
		r1 = rf(trainingJob)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockMLDbInterface_UpdateMLTrainingJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMLTrainingJob'
type MockMLDbInterface_UpdateMLTrainingJob_Call struct {
	*mock.Call
}

// UpdateMLTrainingJob is a helper method to define mock.On call
//   - trainingJob job.TrainingJobDetails
func (_e *MockMLDbInterface_Expecter) UpdateMLTrainingJob(trainingJob interface{}) *MockMLDbInterface_UpdateMLTrainingJob_Call {
	return &MockMLDbInterface_UpdateMLTrainingJob_Call{Call: _e.mock.On("UpdateMLTrainingJob", trainingJob)}
}

func (_c *MockMLDbInterface_UpdateMLTrainingJob_Call) Run(run func(trainingJob job.TrainingJobDetails)) *MockMLDbInterface_UpdateMLTrainingJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(job.TrainingJobDetails))
	})
	return _c
}

func (_c *MockMLDbInterface_UpdateMLTrainingJob_Call) Return(_a0 string, _a1 errors.HedgeError) *MockMLDbInterface_UpdateMLTrainingJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMLDbInterface_UpdateMLTrainingJob_Call) RunAndReturn(run func(job.TrainingJobDetails) (string, errors.HedgeError)) *MockMLDbInterface_UpdateMLTrainingJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateModelDeployment provides a mock function with given fields: modelDeployment
func (_m *MockMLDbInterface) UpdateModelDeployment(modelDeployment ml_model.ModelDeploymentStatus) errors.HedgeError {
	ret := _m.Called(modelDeployment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModelDeployment")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(ml_model.ModelDeploymentStatus) errors.HedgeError); ok {
		r0 = rf(modelDeployment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockMLDbInterface_UpdateModelDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateModelDeployment'
type MockMLDbInterface_UpdateModelDeployment_Call struct {
	*mock.Call
}

// UpdateModelDeployment is a helper method to define mock.On call
//   - modelDeployment ml_model.ModelDeploymentStatus
func (_e *MockMLDbInterface_Expecter) UpdateModelDeployment(modelDeployment interface{}) *MockMLDbInterface_UpdateModelDeployment_Call {
	return &MockMLDbInterface_UpdateModelDeployment_Call{Call: _e.mock.On("UpdateModelDeployment", modelDeployment)}
}

func (_c *MockMLDbInterface_UpdateModelDeployment_Call) Run(run func(modelDeployment ml_model.ModelDeploymentStatus)) *MockMLDbInterface_UpdateModelDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ml_model.ModelDeploymentStatus))
	})
	return _c
}

func (_c *MockMLDbInterface_UpdateModelDeployment_Call) Return(_a0 errors.HedgeError) *MockMLDbInterface_UpdateModelDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMLDbInterface_UpdateModelDeployment_Call) RunAndReturn(run func(ml_model.ModelDeploymentStatus) errors.HedgeError) *MockMLDbInterface_UpdateModelDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMLDbInterface creates a new instance of MockMLDbInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMLDbInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMLDbInterface {
	mock := &MockMLDbInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
