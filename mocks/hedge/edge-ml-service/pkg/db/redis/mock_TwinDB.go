// Code generated by mockery v2.53.2. DO NOT EDIT.

package redis

import (
	mock "github.com/stretchr/testify/mock"

	twin "hedge/edge-ml-service/pkg/dto/twin"
)

// MockTwinDB is an autogenerated mock type for the TwinDB type
type MockTwinDB struct {
	mock.Mock
}

type MockTwinDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwinDB) EXPECT() *MockTwinDB_Expecter {
	return &MockTwinDB_Expecter{mock: &_m.Mock}
}

// DBAddSimulationDefinition provides a mock function with given fields: jsonData, name
func (_m *MockTwinDB) DBAddSimulationDefinition(jsonData []byte, name string) error {
	ret := _m.Called(jsonData, name)

	if len(ret) == 0 {
		panic("no return value specified for DBAddSimulationDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(jsonData, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwinDB_DBAddSimulationDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBAddSimulationDefinition'
type MockTwinDB_DBAddSimulationDefinition_Call struct {
	*mock.Call
}

// DBAddSimulationDefinition is a helper method to define mock.On call
//   - jsonData []byte
//   - name string
func (_e *MockTwinDB_Expecter) DBAddSimulationDefinition(jsonData interface{}, name interface{}) *MockTwinDB_DBAddSimulationDefinition_Call {
	return &MockTwinDB_DBAddSimulationDefinition_Call{Call: _e.mock.On("DBAddSimulationDefinition", jsonData, name)}
}

func (_c *MockTwinDB_DBAddSimulationDefinition_Call) Run(run func(jsonData []byte, name string)) *MockTwinDB_DBAddSimulationDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBAddSimulationDefinition_Call) Return(_a0 error) *MockTwinDB_DBAddSimulationDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwinDB_DBAddSimulationDefinition_Call) RunAndReturn(run func([]byte, string) error) *MockTwinDB_DBAddSimulationDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBAddTwinDefinition provides a mock function with given fields: twinDefinition
func (_m *MockTwinDB) DBAddTwinDefinition(twinDefinition twin.DigitalTwinDefinition) error {
	ret := _m.Called(twinDefinition)

	if len(ret) == 0 {
		panic("no return value specified for DBAddTwinDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(twin.DigitalTwinDefinition) error); ok {
		r0 = rf(twinDefinition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwinDB_DBAddTwinDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBAddTwinDefinition'
type MockTwinDB_DBAddTwinDefinition_Call struct {
	*mock.Call
}

// DBAddTwinDefinition is a helper method to define mock.On call
//   - twinDefinition twin.DigitalTwinDefinition
func (_e *MockTwinDB_Expecter) DBAddTwinDefinition(twinDefinition interface{}) *MockTwinDB_DBAddTwinDefinition_Call {
	return &MockTwinDB_DBAddTwinDefinition_Call{Call: _e.mock.On("DBAddTwinDefinition", twinDefinition)}
}

func (_c *MockTwinDB_DBAddTwinDefinition_Call) Run(run func(twinDefinition twin.DigitalTwinDefinition)) *MockTwinDB_DBAddTwinDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(twin.DigitalTwinDefinition))
	})
	return _c
}

func (_c *MockTwinDB_DBAddTwinDefinition_Call) Return(_a0 error) *MockTwinDB_DBAddTwinDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwinDB_DBAddTwinDefinition_Call) RunAndReturn(run func(twin.DigitalTwinDefinition) error) *MockTwinDB_DBAddTwinDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBDeleteSimulationDefinition provides a mock function with given fields: id
func (_m *MockTwinDB) DBDeleteSimulationDefinition(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DBDeleteSimulationDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwinDB_DBDeleteSimulationDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBDeleteSimulationDefinition'
type MockTwinDB_DBDeleteSimulationDefinition_Call struct {
	*mock.Call
}

// DBDeleteSimulationDefinition is a helper method to define mock.On call
//   - id string
func (_e *MockTwinDB_Expecter) DBDeleteSimulationDefinition(id interface{}) *MockTwinDB_DBDeleteSimulationDefinition_Call {
	return &MockTwinDB_DBDeleteSimulationDefinition_Call{Call: _e.mock.On("DBDeleteSimulationDefinition", id)}
}

func (_c *MockTwinDB_DBDeleteSimulationDefinition_Call) Run(run func(id string)) *MockTwinDB_DBDeleteSimulationDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBDeleteSimulationDefinition_Call) Return(_a0 error) *MockTwinDB_DBDeleteSimulationDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwinDB_DBDeleteSimulationDefinition_Call) RunAndReturn(run func(string) error) *MockTwinDB_DBDeleteSimulationDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBDeleteTwinDefinition provides a mock function with given fields: id
func (_m *MockTwinDB) DBDeleteTwinDefinition(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DBDeleteTwinDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwinDB_DBDeleteTwinDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBDeleteTwinDefinition'
type MockTwinDB_DBDeleteTwinDefinition_Call struct {
	*mock.Call
}

// DBDeleteTwinDefinition is a helper method to define mock.On call
//   - id string
func (_e *MockTwinDB_Expecter) DBDeleteTwinDefinition(id interface{}) *MockTwinDB_DBDeleteTwinDefinition_Call {
	return &MockTwinDB_DBDeleteTwinDefinition_Call{Call: _e.mock.On("DBDeleteTwinDefinition", id)}
}

func (_c *MockTwinDB_DBDeleteTwinDefinition_Call) Run(run func(id string)) *MockTwinDB_DBDeleteTwinDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBDeleteTwinDefinition_Call) Return(_a0 error) *MockTwinDB_DBDeleteTwinDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwinDB_DBDeleteTwinDefinition_Call) RunAndReturn(run func(string) error) *MockTwinDB_DBDeleteTwinDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetDefinition provides a mock function with given fields: key
func (_m *MockTwinDB) DBGetDefinition(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBGetDefinition")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetDefinition'
type MockTwinDB_DBGetDefinition_Call struct {
	*mock.Call
}

// DBGetDefinition is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBGetDefinition(key interface{}) *MockTwinDB_DBGetDefinition_Call {
	return &MockTwinDB_DBGetDefinition_Call{Call: _e.mock.On("DBGetDefinition", key)}
}

func (_c *MockTwinDB_DBGetDefinition_Call) Run(run func(key string)) *MockTwinDB_DBGetDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBGetDefinition_Call) Return(_a0 string, _a1 error) *MockTwinDB_DBGetDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetDefinition_Call) RunAndReturn(run func(string) (string, error)) *MockTwinDB_DBGetDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetDefinitions provides a mock function with given fields: key
func (_m *MockTwinDB) DBGetDefinitions(key string) ([]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBGetDefinitions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetDefinitions'
type MockTwinDB_DBGetDefinitions_Call struct {
	*mock.Call
}

// DBGetDefinitions is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBGetDefinitions(key interface{}) *MockTwinDB_DBGetDefinitions_Call {
	return &MockTwinDB_DBGetDefinitions_Call{Call: _e.mock.On("DBGetDefinitions", key)}
}

func (_c *MockTwinDB_DBGetDefinitions_Call) Run(run func(key string)) *MockTwinDB_DBGetDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBGetDefinitions_Call) Return(_a0 []string, _a1 error) *MockTwinDB_DBGetDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetDefinitions_Call) RunAndReturn(run func(string) ([]string, error)) *MockTwinDB_DBGetDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetObject provides a mock function with given fields: data, unMarshalCallback
func (_m *MockTwinDB) DBGetObject(data []byte, unMarshalCallback func([]byte) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(data, unMarshalCallback)

	if len(ret) == 0 {
		panic("no return value specified for DBGetObject")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, func([]byte) (interface{}, error)) (interface{}, error)); ok {
		return rf(data, unMarshalCallback)
	}
	if rf, ok := ret.Get(0).(func([]byte, func([]byte) (interface{}, error)) interface{}); ok {
		r0 = rf(data, unMarshalCallback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, func([]byte) (interface{}, error)) error); ok {
		r1 = rf(data, unMarshalCallback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetObject'
type MockTwinDB_DBGetObject_Call struct {
	*mock.Call
}

// DBGetObject is a helper method to define mock.On call
//   - data []byte
//   - unMarshalCallback func([]byte)(interface{} , error)
func (_e *MockTwinDB_Expecter) DBGetObject(data interface{}, unMarshalCallback interface{}) *MockTwinDB_DBGetObject_Call {
	return &MockTwinDB_DBGetObject_Call{Call: _e.mock.On("DBGetObject", data, unMarshalCallback)}
}

func (_c *MockTwinDB_DBGetObject_Call) Run(run func(data []byte, unMarshalCallback func([]byte) (interface{}, error))) *MockTwinDB_DBGetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(func([]byte) (interface{}, error)))
	})
	return _c
}

func (_c *MockTwinDB_DBGetObject_Call) Return(_a0 interface{}, _a1 error) *MockTwinDB_DBGetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetObject_Call) RunAndReturn(run func([]byte, func([]byte) (interface{}, error)) (interface{}, error)) *MockTwinDB_DBGetObject_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetSimulationDefinition provides a mock function with given fields: key
func (_m *MockTwinDB) DBGetSimulationDefinition(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBGetSimulationDefinition")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetSimulationDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetSimulationDefinition'
type MockTwinDB_DBGetSimulationDefinition_Call struct {
	*mock.Call
}

// DBGetSimulationDefinition is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBGetSimulationDefinition(key interface{}) *MockTwinDB_DBGetSimulationDefinition_Call {
	return &MockTwinDB_DBGetSimulationDefinition_Call{Call: _e.mock.On("DBGetSimulationDefinition", key)}
}

func (_c *MockTwinDB_DBGetSimulationDefinition_Call) Run(run func(key string)) *MockTwinDB_DBGetSimulationDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBGetSimulationDefinition_Call) Return(_a0 string, _a1 error) *MockTwinDB_DBGetSimulationDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetSimulationDefinition_Call) RunAndReturn(run func(string) (string, error)) *MockTwinDB_DBGetSimulationDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetSimulationDefinitions provides a mock function with given fields: key
func (_m *MockTwinDB) DBGetSimulationDefinitions(key string) ([]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBGetSimulationDefinitions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetSimulationDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetSimulationDefinitions'
type MockTwinDB_DBGetSimulationDefinitions_Call struct {
	*mock.Call
}

// DBGetSimulationDefinitions is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBGetSimulationDefinitions(key interface{}) *MockTwinDB_DBGetSimulationDefinitions_Call {
	return &MockTwinDB_DBGetSimulationDefinitions_Call{Call: _e.mock.On("DBGetSimulationDefinitions", key)}
}

func (_c *MockTwinDB_DBGetSimulationDefinitions_Call) Run(run func(key string)) *MockTwinDB_DBGetSimulationDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBGetSimulationDefinitions_Call) Return(_a0 []string, _a1 error) *MockTwinDB_DBGetSimulationDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetSimulationDefinitions_Call) RunAndReturn(run func(string) ([]string, error)) *MockTwinDB_DBGetSimulationDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetTwinDefinition provides a mock function with given fields: key
func (_m *MockTwinDB) DBGetTwinDefinition(key string) (*twin.DigitalTwinDefinition, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBGetTwinDefinition")
	}

	var r0 *twin.DigitalTwinDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*twin.DigitalTwinDefinition, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *twin.DigitalTwinDefinition); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twin.DigitalTwinDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetTwinDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetTwinDefinition'
type MockTwinDB_DBGetTwinDefinition_Call struct {
	*mock.Call
}

// DBGetTwinDefinition is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBGetTwinDefinition(key interface{}) *MockTwinDB_DBGetTwinDefinition_Call {
	return &MockTwinDB_DBGetTwinDefinition_Call{Call: _e.mock.On("DBGetTwinDefinition", key)}
}

func (_c *MockTwinDB_DBGetTwinDefinition_Call) Run(run func(key string)) *MockTwinDB_DBGetTwinDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBGetTwinDefinition_Call) Return(_a0 *twin.DigitalTwinDefinition, _a1 error) *MockTwinDB_DBGetTwinDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetTwinDefinition_Call) RunAndReturn(run func(string) (*twin.DigitalTwinDefinition, error)) *MockTwinDB_DBGetTwinDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DBGetTwinDefinitions provides a mock function with no fields
func (_m *MockTwinDB) DBGetTwinDefinitions() ([]*twin.DigitalTwinDefinition, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBGetTwinDefinitions")
	}

	var r0 []*twin.DigitalTwinDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*twin.DigitalTwinDefinition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*twin.DigitalTwinDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*twin.DigitalTwinDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBGetTwinDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBGetTwinDefinitions'
type MockTwinDB_DBGetTwinDefinitions_Call struct {
	*mock.Call
}

// DBGetTwinDefinitions is a helper method to define mock.On call
func (_e *MockTwinDB_Expecter) DBGetTwinDefinitions() *MockTwinDB_DBGetTwinDefinitions_Call {
	return &MockTwinDB_DBGetTwinDefinitions_Call{Call: _e.mock.On("DBGetTwinDefinitions")}
}

func (_c *MockTwinDB_DBGetTwinDefinitions_Call) Run(run func()) *MockTwinDB_DBGetTwinDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTwinDB_DBGetTwinDefinitions_Call) Return(_a0 []*twin.DigitalTwinDefinition, _a1 error) *MockTwinDB_DBGetTwinDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBGetTwinDefinitions_Call) RunAndReturn(run func() ([]*twin.DigitalTwinDefinition, error)) *MockTwinDB_DBGetTwinDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// DBQueryByKey provides a mock function with given fields: key
func (_m *MockTwinDB) DBQueryByKey(key string) (interface{}, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DBQueryByKey")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwinDB_DBQueryByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBQueryByKey'
type MockTwinDB_DBQueryByKey_Call struct {
	*mock.Call
}

// DBQueryByKey is a helper method to define mock.On call
//   - key string
func (_e *MockTwinDB_Expecter) DBQueryByKey(key interface{}) *MockTwinDB_DBQueryByKey_Call {
	return &MockTwinDB_DBQueryByKey_Call{Call: _e.mock.On("DBQueryByKey", key)}
}

func (_c *MockTwinDB_DBQueryByKey_Call) Run(run func(key string)) *MockTwinDB_DBQueryByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwinDB_DBQueryByKey_Call) Return(_a0 interface{}, _a1 error) *MockTwinDB_DBQueryByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwinDB_DBQueryByKey_Call) RunAndReturn(run func(string) (interface{}, error)) *MockTwinDB_DBQueryByKey_Call {
	_c.Call.Return(run)
	return _c
}

// DBUpdateTwinDefinition provides a mock function with given fields: twinDefinition
func (_m *MockTwinDB) DBUpdateTwinDefinition(twinDefinition twin.DigitalTwinDefinition) error {
	ret := _m.Called(twinDefinition)

	if len(ret) == 0 {
		panic("no return value specified for DBUpdateTwinDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(twin.DigitalTwinDefinition) error); ok {
		r0 = rf(twinDefinition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwinDB_DBUpdateTwinDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBUpdateTwinDefinition'
type MockTwinDB_DBUpdateTwinDefinition_Call struct {
	*mock.Call
}

// DBUpdateTwinDefinition is a helper method to define mock.On call
//   - twinDefinition twin.DigitalTwinDefinition
func (_e *MockTwinDB_Expecter) DBUpdateTwinDefinition(twinDefinition interface{}) *MockTwinDB_DBUpdateTwinDefinition_Call {
	return &MockTwinDB_DBUpdateTwinDefinition_Call{Call: _e.mock.On("DBUpdateTwinDefinition", twinDefinition)}
}

func (_c *MockTwinDB_DBUpdateTwinDefinition_Call) Run(run func(twinDefinition twin.DigitalTwinDefinition)) *MockTwinDB_DBUpdateTwinDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(twin.DigitalTwinDefinition))
	})
	return _c
}

func (_c *MockTwinDB_DBUpdateTwinDefinition_Call) Return(_a0 error) *MockTwinDB_DBUpdateTwinDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwinDB_DBUpdateTwinDefinition_Call) RunAndReturn(run func(twin.DigitalTwinDefinition) error) *MockTwinDB_DBUpdateTwinDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwinDB creates a new instance of MockTwinDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwinDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwinDB {
	mock := &MockTwinDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
