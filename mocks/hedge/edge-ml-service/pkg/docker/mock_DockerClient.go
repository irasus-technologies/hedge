// Code generated by mockery v2.34.2. DO NOT EDIT.

package docker

import (
	context "context"
	"github.com/docker/docker/api/types/image"

	container "github.com/docker/docker/api/types/container"

	io "io"

	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/docker/api/types/network"

	types "github.com/docker/docker/api/types"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"

	volume "github.com/docker/docker/api/types/volume"
)

// MockDockerClient is an autogenerated mock type for the DockerClient type
type MockDockerClient struct {
	mock.Mock
}

type MockDockerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDockerClient) EXPECT() *MockDockerClient_Expecter {
	return &MockDockerClient_Expecter{mock: &_m.Mock}
}

// ContainerCreate provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, platform, containerName
func (_m *MockDockerClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	var r0 container.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDockerClient_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type MockDockerClient_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//  - ctx context.Context
//  - config *container.Config
//  - hostConfig *container.HostConfig
//  - networkingConfig *network.NetworkingConfig
//  - platform *v1.Platform
//  - containerName string
func (_e *MockDockerClient_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *MockDockerClient_ContainerCreate_Call {
	return &MockDockerClient_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *MockDockerClient_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(*v1.Platform), args[5].(string))
	})
	return _c
}

func (_c *MockDockerClient_ContainerCreate_Call) Return(_a0 container.CreateResponse, _a1 error) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDockerClient_ContainerCreate_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)) *MockDockerClient_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspect provides a mock function with given fields: ctx, containerID
func (_m *MockDockerClient) ContainerInspect(ctx context.Context, containerID string) (types.ContainerJSON, error) {
	ret := _m.Called(ctx, containerID)

	var r0 types.ContainerJSON
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ContainerJSON, error)); ok {
		return rf(ctx, containerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ContainerJSON); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Get(0).(types.ContainerJSON)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDockerClient_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type MockDockerClient_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//  - ctx context.Context
//  - containerID string
func (_e *MockDockerClient_Expecter) ContainerInspect(ctx interface{}, containerID interface{}) *MockDockerClient_ContainerInspect_Call {
	return &MockDockerClient_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, containerID)}
}

func (_c *MockDockerClient_ContainerInspect_Call) Run(run func(ctx context.Context, containerID string)) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_ContainerInspect_Call) Return(_a0 types.ContainerJSON, _a1 error) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDockerClient_ContainerInspect_Call) RunAndReturn(run func(context.Context, string) (types.ContainerJSON, error)) *MockDockerClient_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function with given fields: ctx, options
func (_m *MockDockerClient) ContainerList(ctx context.Context, options container.ListOptions) ([]types.Container, error) {
	ret := _m.Called(ctx, options)

	var r0 []types.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]types.Container, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) []types.Container); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDockerClient_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type MockDockerClient_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//  - ctx context.Context
//  - options container.ListOptions
func (_e *MockDockerClient_Expecter) ContainerList(ctx interface{}, options interface{}) *MockDockerClient_ContainerList_Call {
	return &MockDockerClient_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *MockDockerClient_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *MockDockerClient_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(container.ListOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerList_Call) Return(_a0 []types.Container, _a1 error) *MockDockerClient_ContainerList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDockerClient_ContainerList_Call) RunAndReturn(run func(context.Context, container.ListOptions) ([]types.Container, error)) *MockDockerClient_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function with given fields: ctx, containerID, options
func (_m *MockDockerClient) ContainerRemove(ctx context.Context, containerID string, options container.RemoveOptions) error {
	ret := _m.Called(ctx, containerID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDockerClient_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type MockDockerClient_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//  - ctx context.Context
//  - containerID string
//  - options container.RemoveOptions
func (_e *MockDockerClient_Expecter) ContainerRemove(ctx interface{}, containerID interface{}, options interface{}) *MockDockerClient_ContainerRemove_Call {
	return &MockDockerClient_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, containerID, options)}
}

func (_c *MockDockerClient_ContainerRemove_Call) Run(run func(ctx context.Context, containerID string, options container.RemoveOptions)) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerRemove_Call) Return(_a0 error) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDockerClient_ContainerRemove_Call) RunAndReturn(run func(context.Context, string, container.RemoveOptions) error) *MockDockerClient_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function with given fields: ctx, containerID, options
func (_m *MockDockerClient) ContainerStart(ctx context.Context, containerID string, options container.StartOptions) error {
	ret := _m.Called(ctx, containerID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDockerClient_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockDockerClient_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//  - ctx context.Context
//  - containerID string
//  - options container.StartOptions
func (_e *MockDockerClient_Expecter) ContainerStart(ctx interface{}, containerID interface{}, options interface{}) *MockDockerClient_ContainerStart_Call {
	return &MockDockerClient_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, containerID, options)}
}

func (_c *MockDockerClient_ContainerStart_Call) Run(run func(ctx context.Context, containerID string, options container.StartOptions)) *MockDockerClient_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StartOptions))
	})
	return _c
}

func (_c *MockDockerClient_ContainerStart_Call) Return(_a0 error) *MockDockerClient_ContainerStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDockerClient_ContainerStart_Call) RunAndReturn(run func(context.Context, string, container.StartOptions) error) *MockDockerClient_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToContainer provides a mock function with given fields: ctx, containerID, dstPath, content, options
func (_m *MockDockerClient) CopyToContainer(ctx context.Context, containerID string, dstPath string, content io.Reader, options container.CopyToContainerOptions) error {
	ret := _m.Called(ctx, containerID, dstPath, content, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error); ok {
		r0 = rf(ctx, containerID, dstPath, content, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDockerClient_CopyToContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToContainer'
type MockDockerClient_CopyToContainer_Call struct {
	*mock.Call
}

// CopyToContainer is a helper method to define mock.On call
//  - ctx context.Context
//  - containerID string
//  - dstPath string
//  - content io.Reader
//  - options types.CopyToContainerOptions
func (_e *MockDockerClient_Expecter) CopyToContainer(ctx interface{}, containerID interface{}, dstPath interface{}, content interface{}, options interface{}) *MockDockerClient_CopyToContainer_Call {
	return &MockDockerClient_CopyToContainer_Call{Call: _e.mock.On("CopyToContainer", ctx, containerID, dstPath, content, options)}
}

func (_c *MockDockerClient_CopyToContainer_Call) Run(run func(ctx context.Context, containerID string, dstPath string, content io.Reader, options container.CopyToContainerOptions)) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(container.CopyToContainerOptions))
	})
	return _c
}

func (_c *MockDockerClient_CopyToContainer_Call) Return(_a0 error) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDockerClient_CopyToContainer_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error) *MockDockerClient_CopyToContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInspectWithRaw provides a mock function with given fields: ctx, imageID
func (_m *MockDockerClient) ImageInspectWithRaw(ctx context.Context, imageID string) (types.ImageInspect, []byte, error) {
	ret := _m.Called(ctx, imageID)

	var r0 types.ImageInspect
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ImageInspect, []byte, error)); ok {
		return rf(ctx, imageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ImageInspect); ok {
		r0 = rf(ctx, imageID)
	} else {
		r0 = ret.Get(0).(types.ImageInspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, imageID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, imageID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDockerClient_ImageInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInspectWithRaw'
type MockDockerClient_ImageInspectWithRaw_Call struct {
	*mock.Call
}

// ImageInspectWithRaw is a helper method to define mock.On call
//  - ctx context.Context
//  - imageID string
func (_e *MockDockerClient_Expecter) ImageInspectWithRaw(ctx interface{}, imageID interface{}) *MockDockerClient_ImageInspectWithRaw_Call {
	return &MockDockerClient_ImageInspectWithRaw_Call{Call: _e.mock.On("ImageInspectWithRaw", ctx, imageID)}
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) Run(run func(ctx context.Context, imageID string)) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) Return(_a0 types.ImageInspect, _a1 []byte, _a2 error) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDockerClient_ImageInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (types.ImageInspect, []byte, error)) *MockDockerClient_ImageInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function with given fields: ctx, refStr, options
func (_m *MockDockerClient) ImagePull(ctx context.Context, refStr string, options image.PullOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, refStr, options)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, refStr, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) io.ReadCloser); ok {
		r0 = rf(ctx, refStr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullOptions) error); ok {
		r1 = rf(ctx, refStr, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDockerClient_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type MockDockerClient_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//  - ctx context.Context
//  - refStr string
//  - options types.ImagePullOptions
func (_e *MockDockerClient_Expecter) ImagePull(ctx interface{}, refStr interface{}, options interface{}) *MockDockerClient_ImagePull_Call {
	return &MockDockerClient_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, refStr, options)}
}

func (_c *MockDockerClient_ImagePull_Call) Run(run func(ctx context.Context, refStr string, options image.PullOptions)) *MockDockerClient_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.PullOptions))
	})
	return _c
}

func (_c *MockDockerClient_ImagePull_Call) Return(_a0 io.ReadCloser, _a1 error) *MockDockerClient_ImagePull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDockerClient_ImagePull_Call) RunAndReturn(run func(context.Context, string, image.PullOptions) (io.ReadCloser, error)) *MockDockerClient_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeCreate provides a mock function with given fields: ctx, options
func (_m *MockDockerClient) VolumeCreate(ctx context.Context, options volume.CreateOptions) (volume.Volume, error) {
	ret := _m.Called(ctx, options)

	var r0 volume.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) (volume.Volume, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) volume.Volume); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, volume.CreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDockerClient_VolumeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeCreate'
type MockDockerClient_VolumeCreate_Call struct {
	*mock.Call
}

// VolumeCreate is a helper method to define mock.On call
//  - ctx context.Context
//  - options volume.CreateOptions
func (_e *MockDockerClient_Expecter) VolumeCreate(ctx interface{}, options interface{}) *MockDockerClient_VolumeCreate_Call {
	return &MockDockerClient_VolumeCreate_Call{Call: _e.mock.On("VolumeCreate", ctx, options)}
}

func (_c *MockDockerClient_VolumeCreate_Call) Run(run func(ctx context.Context, options volume.CreateOptions)) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.CreateOptions))
	})
	return _c
}

func (_c *MockDockerClient_VolumeCreate_Call) Return(_a0 volume.Volume, _a1 error) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDockerClient_VolumeCreate_Call) RunAndReturn(run func(context.Context, volume.CreateOptions) (volume.Volume, error)) *MockDockerClient_VolumeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeRemove provides a mock function with given fields: ctx, volumeID, force
func (_m *MockDockerClient) VolumeRemove(ctx context.Context, volumeID string, force bool) error {
	ret := _m.Called(ctx, volumeID, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, volumeID, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDockerClient_VolumeRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeRemove'
type MockDockerClient_VolumeRemove_Call struct {
	*mock.Call
}

// VolumeRemove is a helper method to define mock.On call
//  - ctx context.Context
//  - volumeID string
//  - force bool
func (_e *MockDockerClient_Expecter) VolumeRemove(ctx interface{}, volumeID interface{}, force interface{}) *MockDockerClient_VolumeRemove_Call {
	return &MockDockerClient_VolumeRemove_Call{Call: _e.mock.On("VolumeRemove", ctx, volumeID, force)}
}

func (_c *MockDockerClient_VolumeRemove_Call) Run(run func(ctx context.Context, volumeID string, force bool)) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockDockerClient_VolumeRemove_Call) Return(_a0 error) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDockerClient_VolumeRemove_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockDockerClient_VolumeRemove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDockerClient creates a new instance of MockDockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDockerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDockerClient {
	mock := &MockDockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
