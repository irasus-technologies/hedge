// Code generated by mockery v2.34.2. DO NOT EDIT.

package docker

import mock "github.com/stretchr/testify/mock"

// MockContainerManager is an autogenerated mock type for the ContainerManager type
type MockContainerManager struct {
	mock.Mock
}

type MockContainerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerManager) EXPECT() *MockContainerManager_Expecter {
	return &MockContainerManager_Expecter{mock: &_m.Mock}
}

// CopyModelToContainer provides a mock function with given fields: containerID, name
func (_m *MockContainerManager) CopyModelToContainer(containerID string, name string) error {
	ret := _m.Called(containerID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(containerID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainerManager_CopyModelToContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyModelToContainer'
type MockContainerManager_CopyModelToContainer_Call struct {
	*mock.Call
}

// CopyModelToContainer is a helper method to define mock.On call
//  - containerID string
//  - name string
func (_e *MockContainerManager_Expecter) CopyModelToContainer(containerID interface{}, name interface{}) *MockContainerManager_CopyModelToContainer_Call {
	return &MockContainerManager_CopyModelToContainer_Call{Call: _e.mock.On("CopyModelToContainer", containerID, name)}
}

func (_c *MockContainerManager_CopyModelToContainer_Call) Run(run func(containerID string, name string)) *MockContainerManager_CopyModelToContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContainerManager_CopyModelToContainer_Call) Return(_a0 error) *MockContainerManager_CopyModelToContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainerManager_CopyModelToContainer_Call) RunAndReturn(run func(string, string) error) *MockContainerManager_CopyModelToContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePredicationContainer provides a mock function with given fields: imagePath, algorithmName, portNo, containerName
func (_m *MockContainerManager) CreatePredicationContainer(imagePath string, algorithmName string, portNo int64, containerName string) (string, error) {
	ret := _m.Called(imagePath, algorithmName, portNo, containerName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64, string) (string, error)); ok {
		return rf(imagePath, algorithmName, portNo, containerName)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64, string) string); ok {
		r0 = rf(imagePath, algorithmName, portNo, containerName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, int64, string) error); ok {
		r1 = rf(imagePath, algorithmName, portNo, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainerManager_CreatePredicationContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePredicationContainer'
type MockContainerManager_CreatePredicationContainer_Call struct {
	*mock.Call
}

// CreatePredicationContainer is a helper method to define mock.On call
//  - imagePath string
//  - algorithmName string
//  - portNo int64
//  - containerName string
func (_e *MockContainerManager_Expecter) CreatePredicationContainer(imagePath interface{}, algorithmName interface{}, portNo interface{}, containerName interface{}) *MockContainerManager_CreatePredicationContainer_Call {
	return &MockContainerManager_CreatePredicationContainer_Call{Call: _e.mock.On("CreatePredicationContainer", imagePath, algorithmName, portNo, containerName)}
}

func (_c *MockContainerManager_CreatePredicationContainer_Call) Run(run func(imagePath string, algorithmName string, portNo int64, containerName string)) *MockContainerManager_CreatePredicationContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockContainerManager_CreatePredicationContainer_Call) Return(_a0 string, _a1 error) *MockContainerManager_CreatePredicationContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainerManager_CreatePredicationContainer_Call) RunAndReturn(run func(string, string, int64, string) (string, error)) *MockContainerManager_CreatePredicationContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrainingContainer provides a mock function with given fields: imagePath, name, trainingZip
func (_m *MockContainerManager) CreateTrainingContainer(imagePath string, name string, trainingZip string) (string, error) {
	ret := _m.Called(imagePath, name, trainingZip)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(imagePath, name, trainingZip)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(imagePath, name, trainingZip)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(imagePath, name, trainingZip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainerManager_CreateTrainingContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrainingContainer'
type MockContainerManager_CreateTrainingContainer_Call struct {
	*mock.Call
}

// CreateTrainingContainer is a helper method to define mock.On call
//  - imagePath string
//  - name string
//  - trainingZip string
func (_e *MockContainerManager_Expecter) CreateTrainingContainer(imagePath interface{}, name interface{}, trainingZip interface{}) *MockContainerManager_CreateTrainingContainer_Call {
	return &MockContainerManager_CreateTrainingContainer_Call{Call: _e.mock.On("CreateTrainingContainer", imagePath, name, trainingZip)}
}

func (_c *MockContainerManager_CreateTrainingContainer_Call) Run(run func(imagePath string, name string, trainingZip string)) *MockContainerManager_CreateTrainingContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockContainerManager_CreateTrainingContainer_Call) Return(_a0 string, _a1 error) *MockContainerManager_CreateTrainingContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainerManager_CreateTrainingContainer_Call) RunAndReturn(run func(string, string, string) (string, error)) *MockContainerManager_CreateTrainingContainer_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContainer provides a mock function with given fields: ContainerName
func (_m *MockContainerManager) RemoveContainer(ContainerName string) error {
	ret := _m.Called(ContainerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ContainerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainerManager_RemoveContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainer'
type MockContainerManager_RemoveContainer_Call struct {
	*mock.Call
}

// RemoveContainer is a helper method to define mock.On call
//  - ContainerName string
func (_e *MockContainerManager_Expecter) RemoveContainer(ContainerName interface{}) *MockContainerManager_RemoveContainer_Call {
	return &MockContainerManager_RemoveContainer_Call{Call: _e.mock.On("RemoveContainer", ContainerName)}
}

func (_c *MockContainerManager_RemoveContainer_Call) Run(run func(ContainerName string)) *MockContainerManager_RemoveContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContainerManager_RemoveContainer_Call) Return(_a0 error) *MockContainerManager_RemoveContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainerManager_RemoveContainer_Call) RunAndReturn(run func(string) error) *MockContainerManager_RemoveContainer_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContainerById provides a mock function with given fields: containerID
func (_m *MockContainerManager) RemoveContainerById(containerID string) error {
	ret := _m.Called(containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainerManager_RemoveContainerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainerById'
type MockContainerManager_RemoveContainerById_Call struct {
	*mock.Call
}

// RemoveContainerById is a helper method to define mock.On call
//  - containerID string
func (_e *MockContainerManager_Expecter) RemoveContainerById(containerID interface{}) *MockContainerManager_RemoveContainerById_Call {
	return &MockContainerManager_RemoveContainerById_Call{Call: _e.mock.On("RemoveContainerById", containerID)}
}

func (_c *MockContainerManager_RemoveContainerById_Call) Run(run func(containerID string)) *MockContainerManager_RemoveContainerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContainerManager_RemoveContainerById_Call) Return(_a0 error) *MockContainerManager_RemoveContainerById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainerManager_RemoveContainerById_Call) RunAndReturn(run func(string) error) *MockContainerManager_RemoveContainerById_Call {
	_c.Call.Return(run)
	return _c
}

// RunTrainingContainer provides a mock function with given fields: name, containerID
func (_m *MockContainerManager) RunTrainingContainer(name string, containerID string) error {
	ret := _m.Called(name, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainerManager_RunTrainingContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTrainingContainer'
type MockContainerManager_RunTrainingContainer_Call struct {
	*mock.Call
}

// RunTrainingContainer is a helper method to define mock.On call
//  - name string
//  - containerID string
func (_e *MockContainerManager_Expecter) RunTrainingContainer(name interface{}, containerID interface{}) *MockContainerManager_RunTrainingContainer_Call {
	return &MockContainerManager_RunTrainingContainer_Call{Call: _e.mock.On("RunTrainingContainer", name, containerID)}
}

func (_c *MockContainerManager_RunTrainingContainer_Call) Run(run func(name string, containerID string)) *MockContainerManager_RunTrainingContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContainerManager_RunTrainingContainer_Call) Return(_a0 error) *MockContainerManager_RunTrainingContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainerManager_RunTrainingContainer_Call) RunAndReturn(run func(string, string) error) *MockContainerManager_RunTrainingContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StartContainer provides a mock function with given fields: name, containerID
func (_m *MockContainerManager) StartContainer(name string, containerID string) error {
	ret := _m.Called(name, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainerManager_StartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartContainer'
type MockContainerManager_StartContainer_Call struct {
	*mock.Call
}

// StartContainer is a helper method to define mock.On call
//  - name string
//  - containerID string
func (_e *MockContainerManager_Expecter) StartContainer(name interface{}, containerID interface{}) *MockContainerManager_StartContainer_Call {
	return &MockContainerManager_StartContainer_Call{Call: _e.mock.On("StartContainer", name, containerID)}
}

func (_c *MockContainerManager_StartContainer_Call) Run(run func(name string, containerID string)) *MockContainerManager_StartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContainerManager_StartContainer_Call) Return(_a0 error) *MockContainerManager_StartContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainerManager_StartContainer_Call) RunAndReturn(run func(string, string) error) *MockContainerManager_StartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContainerManager creates a new instance of MockContainerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerManager {
	mock := &MockContainerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
