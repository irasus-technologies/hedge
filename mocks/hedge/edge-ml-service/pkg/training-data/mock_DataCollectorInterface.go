// Code generated by mockery v2.45.1. DO NOT EDIT.

package training_data

import (
	data "hedge/edge-ml-service/pkg/dto/data"
	helpers "hedge/edge-ml-service/pkg/helpers"

	mock "github.com/stretchr/testify/mock"

	sync "sync"

	training_data "hedge/edge-ml-service/pkg/training-data"
)

// MockDataCollectorInterface is an autogenerated mock type for the DataCollectorInterface type
type MockDataCollectorInterface struct {
	mock.Mock
}

type MockDataCollectorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataCollectorInterface) EXPECT() *MockDataCollectorInterface_Expecter {
	return &MockDataCollectorInterface_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockDataCollectorInterface) Execute() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataCollectorInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDataCollectorInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockDataCollectorInterface_Expecter) Execute() *MockDataCollectorInterface_Execute_Call {
	return &MockDataCollectorInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockDataCollectorInterface_Execute_Call) Run(run func()) *MockDataCollectorInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataCollectorInterface_Execute_Call) Return(_a0 error) *MockDataCollectorInterface_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_Execute_Call) RunAndReturn(run func() error) *MockDataCollectorInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteWithFileNames provides a mock function with given fields: trainingDataFile
func (_m *MockDataCollectorInterface) ExecuteWithFileNames(trainingDataFile string) error {
	ret := _m.Called(trainingDataFile)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithFileNames")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(trainingDataFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataCollectorInterface_ExecuteWithFileNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWithFileNames'
type MockDataCollectorInterface_ExecuteWithFileNames_Call struct {
	*mock.Call
}

// ExecuteWithFileNames is a helper method to define mock.On call
//   - trainingDataFile string
func (_e *MockDataCollectorInterface_Expecter) ExecuteWithFileNames(trainingDataFile interface{}) *MockDataCollectorInterface_ExecuteWithFileNames_Call {
	return &MockDataCollectorInterface_ExecuteWithFileNames_Call{Call: _e.mock.On("ExecuteWithFileNames", trainingDataFile)}
}

func (_c *MockDataCollectorInterface_ExecuteWithFileNames_Call) Run(run func(trainingDataFile string)) *MockDataCollectorInterface_ExecuteWithFileNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDataCollectorInterface_ExecuteWithFileNames_Call) Return(_a0 error) *MockDataCollectorInterface_ExecuteWithFileNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_ExecuteWithFileNames_Call) RunAndReturn(run func(string) error) *MockDataCollectorInterface_ExecuteWithFileNames_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateConfig provides a mock function with given fields: trainingConfigFile
func (_m *MockDataCollectorInterface) GenerateConfig(trainingConfigFile string) error {
	ret := _m.Called(trainingConfigFile)

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(trainingConfigFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataCollectorInterface_GenerateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateConfig'
type MockDataCollectorInterface_GenerateConfig_Call struct {
	*mock.Call
}

// GenerateConfig is a helper method to define mock.On call
//   - trainingConfigFile string
func (_e *MockDataCollectorInterface_Expecter) GenerateConfig(trainingConfigFile interface{}) *MockDataCollectorInterface_GenerateConfig_Call {
	return &MockDataCollectorInterface_GenerateConfig_Call{Call: _e.mock.On("GenerateConfig", trainingConfigFile)}
}

func (_c *MockDataCollectorInterface_GenerateConfig_Call) Run(run func(trainingConfigFile string)) *MockDataCollectorInterface_GenerateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDataCollectorInterface_GenerateConfig_Call) Return(_a0 error) *MockDataCollectorInterface_GenerateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_GenerateConfig_Call) RunAndReturn(run func(string) error) *MockDataCollectorInterface_GenerateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSample provides a mock function with given fields: dataSampleSize
func (_m *MockDataCollectorInterface) GenerateSample(dataSampleSize int) ([]string, error) {
	ret := _m.Called(dataSampleSize)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSample")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(dataSampleSize)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(dataSampleSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(dataSampleSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataCollectorInterface_GenerateSample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSample'
type MockDataCollectorInterface_GenerateSample_Call struct {
	*mock.Call
}

// GenerateSample is a helper method to define mock.On call
//   - dataSampleSize int
func (_e *MockDataCollectorInterface_Expecter) GenerateSample(dataSampleSize interface{}) *MockDataCollectorInterface_GenerateSample_Call {
	return &MockDataCollectorInterface_GenerateSample_Call{Call: _e.mock.On("GenerateSample", dataSampleSize)}
}

func (_c *MockDataCollectorInterface_GenerateSample_Call) Run(run func(dataSampleSize int)) *MockDataCollectorInterface_GenerateSample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockDataCollectorInterface_GenerateSample_Call) Return(_a0 []string, _a1 error) *MockDataCollectorInterface_GenerateSample_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataCollectorInterface_GenerateSample_Call) RunAndReturn(run func(int) ([]string, error)) *MockDataCollectorInterface_GenerateSample_Call {
	_c.Call.Return(run)
	return _c
}

// GetFetchStatusManager provides a mock function with given fields:
func (_m *MockDataCollectorInterface) GetFetchStatusManager() training_data.FetchStatusManagerInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFetchStatusManager")
	}

	var r0 training_data.FetchStatusManagerInterface
	if rf, ok := ret.Get(0).(func() training_data.FetchStatusManagerInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(training_data.FetchStatusManagerInterface)
		}
	}

	return r0
}

// MockDataCollectorInterface_GetFetchStatusManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFetchStatusManager'
type MockDataCollectorInterface_GetFetchStatusManager_Call struct {
	*mock.Call
}

// GetFetchStatusManager is a helper method to define mock.On call
func (_e *MockDataCollectorInterface_Expecter) GetFetchStatusManager() *MockDataCollectorInterface_GetFetchStatusManager_Call {
	return &MockDataCollectorInterface_GetFetchStatusManager_Call{Call: _e.mock.On("GetFetchStatusManager")}
}

func (_c *MockDataCollectorInterface_GetFetchStatusManager_Call) Run(run func()) *MockDataCollectorInterface_GetFetchStatusManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataCollectorInterface_GetFetchStatusManager_Call) Return(_a0 training_data.FetchStatusManagerInterface) *MockDataCollectorInterface_GetFetchStatusManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_GetFetchStatusManager_Call) RunAndReturn(run func() training_data.FetchStatusManagerInterface) *MockDataCollectorInterface_GetFetchStatusManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetMlStorage provides a mock function with given fields:
func (_m *MockDataCollectorInterface) GetMlStorage() helpers.MLStorageInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMlStorage")
	}

	var r0 helpers.MLStorageInterface
	if rf, ok := ret.Get(0).(func() helpers.MLStorageInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(helpers.MLStorageInterface)
		}
	}

	return r0
}

// MockDataCollectorInterface_GetMlStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMlStorage'
type MockDataCollectorInterface_GetMlStorage_Call struct {
	*mock.Call
}

// GetMlStorage is a helper method to define mock.On call
func (_e *MockDataCollectorInterface_Expecter) GetMlStorage() *MockDataCollectorInterface_GetMlStorage_Call {
	return &MockDataCollectorInterface_GetMlStorage_Call{Call: _e.mock.On("GetMlStorage")}
}

func (_c *MockDataCollectorInterface_GetMlStorage_Call) Run(run func()) *MockDataCollectorInterface_GetMlStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataCollectorInterface_GetMlStorage_Call) Return(_a0 helpers.MLStorageInterface) *MockDataCollectorInterface_GetMlStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_GetMlStorage_Call) RunAndReturn(run func() helpers.MLStorageInterface) *MockDataCollectorInterface_GetMlStorage_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreProcessor provides a mock function with given fields:
func (_m *MockDataCollectorInterface) GetPreProcessor() helpers.PreProcessorInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreProcessor")
	}

	var r0 helpers.PreProcessorInterface
	if rf, ok := ret.Get(0).(func() helpers.PreProcessorInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(helpers.PreProcessorInterface)
		}
	}

	return r0
}

// MockDataCollectorInterface_GetPreProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreProcessor'
type MockDataCollectorInterface_GetPreProcessor_Call struct {
	*mock.Call
}

// GetPreProcessor is a helper method to define mock.On call
func (_e *MockDataCollectorInterface_Expecter) GetPreProcessor() *MockDataCollectorInterface_GetPreProcessor_Call {
	return &MockDataCollectorInterface_GetPreProcessor_Call{Call: _e.mock.On("GetPreProcessor")}
}

func (_c *MockDataCollectorInterface_GetPreProcessor_Call) Run(run func()) *MockDataCollectorInterface_GetPreProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataCollectorInterface_GetPreProcessor_Call) Return(_a0 helpers.PreProcessorInterface) *MockDataCollectorInterface_GetPreProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataCollectorInterface_GetPreProcessor_Call) RunAndReturn(run func() helpers.PreProcessorInterface) *MockDataCollectorInterface_GetPreProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// GetSampleDataSetFromDB provides a mock function with given fields: start, end
func (_m *MockDataCollectorInterface) GetSampleDataSetFromDB(start int64, end int64) ([][]*data.TSDataElement, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetSampleDataSetFromDB")
	}

	var r0 [][]*data.TSDataElement
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([][]*data.TSDataElement, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) [][]*data.TSDataElement); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*data.TSDataElement)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataCollectorInterface_GetSampleDataSetFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSampleDataSetFromDB'
type MockDataCollectorInterface_GetSampleDataSetFromDB_Call struct {
	*mock.Call
}

// GetSampleDataSetFromDB is a helper method to define mock.On call
//   - start int64
//   - end int64
func (_e *MockDataCollectorInterface_Expecter) GetSampleDataSetFromDB(start interface{}, end interface{}) *MockDataCollectorInterface_GetSampleDataSetFromDB_Call {
	return &MockDataCollectorInterface_GetSampleDataSetFromDB_Call{Call: _e.mock.On("GetSampleDataSetFromDB", start, end)}
}

func (_c *MockDataCollectorInterface_GetSampleDataSetFromDB_Call) Run(run func(start int64, end int64)) *MockDataCollectorInterface_GetSampleDataSetFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockDataCollectorInterface_GetSampleDataSetFromDB_Call) Return(_a0 [][]*data.TSDataElement, _a1 error) *MockDataCollectorInterface_GetSampleDataSetFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataCollectorInterface_GetSampleDataSetFromDB_Call) RunAndReturn(run func(int64, int64) ([][]*data.TSDataElement, error)) *MockDataCollectorInterface_GetSampleDataSetFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrainingDataSample provides a mock function with given fields: start, end, rowCountByGroup
func (_m *MockDataCollectorInterface) GetTrainingDataSample(start int64, end int64, rowCountByGroup *sync.Map) ([][]string, []string, error) {
	ret := _m.Called(start, end, rowCountByGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingDataSample")
	}

	var r0 [][]string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, int64, *sync.Map) ([][]string, []string, error)); ok {
		return rf(start, end, rowCountByGroup)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, *sync.Map) [][]string); ok {
		r0 = rf(start, end, rowCountByGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, *sync.Map) []string); ok {
		r1 = rf(start, end, rowCountByGroup)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(int64, int64, *sync.Map) error); ok {
		r2 = rf(start, end, rowCountByGroup)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDataCollectorInterface_GetTrainingDataSample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainingDataSample'
type MockDataCollectorInterface_GetTrainingDataSample_Call struct {
	*mock.Call
}

// GetTrainingDataSample is a helper method to define mock.On call
//   - start int64
//   - end int64
//   - rowCountByGroup *sync.Map
func (_e *MockDataCollectorInterface_Expecter) GetTrainingDataSample(start interface{}, end interface{}, rowCountByGroup interface{}) *MockDataCollectorInterface_GetTrainingDataSample_Call {
	return &MockDataCollectorInterface_GetTrainingDataSample_Call{Call: _e.mock.On("GetTrainingDataSample", start, end, rowCountByGroup)}
}

func (_c *MockDataCollectorInterface_GetTrainingDataSample_Call) Run(run func(start int64, end int64, rowCountByGroup *sync.Map)) *MockDataCollectorInterface_GetTrainingDataSample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(*sync.Map))
	})
	return _c
}

func (_c *MockDataCollectorInterface_GetTrainingDataSample_Call) Return(_a0 [][]string, _a1 []string, _a2 error) *MockDataCollectorInterface_GetTrainingDataSample_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDataCollectorInterface_GetTrainingDataSample_Call) RunAndReturn(run func(int64, int64, *sync.Map) ([][]string, []string, error)) *MockDataCollectorInterface_GetTrainingDataSample_Call {
	_c.Call.Return(run)
	return _c
}

// SetFetchStatusManager provides a mock function with given fields: statusFileName
func (_m *MockDataCollectorInterface) SetFetchStatusManager(statusFileName string) {
	_m.Called(statusFileName)
}

// MockDataCollectorInterface_SetFetchStatusManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFetchStatusManager'
type MockDataCollectorInterface_SetFetchStatusManager_Call struct {
	*mock.Call
}

// SetFetchStatusManager is a helper method to define mock.On call
//   - statusFileName string
func (_e *MockDataCollectorInterface_Expecter) SetFetchStatusManager(statusFileName interface{}) *MockDataCollectorInterface_SetFetchStatusManager_Call {
	return &MockDataCollectorInterface_SetFetchStatusManager_Call{Call: _e.mock.On("SetFetchStatusManager", statusFileName)}
}

func (_c *MockDataCollectorInterface_SetFetchStatusManager_Call) Run(run func(statusFileName string)) *MockDataCollectorInterface_SetFetchStatusManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDataCollectorInterface_SetFetchStatusManager_Call) Return() *MockDataCollectorInterface_SetFetchStatusManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDataCollectorInterface_SetFetchStatusManager_Call) RunAndReturn(run func(string)) *MockDataCollectorInterface_SetFetchStatusManager_Call {
	_c.Call.Return(run)
	return _c
}

// SetPreProcessor provides a mock function with given fields: preProcessor
func (_m *MockDataCollectorInterface) SetPreProcessor(preProcessor helpers.PreProcessorInterface) {
	_m.Called(preProcessor)
}

// MockDataCollectorInterface_SetPreProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPreProcessor'
type MockDataCollectorInterface_SetPreProcessor_Call struct {
	*mock.Call
}

// SetPreProcessor is a helper method to define mock.On call
//   - preProcessor helpers.PreProcessorInterface
func (_e *MockDataCollectorInterface_Expecter) SetPreProcessor(preProcessor interface{}) *MockDataCollectorInterface_SetPreProcessor_Call {
	return &MockDataCollectorInterface_SetPreProcessor_Call{Call: _e.mock.On("SetPreProcessor", preProcessor)}
}

func (_c *MockDataCollectorInterface_SetPreProcessor_Call) Run(run func(preProcessor helpers.PreProcessorInterface)) *MockDataCollectorInterface_SetPreProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(helpers.PreProcessorInterface))
	})
	return _c
}

func (_c *MockDataCollectorInterface_SetPreProcessor_Call) Return() *MockDataCollectorInterface_SetPreProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDataCollectorInterface_SetPreProcessor_Call) RunAndReturn(run func(helpers.PreProcessorInterface)) *MockDataCollectorInterface_SetPreProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataCollectorInterface creates a new instance of MockDataCollectorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataCollectorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataCollectorInterface {
	mock := &MockDataCollectorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
