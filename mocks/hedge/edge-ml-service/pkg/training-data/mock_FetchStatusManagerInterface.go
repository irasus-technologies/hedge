// Code generated by mockery v2.38.0. DO NOT EDIT.

package training_data

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockFetchStatusManagerInterface is an autogenerated mock type for the FetchStatusManagerInterface type
type MockFetchStatusManagerInterface struct {
	mock.Mock
}

type MockFetchStatusManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFetchStatusManagerInterface) EXPECT() *MockFetchStatusManagerInterface_Expecter {
	return &MockFetchStatusManagerInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockFetchStatusManagerInterface) Close() {
	_m.Called()
}

// MockFetchStatusManagerInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFetchStatusManagerInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFetchStatusManagerInterface_Expecter) Close() *MockFetchStatusManagerInterface_Close_Call {
	return &MockFetchStatusManagerInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFetchStatusManagerInterface_Close_Call) Run(run func()) *MockFetchStatusManagerInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFetchStatusManagerInterface_Close_Call) Return() *MockFetchStatusManagerInterface_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFetchStatusManagerInterface_Close_Call) RunAndReturn(run func()) *MockFetchStatusManagerInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields:
func (_m *MockFetchStatusManagerInterface) GetFile() *os.File {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *os.File
	if rf, ok := ret.Get(0).(func() *os.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	return r0
}

// MockFetchStatusManagerInterface_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockFetchStatusManagerInterface_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
func (_e *MockFetchStatusManagerInterface_Expecter) GetFile() *MockFetchStatusManagerInterface_GetFile_Call {
	return &MockFetchStatusManagerInterface_GetFile_Call{Call: _e.mock.On("GetFile")}
}

func (_c *MockFetchStatusManagerInterface_GetFile_Call) Run(run func()) *MockFetchStatusManagerInterface_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFetchStatusManagerInterface_GetFile_Call) Return(_a0 *os.File) *MockFetchStatusManagerInterface_GetFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFetchStatusManagerInterface_GetFile_Call) RunAndReturn(run func() *os.File) *MockFetchStatusManagerInterface_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields:
func (_m *MockFetchStatusManagerInterface) GetStatus() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFetchStatusManagerInterface_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockFetchStatusManagerInterface_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *MockFetchStatusManagerInterface_Expecter) GetStatus() *MockFetchStatusManagerInterface_GetStatus_Call {
	return &MockFetchStatusManagerInterface_GetStatus_Call{Call: _e.mock.On("GetStatus")}
}

func (_c *MockFetchStatusManagerInterface_GetStatus_Call) Run(run func()) *MockFetchStatusManagerInterface_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFetchStatusManagerInterface_GetStatus_Call) Return(_a0 string) *MockFetchStatusManagerInterface_GetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFetchStatusManagerInterface_GetStatus_Call) RunAndReturn(run func() string) *MockFetchStatusManagerInterface_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: status, errorMessage
func (_m *MockFetchStatusManagerInterface) UpdateStatus(status string, errorMessage ...string) {
	_va := make([]interface{}, len(errorMessage))
	for _i := range errorMessage {
		_va[_i] = errorMessage[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, status)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockFetchStatusManagerInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockFetchStatusManagerInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - status string
//   - errorMessage ...string
func (_e *MockFetchStatusManagerInterface_Expecter) UpdateStatus(status interface{}, errorMessage ...interface{}) *MockFetchStatusManagerInterface_UpdateStatus_Call {
	return &MockFetchStatusManagerInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus",
		append([]interface{}{status}, errorMessage...)...)}
}

func (_c *MockFetchStatusManagerInterface_UpdateStatus_Call) Run(run func(status string, errorMessage ...string)) *MockFetchStatusManagerInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockFetchStatusManagerInterface_UpdateStatus_Call) Return() *MockFetchStatusManagerInterface_UpdateStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFetchStatusManagerInterface_UpdateStatus_Call) RunAndReturn(run func(string, ...string)) *MockFetchStatusManagerInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFetchStatusManagerInterface creates a new instance of MockFetchStatusManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFetchStatusManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFetchStatusManagerInterface {
	mock := &MockFetchStatusManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
