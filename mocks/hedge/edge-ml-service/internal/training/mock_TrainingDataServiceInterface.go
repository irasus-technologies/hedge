// Code generated by mockery v2.45.1. DO NOT EDIT.

package training

import (
	errors "hedge/common/errors"
	config "hedge/edge-ml-service/pkg/dto/config"

	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"

	job "hedge/edge-ml-service/pkg/dto/job"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	redis "hedge/edge-ml-service/pkg/db/redis"

	service "hedge/common/service"

	training_data "hedge/edge-ml-service/pkg/training-data"
)

// MockTrainingDataServiceInterface is an autogenerated mock type for the TrainingDataServiceInterface type
type MockTrainingDataServiceInterface struct {
	mock.Mock
}

type MockTrainingDataServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrainingDataServiceInterface) EXPECT() *MockTrainingDataServiceInterface_Expecter {
	return &MockTrainingDataServiceInterface_Expecter{mock: &_m.Mock}
}

// CheckIfJobExists provides a mock function with given fields: jobName
func (_m *MockTrainingDataServiceInterface) CheckIfJobExists(jobName string) errors.HedgeError {
	ret := _m.Called(jobName)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfJobExists")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(string) errors.HedgeError); ok {
		r0 = rf(jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_CheckIfJobExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfJobExists'
type MockTrainingDataServiceInterface_CheckIfJobExists_Call struct {
	*mock.Call
}

// CheckIfJobExists is a helper method to define mock.On call
//   - jobName string
func (_e *MockTrainingDataServiceInterface_Expecter) CheckIfJobExists(jobName interface{}) *MockTrainingDataServiceInterface_CheckIfJobExists_Call {
	return &MockTrainingDataServiceInterface_CheckIfJobExists_Call{Call: _e.mock.On("CheckIfJobExists", jobName)}
}

func (_c *MockTrainingDataServiceInterface_CheckIfJobExists_Call) Run(run func(jobName string)) *MockTrainingDataServiceInterface_CheckIfJobExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CheckIfJobExists_Call) Return(_a0 errors.HedgeError) *MockTrainingDataServiceInterface_CheckIfJobExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_CheckIfJobExists_Call) RunAndReturn(run func(string) errors.HedgeError) *MockTrainingDataServiceInterface_CheckIfJobExists_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupStatuses provides a mock function with given fields: mlModelConfigs
func (_m *MockTrainingDataServiceInterface) CleanupStatuses(mlModelConfigs []config.MLModelConfig) {
	_m.Called(mlModelConfigs)
}

// MockTrainingDataServiceInterface_CleanupStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupStatuses'
type MockTrainingDataServiceInterface_CleanupStatuses_Call struct {
	*mock.Call
}

// CleanupStatuses is a helper method to define mock.On call
//   - mlModelConfigs []config.MLModelConfig
func (_e *MockTrainingDataServiceInterface_Expecter) CleanupStatuses(mlModelConfigs interface{}) *MockTrainingDataServiceInterface_CleanupStatuses_Call {
	return &MockTrainingDataServiceInterface_CleanupStatuses_Call{Call: _e.mock.On("CleanupStatuses", mlModelConfigs)}
}

func (_c *MockTrainingDataServiceInterface_CleanupStatuses_Call) Run(run func(mlModelConfigs []config.MLModelConfig)) *MockTrainingDataServiceInterface_CleanupStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]config.MLModelConfig))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CleanupStatuses_Call) Return() *MockTrainingDataServiceInterface_CleanupStatuses_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrainingDataServiceInterface_CleanupStatuses_Call) RunAndReturn(run func([]config.MLModelConfig)) *MockTrainingDataServiceInterface_CleanupStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrainingData provides a mock function with given fields: mlModelConfig, jobSubmissionDetails
func (_m *MockTrainingDataServiceInterface) CreateTrainingData(mlModelConfig *config.MLModelConfig, jobSubmissionDetails *job.JobSubmissionDetails) (string, errors.HedgeError) {
	ret := _m.Called(mlModelConfig, jobSubmissionDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingData")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *job.JobSubmissionDetails) (string, errors.HedgeError)); ok {
		return rf(mlModelConfig, jobSubmissionDetails)
	}
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *job.JobSubmissionDetails) string); ok {
		r0 = rf(mlModelConfig, jobSubmissionDetails)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*config.MLModelConfig, *job.JobSubmissionDetails) errors.HedgeError); ok {
		r1 = rf(mlModelConfig, jobSubmissionDetails)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockTrainingDataServiceInterface_CreateTrainingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrainingData'
type MockTrainingDataServiceInterface_CreateTrainingData_Call struct {
	*mock.Call
}

// CreateTrainingData is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - jobSubmissionDetails *job.JobSubmissionDetails
func (_e *MockTrainingDataServiceInterface_Expecter) CreateTrainingData(mlModelConfig interface{}, jobSubmissionDetails interface{}) *MockTrainingDataServiceInterface_CreateTrainingData_Call {
	return &MockTrainingDataServiceInterface_CreateTrainingData_Call{Call: _e.mock.On("CreateTrainingData", mlModelConfig, jobSubmissionDetails)}
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingData_Call) Run(run func(mlModelConfig *config.MLModelConfig, jobSubmissionDetails *job.JobSubmissionDetails)) *MockTrainingDataServiceInterface_CreateTrainingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(*job.JobSubmissionDetails))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingData_Call) Return(_a0 string, _a1 errors.HedgeError) *MockTrainingDataServiceInterface_CreateTrainingData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingData_Call) RunAndReturn(run func(*config.MLModelConfig, *job.JobSubmissionDetails) (string, errors.HedgeError)) *MockTrainingDataServiceInterface_CreateTrainingData_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrainingDataExport provides a mock function with given fields: mlModelConfig, generateConfigOnly
func (_m *MockTrainingDataServiceInterface) CreateTrainingDataExport(mlModelConfig *config.MLModelConfig, generateConfigOnly bool) {
	_m.Called(mlModelConfig, generateConfigOnly)
}

// MockTrainingDataServiceInterface_CreateTrainingDataExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrainingDataExport'
type MockTrainingDataServiceInterface_CreateTrainingDataExport_Call struct {
	*mock.Call
}

// CreateTrainingDataExport is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - generateConfigOnly bool
func (_e *MockTrainingDataServiceInterface_Expecter) CreateTrainingDataExport(mlModelConfig interface{}, generateConfigOnly interface{}) *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call {
	return &MockTrainingDataServiceInterface_CreateTrainingDataExport_Call{Call: _e.mock.On("CreateTrainingDataExport", mlModelConfig, generateConfigOnly)}
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call) Run(run func(mlModelConfig *config.MLModelConfig, generateConfigOnly bool)) *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(bool))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call) Return() *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call) RunAndReturn(run func(*config.MLModelConfig, bool)) *MockTrainingDataServiceInterface_CreateTrainingDataExport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrainingDataLocal provides a mock function with given fields: mlModelConfig, jobSubmissionDetails
func (_m *MockTrainingDataServiceInterface) CreateTrainingDataLocal(mlModelConfig *config.MLModelConfig, jobSubmissionDetails *job.JobSubmissionDetails) (string, errors.HedgeError) {
	ret := _m.Called(mlModelConfig, jobSubmissionDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingDataLocal")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *job.JobSubmissionDetails) (string, errors.HedgeError)); ok {
		return rf(mlModelConfig, jobSubmissionDetails)
	}
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *job.JobSubmissionDetails) string); ok {
		r0 = rf(mlModelConfig, jobSubmissionDetails)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*config.MLModelConfig, *job.JobSubmissionDetails) errors.HedgeError); ok {
		r1 = rf(mlModelConfig, jobSubmissionDetails)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrainingDataLocal'
type MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call struct {
	*mock.Call
}

// CreateTrainingDataLocal is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - jobSubmissionDetails *job.JobSubmissionDetails
func (_e *MockTrainingDataServiceInterface_Expecter) CreateTrainingDataLocal(mlModelConfig interface{}, jobSubmissionDetails interface{}) *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call {
	return &MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call{Call: _e.mock.On("CreateTrainingDataLocal", mlModelConfig, jobSubmissionDetails)}
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call) Run(run func(mlModelConfig *config.MLModelConfig, jobSubmissionDetails *job.JobSubmissionDetails)) *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(*job.JobSubmissionDetails))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call) Return(_a0 string, _a1 errors.HedgeError) *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call) RunAndReturn(run func(*config.MLModelConfig, *job.JobSubmissionDetails) (string, errors.HedgeError)) *MockTrainingDataServiceInterface_CreateTrainingDataLocal_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrainingSampleAsync provides a mock function with given fields: mlModelConfig, dataSampleSize
func (_m *MockTrainingDataServiceInterface) CreateTrainingSampleAsync(mlModelConfig *config.MLModelConfig, dataSampleSize int) {
	_m.Called(mlModelConfig, dataSampleSize)
}

// MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrainingSampleAsync'
type MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call struct {
	*mock.Call
}

// CreateTrainingSampleAsync is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - dataSampleSize int
func (_e *MockTrainingDataServiceInterface_Expecter) CreateTrainingSampleAsync(mlModelConfig interface{}, dataSampleSize interface{}) *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call {
	return &MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call{Call: _e.mock.On("CreateTrainingSampleAsync", mlModelConfig, dataSampleSize)}
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call) Run(run func(mlModelConfig *config.MLModelConfig, dataSampleSize int)) *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(int))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call) Return() *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call) RunAndReturn(run func(*config.MLModelConfig, int)) *MockTrainingDataServiceInterface_CreateTrainingSampleAsync_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConfig provides a mock function with given fields:
func (_m *MockTrainingDataServiceInterface) GetAppConfig() *config.MLMgmtConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppConfig")
	}

	var r0 *config.MLMgmtConfig
	if rf, ok := ret.Get(0).(func() *config.MLMgmtConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.MLMgmtConfig)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_GetAppConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConfig'
type MockTrainingDataServiceInterface_GetAppConfig_Call struct {
	*mock.Call
}

// GetAppConfig is a helper method to define mock.On call
func (_e *MockTrainingDataServiceInterface_Expecter) GetAppConfig() *MockTrainingDataServiceInterface_GetAppConfig_Call {
	return &MockTrainingDataServiceInterface_GetAppConfig_Call{Call: _e.mock.On("GetAppConfig")}
}

func (_c *MockTrainingDataServiceInterface_GetAppConfig_Call) Run(run func()) *MockTrainingDataServiceInterface_GetAppConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetAppConfig_Call) Return(_a0 *config.MLMgmtConfig) *MockTrainingDataServiceInterface_GetAppConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetAppConfig_Call) RunAndReturn(run func() *config.MLMgmtConfig) *MockTrainingDataServiceInterface_GetAppConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataStoreProvider provides a mock function with given fields:
func (_m *MockTrainingDataServiceInterface) GetDataStoreProvider() service.DataStoreProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataStoreProvider")
	}

	var r0 service.DataStoreProvider
	if rf, ok := ret.Get(0).(func() service.DataStoreProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.DataStoreProvider)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_GetDataStoreProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataStoreProvider'
type MockTrainingDataServiceInterface_GetDataStoreProvider_Call struct {
	*mock.Call
}

// GetDataStoreProvider is a helper method to define mock.On call
func (_e *MockTrainingDataServiceInterface_Expecter) GetDataStoreProvider() *MockTrainingDataServiceInterface_GetDataStoreProvider_Call {
	return &MockTrainingDataServiceInterface_GetDataStoreProvider_Call{Call: _e.mock.On("GetDataStoreProvider")}
}

func (_c *MockTrainingDataServiceInterface_GetDataStoreProvider_Call) Run(run func()) *MockTrainingDataServiceInterface_GetDataStoreProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetDataStoreProvider_Call) Return(_a0 service.DataStoreProvider) *MockTrainingDataServiceInterface_GetDataStoreProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetDataStoreProvider_Call) RunAndReturn(run func() service.DataStoreProvider) *MockTrainingDataServiceInterface_GetDataStoreProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function with given fields:
func (_m *MockTrainingDataServiceInterface) GetDbClient() redis.MLDbInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 redis.MLDbInterface
	if rf, ok := ret.Get(0).(func() redis.MLDbInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.MLDbInterface)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockTrainingDataServiceInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
func (_e *MockTrainingDataServiceInterface_Expecter) GetDbClient() *MockTrainingDataServiceInterface_GetDbClient_Call {
	return &MockTrainingDataServiceInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient")}
}

func (_c *MockTrainingDataServiceInterface_GetDbClient_Call) Run(run func()) *MockTrainingDataServiceInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetDbClient_Call) Return(_a0 redis.MLDbInterface) *MockTrainingDataServiceInterface_GetDbClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetDbClient_Call) RunAndReturn(run func() redis.MLDbInterface) *MockTrainingDataServiceInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields:
func (_m *MockTrainingDataServiceInterface) GetService() interfaces.ApplicationService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 interfaces.ApplicationService
	if rf, ok := ret.Get(0).(func() interfaces.ApplicationService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ApplicationService)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockTrainingDataServiceInterface_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
func (_e *MockTrainingDataServiceInterface_Expecter) GetService() *MockTrainingDataServiceInterface_GetService_Call {
	return &MockTrainingDataServiceInterface_GetService_Call{Call: _e.mock.On("GetService")}
}

func (_c *MockTrainingDataServiceInterface_GetService_Call) Run(run func()) *MockTrainingDataServiceInterface_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetService_Call) Return(_a0 interfaces.ApplicationService) *MockTrainingDataServiceInterface_GetService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_GetService_Call) RunAndReturn(run func() interfaces.ApplicationService) *MockTrainingDataServiceInterface_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataCollectionProcessor provides a mock function with given fields: mlModelConfig, _a1, appConfig
func (_m *MockTrainingDataServiceInterface) NewDataCollectionProcessor(mlModelConfig *config.MLModelConfig, _a1 interfaces.ApplicationService, appConfig *config.MLMgmtConfig) *training_data.DataCollector {
	ret := _m.Called(mlModelConfig, _a1, appConfig)

	if len(ret) == 0 {
		panic("no return value specified for NewDataCollectionProcessor")
	}

	var r0 *training_data.DataCollector
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, interfaces.ApplicationService, *config.MLMgmtConfig) *training_data.DataCollector); ok {
		r0 = rf(mlModelConfig, _a1, appConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*training_data.DataCollector)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDataCollectionProcessor'
type MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call struct {
	*mock.Call
}

// NewDataCollectionProcessor is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - _a1 interfaces.ApplicationService
//   - appConfig *config.MLMgmtConfig
func (_e *MockTrainingDataServiceInterface_Expecter) NewDataCollectionProcessor(mlModelConfig interface{}, _a1 interface{}, appConfig interface{}) *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call {
	return &MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call{Call: _e.mock.On("NewDataCollectionProcessor", mlModelConfig, _a1, appConfig)}
}

func (_c *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call) Run(run func(mlModelConfig *config.MLModelConfig, _a1 interfaces.ApplicationService, appConfig *config.MLMgmtConfig)) *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(interfaces.ApplicationService), args[2].(*config.MLMgmtConfig))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call) Return(_a0 *training_data.DataCollector) *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call) RunAndReturn(run func(*config.MLModelConfig, interfaces.ApplicationService, *config.MLMgmtConfig) *training_data.DataCollector) *MockTrainingDataServiceInterface_NewDataCollectionProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUploadedTrainingData provides a mock function with given fields: mlModelConfig, uploadedFile
func (_m *MockTrainingDataServiceInterface) SaveUploadedTrainingData(mlModelConfig *config.MLModelConfig, uploadedFile multipart.File) errors.HedgeError {
	ret := _m.Called(mlModelConfig, uploadedFile)

	if len(ret) == 0 {
		panic("no return value specified for SaveUploadedTrainingData")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, multipart.File) errors.HedgeError); ok {
		r0 = rf(mlModelConfig, uploadedFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUploadedTrainingData'
type MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call struct {
	*mock.Call
}

// SaveUploadedTrainingData is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - uploadedFile multipart.File
func (_e *MockTrainingDataServiceInterface_Expecter) SaveUploadedTrainingData(mlModelConfig interface{}, uploadedFile interface{}) *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call {
	return &MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call{Call: _e.mock.On("SaveUploadedTrainingData", mlModelConfig, uploadedFile)}
}

func (_c *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call) Run(run func(mlModelConfig *config.MLModelConfig, uploadedFile multipart.File)) *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(multipart.File))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call) Return(_a0 errors.HedgeError) *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call) RunAndReturn(run func(*config.MLModelConfig, multipart.File) errors.HedgeError) *MockTrainingDataServiceInterface_SaveUploadedTrainingData_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrainingDataExportDeprecated provides a mock function with given fields: mlModelConfig
func (_m *MockTrainingDataServiceInterface) SetTrainingDataExportDeprecated(mlModelConfig *config.MLModelConfig) errors.HedgeError {
	ret := _m.Called(mlModelConfig)

	if len(ret) == 0 {
		panic("no return value specified for SetTrainingDataExportDeprecated")
	}

	var r0 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig) errors.HedgeError); ok {
		r0 = rf(mlModelConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}

	return r0
}

// MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrainingDataExportDeprecated'
type MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call struct {
	*mock.Call
}

// SetTrainingDataExportDeprecated is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
func (_e *MockTrainingDataServiceInterface_Expecter) SetTrainingDataExportDeprecated(mlModelConfig interface{}) *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call {
	return &MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call{Call: _e.mock.On("SetTrainingDataExportDeprecated", mlModelConfig)}
}

func (_c *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call) Run(run func(mlModelConfig *config.MLModelConfig)) *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call) Return(_a0 errors.HedgeError) *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call) RunAndReturn(run func(*config.MLModelConfig) errors.HedgeError) *MockTrainingDataServiceInterface_SetTrainingDataExportDeprecated_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUploadedData provides a mock function with given fields: mlModelConfig, mlAlgorithmDefinition
func (_m *MockTrainingDataServiceInterface) ValidateUploadedData(mlModelConfig *config.MLModelConfig, mlAlgorithmDefinition *config.MLAlgorithmDefinition) (string, errors.HedgeError) {
	ret := _m.Called(mlModelConfig, mlAlgorithmDefinition)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUploadedData")
	}

	var r0 string
	var r1 errors.HedgeError
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *config.MLAlgorithmDefinition) (string, errors.HedgeError)); ok {
		return rf(mlModelConfig, mlAlgorithmDefinition)
	}
	if rf, ok := ret.Get(0).(func(*config.MLModelConfig, *config.MLAlgorithmDefinition) string); ok {
		r0 = rf(mlModelConfig, mlAlgorithmDefinition)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*config.MLModelConfig, *config.MLAlgorithmDefinition) errors.HedgeError); ok {
		r1 = rf(mlModelConfig, mlAlgorithmDefinition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}

	return r0, r1
}

// MockTrainingDataServiceInterface_ValidateUploadedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUploadedData'
type MockTrainingDataServiceInterface_ValidateUploadedData_Call struct {
	*mock.Call
}

// ValidateUploadedData is a helper method to define mock.On call
//   - mlModelConfig *config.MLModelConfig
//   - mlAlgorithmDefinition *config.MLAlgorithmDefinition
func (_e *MockTrainingDataServiceInterface_Expecter) ValidateUploadedData(mlModelConfig interface{}, mlAlgorithmDefinition interface{}) *MockTrainingDataServiceInterface_ValidateUploadedData_Call {
	return &MockTrainingDataServiceInterface_ValidateUploadedData_Call{Call: _e.mock.On("ValidateUploadedData", mlModelConfig, mlAlgorithmDefinition)}
}

func (_c *MockTrainingDataServiceInterface_ValidateUploadedData_Call) Run(run func(mlModelConfig *config.MLModelConfig, mlAlgorithmDefinition *config.MLAlgorithmDefinition)) *MockTrainingDataServiceInterface_ValidateUploadedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.MLModelConfig), args[1].(*config.MLAlgorithmDefinition))
	})
	return _c
}

func (_c *MockTrainingDataServiceInterface_ValidateUploadedData_Call) Return(_a0 string, _a1 errors.HedgeError) *MockTrainingDataServiceInterface_ValidateUploadedData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrainingDataServiceInterface_ValidateUploadedData_Call) RunAndReturn(run func(*config.MLModelConfig, *config.MLAlgorithmDefinition) (string, errors.HedgeError)) *MockTrainingDataServiceInterface_ValidateUploadedData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrainingDataServiceInterface creates a new instance of MockTrainingDataServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrainingDataServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrainingDataServiceInterface {
	mock := &MockTrainingDataServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
