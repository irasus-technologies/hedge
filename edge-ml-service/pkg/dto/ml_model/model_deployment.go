/*******************************************************************************
* Contributors: BMC Helix, Inc.
*
* (c) Copyright 2020-2025 BMC Helix, Inc.
 
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************/


package ml_model

import (
	"hedge/edge-ml-service/pkg/dto/config"
)

// Model lifecycle starts once training ml_model is completed and ml_model is copied to file system
type MLModel struct {
	MLAlgorithm       string `json:"mlAlgorithm"`
	MLModelConfigName string `json:"mlModelConfigName"` // foreign key refers to trainingConfig against which the training is being performed
	// modelName to be generated algo+config+version
	ModelName    string `json:"modelName"` // mlModelConfig_jobName by default - autogenerated and this is unique
	ModelVersion int64  `json:"modelVersion"`
	// local model storage path
	ModelPath            string `json:"modelPath,omitempty"`
	ModelCreatedTimeSecs int64  `json:"ModelCreatedTimeMs"`
	IsModelDeprecated    bool   `json:"isModelDeprecated"`
}

type ModelDeployStatusCode int

/*
ReadytoDeploy 1 DeployCommand2. UndeployCommand3. Undeployed4. Deployed5. UndeployFailed6. DeployFailed7. EventConfigSyncFailed
*/
const (
	ReadyToDeploy ModelDeployStatusCode = iota
	PublishedDeployCommand
	PublishedUnDeployCommand
	ModelUnDeployed
	ModelDeployed
	ModelEventConfigSyncSuccess
	ModelUnDeploymentFailed
	ModelDeploymentFailed
	ModelEventConfigSyncFailed
	ModelEndOfLife //When the trained model never got deployed and was replaced by new training model
)

const (
	CREATE = "Create"
	DELETE = "Delete"
	UPDATE = "Update"
)

func (js ModelDeployStatusCode) String() string {
	return [...]string{"ReadyToDeploy", "PublishedDeployCommand", "PublishedUnDeployCommand", "ModelUnDeployed", "ModelDeployed", "ModelEventConfigSyncSuccess", "ModelUnDeploymentFailed", "ModelDeploymentFailed", "ModelEventConfigSyncFailed", "ModelEndOfLife"}[js]
}

type ModelDeploymentStatus struct {
	MLAlgorithm             string                `json:"mlAlgorithm,omitempty"`
	MLModelConfigName       string                `json:"mlModelConfigName,omitempty"`
	ModelName               string                `json:"modelName,omitempty"` // Refers to the MLModel key
	NodeId                  string                `json:"nodeId"`
	NodeDisplayName         string                `json:"nodeDisplayName"`
	DeploymentStatusCode    ModelDeployStatusCode `json:"deploymentStatusCode"`
	DeploymentStatus        string                `json:"deploymentStatus"`
	ModelVersion            int64                 `json:"modelVersion"`
	ModelDeploymentTimeSecs int64                 `json:"modelDeploymentTimeMs"`
	IsModelDeprecated       bool                  `json:"isModelDeprecated",default:"false"`
	PermittedOption         string                `json:"permittedOption",default:"deploy"` //Allowed values are deploy, undeploy or none
	DeployedContainerName   string                `json:"deployedContainerName,omitempty"`
	Message                 string                `json:"message,omitempty"` // To contain the error message when there is deployment failure
}

type ModelDeployCommand struct {
	MLAlgorithm          string                        `json:"mlAlgorithm"`
	MLModelConfigName    string                        `json:"MLModelConfigName"`
	ModelVersion         int64                         `json:"modelVersion"`
	ModelName            string                        `json:"modelName"`
	TargetNodes          []string                      `json:"targetNodes"`
	CommandName          string                        `json:"commandName"` // Valid values are Deploy or UnDeploy, UpdateMLEventConfig
	ModelAvailableDate   int64                         `json:"modelAvailableDate"`
	MLEventConfigsToSync []SyncMLEventConfig           `json:"mlEventConfigsToSync,omitempty"`
	Algorithm            *config.MLAlgorithmDefinition `json:"algorithm"`
}

type SyncMLEventConfig struct {
	SyncCommand      string               `json:"syncCommand"`
	MLEventConfig    config.MLEventConfig `json:"mlEventConfig"`
	OldMLEventConfig config.MLEventConfig `json:"oldMlEventConfig,omitempty"`
}

type DeploymentsByGroup struct {
	GroupField       string      `json:"groupField"`
	GroupValue       string      `json:"groupValue"`
	DeploymentGroups interface{} `json:"items,omitempty"`
}

type ChunkMessage struct {
	ModelID     string `json:"model_id"`    // Unique ID for the model file
	ChunkIndex  int    `json:"chunk_index"` // Position of this chunk in the sequence
	TotalChunks int    `json:"total_chunks"`
	ChunkData   []byte `json:"chunk_data"`
}
